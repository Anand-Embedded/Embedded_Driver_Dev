
stm32f4xx_driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000d9c  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000f44  08000f44  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000f44  08000f44  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  08000f44  08000f44  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000f44  08000f44  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000f44  08000f44  00010f44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000f48  08000f48  00010f48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08000f4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020018  2**0
                  CONTENTS
 10 .bss          00000028  20000018  20000018  00020018  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000040  20000040  00020018  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 13 .debug_info   00002d36  00000000  00000000  00020042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000772  00000000  00000000  00022d78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000168  00000000  00000000  000234f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000130  00000000  00000000  00023658  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000024e8  00000000  00000000  00023788  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001bd9  00000000  00000000  00025c70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00009bef  00000000  00000000  00027849  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00031438  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000500  00000000  00000000  0003148c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000018 	.word	0x20000018
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08000f2c 	.word	0x08000f2c

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	2000001c 	.word	0x2000001c
 80001e4:	08000f2c 	.word	0x08000f2c

080001e8 <delay>:
void GPIO_ButtonInit(void);
void I2C1_GpioInit(void);
void I2C1_Init(void);

void delay(void)
{
 80001e8:	b480      	push	{r7}
 80001ea:	b083      	sub	sp, #12
 80001ec:	af00      	add	r7, sp, #0
	for (uint32_t i = 0;i < 500000 ;i++);
 80001ee:	2300      	movs	r3, #0
 80001f0:	607b      	str	r3, [r7, #4]
 80001f2:	e002      	b.n	80001fa <delay+0x12>
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	3301      	adds	r3, #1
 80001f8:	607b      	str	r3, [r7, #4]
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	4a04      	ldr	r2, [pc, #16]	; (8000210 <delay+0x28>)
 80001fe:	4293      	cmp	r3, r2
 8000200:	d9f8      	bls.n	80001f4 <delay+0xc>
}
 8000202:	bf00      	nop
 8000204:	bf00      	nop
 8000206:	370c      	adds	r7, #12
 8000208:	46bd      	mov	sp, r7
 800020a:	bc80      	pop	{r7}
 800020c:	4770      	bx	lr
 800020e:	bf00      	nop
 8000210:	0007a11f 	.word	0x0007a11f

08000214 <main>:


int main(void)
{
 8000214:	b580      	push	{r7, lr}
 8000216:	b09c      	sub	sp, #112	; 0x70
 8000218:	af02      	add	r7, sp, #8
	char usr_msg[100];
	uint8_t command_code = 0;
 800021a:	2300      	movs	r3, #0
 800021c:	70fb      	strb	r3, [r7, #3]
	uint8_t Len = 0;
 800021e:	2300      	movs	r3, #0
 8000220:	70bb      	strb	r3, [r7, #2]

	//Initialize and configure the GPIO pin as input for button
	GPIO_ButtonInit();
 8000222:	f000 f887 	bl	8000334 <GPIO_ButtonInit>

	I2C1_GpioInit();
 8000226:	f000 f843 	bl	80002b0 <I2C1_GpioInit>

	I2C1_Init();
 800022a:	f000 f867 	bl	80002fc <I2C1_Init>

	I2C_PeripheralControl(I2C1, ENABLE);
 800022e:	2101      	movs	r1, #1
 8000230:	481c      	ldr	r0, [pc, #112]	; (80002a4 <main+0x90>)
 8000232:	f000 fe3c 	bl	8000eae <I2C_PeripheralControl>

	//This bit is set and cleared by software and cleared by hardware when PE=0. so after PE=1 in above statement
	I2C_ManageACK(I2C_Config.pI2Cx, ENABLE);
 8000236:	4b1c      	ldr	r3, [pc, #112]	; (80002a8 <main+0x94>)
 8000238:	681b      	ldr	r3, [r3, #0]
 800023a:	2101      	movs	r1, #1
 800023c:	4618      	mov	r0, r3
 800023e:	f000 fe1b 	bl	8000e78 <I2C_ManageACK>


	while(1)
	{
		//Wait until user press the button
		while(!GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_0));
 8000242:	bf00      	nop
 8000244:	2100      	movs	r1, #0
 8000246:	4819      	ldr	r0, [pc, #100]	; (80002ac <main+0x98>)
 8000248:	f000 fafe 	bl	8000848 <GPIO_ReadFromInputPin>
 800024c:	4603      	mov	r3, r0
 800024e:	2b00      	cmp	r3, #0
 8000250:	d0f8      	beq.n	8000244 <main+0x30>

		delay();
 8000252:	f7ff ffc9 	bl	80001e8 <delay>

		command_code = 0x51;// Used to Len information
 8000256:	2351      	movs	r3, #81	; 0x51
 8000258:	70fb      	strb	r3, [r7, #3]

		I2C_MasterSenddata(&I2C_Config,&command_code ,1, MY_SLAVE_ADDR,REPEATED_START_ENABLE);
 800025a:	1cf9      	adds	r1, r7, #3
 800025c:	2301      	movs	r3, #1
 800025e:	9300      	str	r3, [sp, #0]
 8000260:	2368      	movs	r3, #104	; 0x68
 8000262:	2201      	movs	r2, #1
 8000264:	4810      	ldr	r0, [pc, #64]	; (80002a8 <main+0x94>)
 8000266:	f000 fc93 	bl	8000b90 <I2C_MasterSenddata>
		I2C_MasterReceivedata(&I2C_Config, &Len, 1, MY_SLAVE_ADDR,REPEATED_START_ENABLE);
 800026a:	1cb9      	adds	r1, r7, #2
 800026c:	2301      	movs	r3, #1
 800026e:	9300      	str	r3, [sp, #0]
 8000270:	2368      	movs	r3, #104	; 0x68
 8000272:	2201      	movs	r2, #1
 8000274:	480c      	ldr	r0, [pc, #48]	; (80002a8 <main+0x94>)
 8000276:	f000 fcf0 	bl	8000c5a <I2C_MasterReceivedata>

		command_code = 0x52;// Used to Len information
 800027a:	2352      	movs	r3, #82	; 0x52
 800027c:	70fb      	strb	r3, [r7, #3]

		I2C_MasterSenddata(&I2C_Config,&command_code ,1, MY_SLAVE_ADDR,REPEATED_START_ENABLE);
 800027e:	1cf9      	adds	r1, r7, #3
 8000280:	2301      	movs	r3, #1
 8000282:	9300      	str	r3, [sp, #0]
 8000284:	2368      	movs	r3, #104	; 0x68
 8000286:	2201      	movs	r2, #1
 8000288:	4807      	ldr	r0, [pc, #28]	; (80002a8 <main+0x94>)
 800028a:	f000 fc81 	bl	8000b90 <I2C_MasterSenddata>
		I2C_MasterReceivedata(&I2C_Config, (uint8_t *)&usr_msg[0], Len, MY_SLAVE_ADDR,REPEATED_START_DISABLE);
 800028e:	78bb      	ldrb	r3, [r7, #2]
 8000290:	461a      	mov	r2, r3
 8000292:	1d39      	adds	r1, r7, #4
 8000294:	2300      	movs	r3, #0
 8000296:	9300      	str	r3, [sp, #0]
 8000298:	2368      	movs	r3, #104	; 0x68
 800029a:	4803      	ldr	r0, [pc, #12]	; (80002a8 <main+0x94>)
 800029c:	f000 fcdd 	bl	8000c5a <I2C_MasterReceivedata>
		while(!GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_0));
 80002a0:	e7cf      	b.n	8000242 <main+0x2e>
 80002a2:	bf00      	nop
 80002a4:	40005400 	.word	0x40005400
 80002a8:	20000034 	.word	0x20000034
 80002ac:	40020000 	.word	0x40020000

080002b0 <I2C1_GpioInit>:
 * PB6 -> I2C1_SCL
 * PB7 -> I2C1_SDA
 * Alternate functionality 4
 */
void I2C1_GpioInit(void)
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b084      	sub	sp, #16
 80002b4:	af00      	add	r7, sp, #0
	GPIO_Handle_t I2Cpins = {0};
 80002b6:	1d3b      	adds	r3, r7, #4
 80002b8:	2200      	movs	r2, #0
 80002ba:	601a      	str	r2, [r3, #0]
 80002bc:	605a      	str	r2, [r3, #4]
 80002be:	609a      	str	r2, [r3, #8]

	I2Cpins.pGPIOx = GPIOB;
 80002c0:	4b0d      	ldr	r3, [pc, #52]	; (80002f8 <I2C1_GpioInit+0x48>)
 80002c2:	607b      	str	r3, [r7, #4]
	I2Cpins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 80002c4:	2302      	movs	r3, #2
 80002c6:	727b      	strb	r3, [r7, #9]
	I2Cpins.GPIO_PinConfig.GPIO_PinOPType = GPIO_PIN_OUT_OD;
 80002c8:	2301      	movs	r3, #1
 80002ca:	733b      	strb	r3, [r7, #12]
	I2Cpins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPD_PU;
 80002cc:	2301      	movs	r3, #1
 80002ce:	72fb      	strb	r3, [r7, #11]
	I2Cpins.GPIO_PinConfig.GPIO_PinAltFunMode = 4;
 80002d0:	2304      	movs	r3, #4
 80002d2:	737b      	strb	r3, [r7, #13]
	I2Cpins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_HIGH;
 80002d4:	2302      	movs	r3, #2
 80002d6:	72bb      	strb	r3, [r7, #10]

	//scl
	I2Cpins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_6;
 80002d8:	2306      	movs	r3, #6
 80002da:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&I2Cpins);
 80002dc:	1d3b      	adds	r3, r7, #4
 80002de:	4618      	mov	r0, r3
 80002e0:	f000 f954 	bl	800058c <GPIO_Init>

	//sda
	I2Cpins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_7;
 80002e4:	2307      	movs	r3, #7
 80002e6:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&I2Cpins);
 80002e8:	1d3b      	adds	r3, r7, #4
 80002ea:	4618      	mov	r0, r3
 80002ec:	f000 f94e 	bl	800058c <GPIO_Init>

}
 80002f0:	bf00      	nop
 80002f2:	3710      	adds	r7, #16
 80002f4:	46bd      	mov	sp, r7
 80002f6:	bd80      	pop	{r7, pc}
 80002f8:	40020400 	.word	0x40020400

080002fc <I2C1_Init>:


void I2C1_Init(void)
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	af00      	add	r7, sp, #0


	I2C_Config.pI2Cx =  I2C1;
 8000300:	4b09      	ldr	r3, [pc, #36]	; (8000328 <I2C1_Init+0x2c>)
 8000302:	4a0a      	ldr	r2, [pc, #40]	; (800032c <I2C1_Init+0x30>)
 8000304:	601a      	str	r2, [r3, #0]
	I2C_Config.pI2C_Config.I2C_ACKCtrl = I2C_ACK_ENABLE;
 8000306:	4b08      	ldr	r3, [pc, #32]	; (8000328 <I2C1_Init+0x2c>)
 8000308:	2201      	movs	r2, #1
 800030a:	725a      	strb	r2, [r3, #9]
	I2C_Config.pI2C_Config.I2C_DeviceAddr = MY_ADDR;
 800030c:	4b06      	ldr	r3, [pc, #24]	; (8000328 <I2C1_Init+0x2c>)
 800030e:	2261      	movs	r2, #97	; 0x61
 8000310:	721a      	strb	r2, [r3, #8]
	I2C_Config.pI2C_Config.I2C_FMDutyCycle = I2C_FM_DUTY_2;
 8000312:	4b05      	ldr	r3, [pc, #20]	; (8000328 <I2C1_Init+0x2c>)
 8000314:	2200      	movs	r2, #0
 8000316:	815a      	strh	r2, [r3, #10]
	I2C_Config.pI2C_Config.I2C_SCLSpeed = I2C_SPEED_STD_MODE;
 8000318:	4b03      	ldr	r3, [pc, #12]	; (8000328 <I2C1_Init+0x2c>)
 800031a:	4a05      	ldr	r2, [pc, #20]	; (8000330 <I2C1_Init+0x34>)
 800031c:	605a      	str	r2, [r3, #4]

	I2C_Init(&I2C_Config);
 800031e:	4802      	ldr	r0, [pc, #8]	; (8000328 <I2C1_Init+0x2c>)
 8000320:	f000 fb70 	bl	8000a04 <I2C_Init>
}
 8000324:	bf00      	nop
 8000326:	bd80      	pop	{r7, pc}
 8000328:	20000034 	.word	0x20000034
 800032c:	40005400 	.word	0x40005400
 8000330:	000186a0 	.word	0x000186a0

08000334 <GPIO_ButtonInit>:

void GPIO_ButtonInit(void)
{
 8000334:	b580      	push	{r7, lr}
 8000336:	b084      	sub	sp, #16
 8000338:	af00      	add	r7, sp, #0

	GPIO_Handle_t GpioBtn;

	GpioBtn.pGPIOx = GPIOA;
 800033a:	4b0a      	ldr	r3, [pc, #40]	; (8000364 <GPIO_ButtonInit+0x30>)
 800033c:	607b      	str	r3, [r7, #4]
	GpioBtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_0;
 800033e:	2300      	movs	r3, #0
 8000340:	723b      	strb	r3, [r7, #8]
	GpioBtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 8000342:	2300      	movs	r3, #0
 8000344:	727b      	strb	r3, [r7, #9]
	GpioBtn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPD_NOPUPD;
 8000346:	2300      	movs	r3, #0
 8000348:	72fb      	strb	r3, [r7, #11]

	//Enable the peripheral clock
	GPIO_PeriClock_Control(GPIOA, ENABLE);
 800034a:	2101      	movs	r1, #1
 800034c:	4805      	ldr	r0, [pc, #20]	; (8000364 <GPIO_ButtonInit+0x30>)
 800034e:	f000 f835 	bl	80003bc <GPIO_PeriClock_Control>

	//Init the GPIO
	GPIO_Init(&GpioBtn);
 8000352:	1d3b      	adds	r3, r7, #4
 8000354:	4618      	mov	r0, r3
 8000356:	f000 f919 	bl	800058c <GPIO_Init>
}
 800035a:	bf00      	nop
 800035c:	3710      	adds	r7, #16
 800035e:	46bd      	mov	sp, r7
 8000360:	bd80      	pop	{r7, pc}
 8000362:	bf00      	nop
 8000364:	40020000 	.word	0x40020000

08000368 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000368:	480d      	ldr	r0, [pc, #52]	; (80003a0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800036a:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 800036c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000370:	480c      	ldr	r0, [pc, #48]	; (80003a4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000372:	490d      	ldr	r1, [pc, #52]	; (80003a8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000374:	4a0d      	ldr	r2, [pc, #52]	; (80003ac <LoopForever+0xe>)
  movs r3, #0
 8000376:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000378:	e002      	b.n	8000380 <LoopCopyDataInit>

0800037a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800037a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800037c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800037e:	3304      	adds	r3, #4

08000380 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000380:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000382:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000384:	d3f9      	bcc.n	800037a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000386:	4a0a      	ldr	r2, [pc, #40]	; (80003b0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000388:	4c0a      	ldr	r4, [pc, #40]	; (80003b4 <LoopForever+0x16>)
  movs r3, #0
 800038a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800038c:	e001      	b.n	8000392 <LoopFillZerobss>

0800038e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800038e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000390:	3204      	adds	r2, #4

08000392 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000392:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000394:	d3fb      	bcc.n	800038e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000396:	f000 fda5 	bl	8000ee4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800039a:	f7ff ff3b 	bl	8000214 <main>

0800039e <LoopForever>:

LoopForever:
    b LoopForever
 800039e:	e7fe      	b.n	800039e <LoopForever>
  ldr   r0, =_estack
 80003a0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80003a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003a8:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 80003ac:	08000f4c 	.word	0x08000f4c
  ldr r2, =_sbss
 80003b0:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 80003b4:	20000040 	.word	0x20000040

080003b8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003b8:	e7fe      	b.n	80003b8 <ADC_IRQHandler>
	...

080003bc <GPIO_PeriClock_Control>:
 *
 * @Note              -  none

 */
void GPIO_PeriClock_Control(GPIOx_RegDef_t *pGPIOx,uint8_t EnorDi)
{
 80003bc:	b480      	push	{r7}
 80003be:	b083      	sub	sp, #12
 80003c0:	af00      	add	r7, sp, #0
 80003c2:	6078      	str	r0, [r7, #4]
 80003c4:	460b      	mov	r3, r1
 80003c6:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 80003c8:	78fb      	ldrb	r3, [r7, #3]
 80003ca:	2b01      	cmp	r3, #1
 80003cc:	d162      	bne.n	8000494 <GPIO_PeriClock_Control+0xd8>
	{
		if(pGPIOx == GPIOA)
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	4a64      	ldr	r2, [pc, #400]	; (8000564 <GPIO_PeriClock_Control+0x1a8>)
 80003d2:	4293      	cmp	r3, r2
 80003d4:	d106      	bne.n	80003e4 <GPIO_PeriClock_Control+0x28>
		{
			GPIOA_PCLK_EN();
 80003d6:	4b64      	ldr	r3, [pc, #400]	; (8000568 <GPIO_PeriClock_Control+0x1ac>)
 80003d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003da:	4a63      	ldr	r2, [pc, #396]	; (8000568 <GPIO_PeriClock_Control+0x1ac>)
 80003dc:	f043 0301 	orr.w	r3, r3, #1
 80003e0:	6313      	str	r3, [r2, #48]	; 0x30
		else if(pGPIOx == GPIOI)
		{
			GPIOI_PCLK_DI();
		}
	}
}
 80003e2:	e0b9      	b.n	8000558 <GPIO_PeriClock_Control+0x19c>
		else if(pGPIOx == GPIOB)
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	4a61      	ldr	r2, [pc, #388]	; (800056c <GPIO_PeriClock_Control+0x1b0>)
 80003e8:	4293      	cmp	r3, r2
 80003ea:	d106      	bne.n	80003fa <GPIO_PeriClock_Control+0x3e>
			GPIOB_PCLK_EN();
 80003ec:	4b5e      	ldr	r3, [pc, #376]	; (8000568 <GPIO_PeriClock_Control+0x1ac>)
 80003ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003f0:	4a5d      	ldr	r2, [pc, #372]	; (8000568 <GPIO_PeriClock_Control+0x1ac>)
 80003f2:	f043 0302 	orr.w	r3, r3, #2
 80003f6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003f8:	e0ae      	b.n	8000558 <GPIO_PeriClock_Control+0x19c>
		else if(pGPIOx == GPIOC)
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	4a5c      	ldr	r2, [pc, #368]	; (8000570 <GPIO_PeriClock_Control+0x1b4>)
 80003fe:	4293      	cmp	r3, r2
 8000400:	d106      	bne.n	8000410 <GPIO_PeriClock_Control+0x54>
			GPIOC_PCLK_EN();
 8000402:	4b59      	ldr	r3, [pc, #356]	; (8000568 <GPIO_PeriClock_Control+0x1ac>)
 8000404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000406:	4a58      	ldr	r2, [pc, #352]	; (8000568 <GPIO_PeriClock_Control+0x1ac>)
 8000408:	f043 0304 	orr.w	r3, r3, #4
 800040c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800040e:	e0a3      	b.n	8000558 <GPIO_PeriClock_Control+0x19c>
		else if(pGPIOx == GPIOD)
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	4a58      	ldr	r2, [pc, #352]	; (8000574 <GPIO_PeriClock_Control+0x1b8>)
 8000414:	4293      	cmp	r3, r2
 8000416:	d106      	bne.n	8000426 <GPIO_PeriClock_Control+0x6a>
			GPIOD_PCLK_EN();
 8000418:	4b53      	ldr	r3, [pc, #332]	; (8000568 <GPIO_PeriClock_Control+0x1ac>)
 800041a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800041c:	4a52      	ldr	r2, [pc, #328]	; (8000568 <GPIO_PeriClock_Control+0x1ac>)
 800041e:	f043 0308 	orr.w	r3, r3, #8
 8000422:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000424:	e098      	b.n	8000558 <GPIO_PeriClock_Control+0x19c>
		else if(pGPIOx == GPIOE)
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	4a53      	ldr	r2, [pc, #332]	; (8000578 <GPIO_PeriClock_Control+0x1bc>)
 800042a:	4293      	cmp	r3, r2
 800042c:	d106      	bne.n	800043c <GPIO_PeriClock_Control+0x80>
			GPIOE_PCLK_EN();
 800042e:	4b4e      	ldr	r3, [pc, #312]	; (8000568 <GPIO_PeriClock_Control+0x1ac>)
 8000430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000432:	4a4d      	ldr	r2, [pc, #308]	; (8000568 <GPIO_PeriClock_Control+0x1ac>)
 8000434:	f043 0310 	orr.w	r3, r3, #16
 8000438:	6313      	str	r3, [r2, #48]	; 0x30
}
 800043a:	e08d      	b.n	8000558 <GPIO_PeriClock_Control+0x19c>
		else if(pGPIOx == GPIOF)
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	4a4f      	ldr	r2, [pc, #316]	; (800057c <GPIO_PeriClock_Control+0x1c0>)
 8000440:	4293      	cmp	r3, r2
 8000442:	d106      	bne.n	8000452 <GPIO_PeriClock_Control+0x96>
			GPIOF_PCLK_EN();
 8000444:	4b48      	ldr	r3, [pc, #288]	; (8000568 <GPIO_PeriClock_Control+0x1ac>)
 8000446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000448:	4a47      	ldr	r2, [pc, #284]	; (8000568 <GPIO_PeriClock_Control+0x1ac>)
 800044a:	f043 0320 	orr.w	r3, r3, #32
 800044e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000450:	e082      	b.n	8000558 <GPIO_PeriClock_Control+0x19c>
		else if(pGPIOx == GPIOG)
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	4a4a      	ldr	r2, [pc, #296]	; (8000580 <GPIO_PeriClock_Control+0x1c4>)
 8000456:	4293      	cmp	r3, r2
 8000458:	d106      	bne.n	8000468 <GPIO_PeriClock_Control+0xac>
			GPIOG_PCLK_EN();
 800045a:	4b43      	ldr	r3, [pc, #268]	; (8000568 <GPIO_PeriClock_Control+0x1ac>)
 800045c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800045e:	4a42      	ldr	r2, [pc, #264]	; (8000568 <GPIO_PeriClock_Control+0x1ac>)
 8000460:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000464:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000466:	e077      	b.n	8000558 <GPIO_PeriClock_Control+0x19c>
		else if(pGPIOx == GPIOH)
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	4a46      	ldr	r2, [pc, #280]	; (8000584 <GPIO_PeriClock_Control+0x1c8>)
 800046c:	4293      	cmp	r3, r2
 800046e:	d106      	bne.n	800047e <GPIO_PeriClock_Control+0xc2>
			GPIOH_PCLK_EN();
 8000470:	4b3d      	ldr	r3, [pc, #244]	; (8000568 <GPIO_PeriClock_Control+0x1ac>)
 8000472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000474:	4a3c      	ldr	r2, [pc, #240]	; (8000568 <GPIO_PeriClock_Control+0x1ac>)
 8000476:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800047a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800047c:	e06c      	b.n	8000558 <GPIO_PeriClock_Control+0x19c>
		else if(pGPIOx == GPIOI)
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	4a41      	ldr	r2, [pc, #260]	; (8000588 <GPIO_PeriClock_Control+0x1cc>)
 8000482:	4293      	cmp	r3, r2
 8000484:	d168      	bne.n	8000558 <GPIO_PeriClock_Control+0x19c>
			GPIOI_PCLK_EN();
 8000486:	4b38      	ldr	r3, [pc, #224]	; (8000568 <GPIO_PeriClock_Control+0x1ac>)
 8000488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800048a:	4a37      	ldr	r2, [pc, #220]	; (8000568 <GPIO_PeriClock_Control+0x1ac>)
 800048c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000490:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000492:	e061      	b.n	8000558 <GPIO_PeriClock_Control+0x19c>
		if(pGPIOx == GPIOA)
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	4a33      	ldr	r2, [pc, #204]	; (8000564 <GPIO_PeriClock_Control+0x1a8>)
 8000498:	4293      	cmp	r3, r2
 800049a:	d106      	bne.n	80004aa <GPIO_PeriClock_Control+0xee>
			GPIOA_PCLK_DI();
 800049c:	4b32      	ldr	r3, [pc, #200]	; (8000568 <GPIO_PeriClock_Control+0x1ac>)
 800049e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004a0:	4a31      	ldr	r2, [pc, #196]	; (8000568 <GPIO_PeriClock_Control+0x1ac>)
 80004a2:	f023 0301 	bic.w	r3, r3, #1
 80004a6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004a8:	e056      	b.n	8000558 <GPIO_PeriClock_Control+0x19c>
		else if(pGPIOx == GPIOB)
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	4a2f      	ldr	r2, [pc, #188]	; (800056c <GPIO_PeriClock_Control+0x1b0>)
 80004ae:	4293      	cmp	r3, r2
 80004b0:	d106      	bne.n	80004c0 <GPIO_PeriClock_Control+0x104>
			GPIOB_PCLK_DI();
 80004b2:	4b2d      	ldr	r3, [pc, #180]	; (8000568 <GPIO_PeriClock_Control+0x1ac>)
 80004b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004b6:	4a2c      	ldr	r2, [pc, #176]	; (8000568 <GPIO_PeriClock_Control+0x1ac>)
 80004b8:	f023 0302 	bic.w	r3, r3, #2
 80004bc:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004be:	e04b      	b.n	8000558 <GPIO_PeriClock_Control+0x19c>
		else if(pGPIOx == GPIOC)
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	4a2b      	ldr	r2, [pc, #172]	; (8000570 <GPIO_PeriClock_Control+0x1b4>)
 80004c4:	4293      	cmp	r3, r2
 80004c6:	d106      	bne.n	80004d6 <GPIO_PeriClock_Control+0x11a>
			GPIOC_PCLK_DI();
 80004c8:	4b27      	ldr	r3, [pc, #156]	; (8000568 <GPIO_PeriClock_Control+0x1ac>)
 80004ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004cc:	4a26      	ldr	r2, [pc, #152]	; (8000568 <GPIO_PeriClock_Control+0x1ac>)
 80004ce:	f023 0304 	bic.w	r3, r3, #4
 80004d2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004d4:	e040      	b.n	8000558 <GPIO_PeriClock_Control+0x19c>
		else if(pGPIOx == GPIOD)
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	4a26      	ldr	r2, [pc, #152]	; (8000574 <GPIO_PeriClock_Control+0x1b8>)
 80004da:	4293      	cmp	r3, r2
 80004dc:	d106      	bne.n	80004ec <GPIO_PeriClock_Control+0x130>
			GPIOD_PCLK_DI();
 80004de:	4b22      	ldr	r3, [pc, #136]	; (8000568 <GPIO_PeriClock_Control+0x1ac>)
 80004e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004e2:	4a21      	ldr	r2, [pc, #132]	; (8000568 <GPIO_PeriClock_Control+0x1ac>)
 80004e4:	f023 0308 	bic.w	r3, r3, #8
 80004e8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004ea:	e035      	b.n	8000558 <GPIO_PeriClock_Control+0x19c>
		else if(pGPIOx == GPIOE)
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	4a22      	ldr	r2, [pc, #136]	; (8000578 <GPIO_PeriClock_Control+0x1bc>)
 80004f0:	4293      	cmp	r3, r2
 80004f2:	d106      	bne.n	8000502 <GPIO_PeriClock_Control+0x146>
			GPIOE_PCLK_DI();
 80004f4:	4b1c      	ldr	r3, [pc, #112]	; (8000568 <GPIO_PeriClock_Control+0x1ac>)
 80004f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004f8:	4a1b      	ldr	r2, [pc, #108]	; (8000568 <GPIO_PeriClock_Control+0x1ac>)
 80004fa:	f023 0310 	bic.w	r3, r3, #16
 80004fe:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000500:	e02a      	b.n	8000558 <GPIO_PeriClock_Control+0x19c>
		else if(pGPIOx == GPIOF)
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	4a1d      	ldr	r2, [pc, #116]	; (800057c <GPIO_PeriClock_Control+0x1c0>)
 8000506:	4293      	cmp	r3, r2
 8000508:	d106      	bne.n	8000518 <GPIO_PeriClock_Control+0x15c>
			GPIOF_PCLK_DI();
 800050a:	4b17      	ldr	r3, [pc, #92]	; (8000568 <GPIO_PeriClock_Control+0x1ac>)
 800050c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800050e:	4a16      	ldr	r2, [pc, #88]	; (8000568 <GPIO_PeriClock_Control+0x1ac>)
 8000510:	f023 0320 	bic.w	r3, r3, #32
 8000514:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000516:	e01f      	b.n	8000558 <GPIO_PeriClock_Control+0x19c>
		else if(pGPIOx == GPIOG)
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	4a19      	ldr	r2, [pc, #100]	; (8000580 <GPIO_PeriClock_Control+0x1c4>)
 800051c:	4293      	cmp	r3, r2
 800051e:	d106      	bne.n	800052e <GPIO_PeriClock_Control+0x172>
			GPIOG_PCLK_DI();
 8000520:	4b11      	ldr	r3, [pc, #68]	; (8000568 <GPIO_PeriClock_Control+0x1ac>)
 8000522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000524:	4a10      	ldr	r2, [pc, #64]	; (8000568 <GPIO_PeriClock_Control+0x1ac>)
 8000526:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800052a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800052c:	e014      	b.n	8000558 <GPIO_PeriClock_Control+0x19c>
		else if(pGPIOx == GPIOH)
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	4a14      	ldr	r2, [pc, #80]	; (8000584 <GPIO_PeriClock_Control+0x1c8>)
 8000532:	4293      	cmp	r3, r2
 8000534:	d106      	bne.n	8000544 <GPIO_PeriClock_Control+0x188>
			GPIOH_PCLK_DI();
 8000536:	4b0c      	ldr	r3, [pc, #48]	; (8000568 <GPIO_PeriClock_Control+0x1ac>)
 8000538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800053a:	4a0b      	ldr	r2, [pc, #44]	; (8000568 <GPIO_PeriClock_Control+0x1ac>)
 800053c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000540:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000542:	e009      	b.n	8000558 <GPIO_PeriClock_Control+0x19c>
		else if(pGPIOx == GPIOI)
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	4a10      	ldr	r2, [pc, #64]	; (8000588 <GPIO_PeriClock_Control+0x1cc>)
 8000548:	4293      	cmp	r3, r2
 800054a:	d105      	bne.n	8000558 <GPIO_PeriClock_Control+0x19c>
			GPIOI_PCLK_DI();
 800054c:	4b06      	ldr	r3, [pc, #24]	; (8000568 <GPIO_PeriClock_Control+0x1ac>)
 800054e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000550:	4a05      	ldr	r2, [pc, #20]	; (8000568 <GPIO_PeriClock_Control+0x1ac>)
 8000552:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000556:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000558:	bf00      	nop
 800055a:	370c      	adds	r7, #12
 800055c:	46bd      	mov	sp, r7
 800055e:	bc80      	pop	{r7}
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop
 8000564:	40020000 	.word	0x40020000
 8000568:	40023800 	.word	0x40023800
 800056c:	40020400 	.word	0x40020400
 8000570:	40020800 	.word	0x40020800
 8000574:	40020c00 	.word	0x40020c00
 8000578:	40021000 	.word	0x40021000
 800057c:	40021400 	.word	0x40021400
 8000580:	40021800 	.word	0x40021800
 8000584:	40021c00 	.word	0x40021c00
 8000588:	40022000 	.word	0x40022000

0800058c <GPIO_Init>:

/*
 * GPIO init and De-init function
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b086      	sub	sp, #24
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
	uint32_t temp = 0 ;
 8000594:	2300      	movs	r3, #0
 8000596:	617b      	str	r3, [r7, #20]

	//Enable the GPIO peripheral clock
	GPIO_PeriClock_Control(pGPIOHandle->pGPIOx, ENABLE);
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	2101      	movs	r1, #1
 800059e:	4618      	mov	r0, r3
 80005a0:	f7ff ff0c 	bl	80003bc <GPIO_PeriClock_Control>

	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ALTFN)
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	795b      	ldrb	r3, [r3, #5]
 80005a8:	2b02      	cmp	r3, #2
 80005aa:	d813      	bhi.n	80005d4 <GPIO_Init+0x48>
	{
		//Non-interrupt functionality
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 *pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	795b      	ldrb	r3, [r3, #5]
 80005b0:	461a      	mov	r2, r3
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	791b      	ldrb	r3, [r3, #4]
 80005b6:	005b      	lsls	r3, r3, #1
 80005b8:	fa02 f303 	lsl.w	r3, r2, r3
 80005bc:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER |= temp;
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	6819      	ldr	r1, [r3, #0]
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	697a      	ldr	r2, [r7, #20]
 80005ca:	430a      	orrs	r2, r1
 80005cc:	601a      	str	r2, [r3, #0]
		temp = 0;
 80005ce:	2300      	movs	r3, #0
 80005d0:	617b      	str	r3, [r7, #20]
 80005d2:	e0c1      	b.n	8000758 <GPIO_Init+0x1cc>
	}
	else
	{
		//Alternate functionality
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	795b      	ldrb	r3, [r3, #5]
 80005d8:	2b05      	cmp	r3, #5
 80005da:	d117      	bne.n	800060c <GPIO_Init+0x80>
		{
			//Enable the Falling edge interrupt and clear the rising edge interrupt
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005dc:	4b8e      	ldr	r3, [pc, #568]	; (8000818 <GPIO_Init+0x28c>)
 80005de:	68db      	ldr	r3, [r3, #12]
 80005e0:	687a      	ldr	r2, [r7, #4]
 80005e2:	7912      	ldrb	r2, [r2, #4]
 80005e4:	4611      	mov	r1, r2
 80005e6:	2201      	movs	r2, #1
 80005e8:	408a      	lsls	r2, r1
 80005ea:	4611      	mov	r1, r2
 80005ec:	4a8a      	ldr	r2, [pc, #552]	; (8000818 <GPIO_Init+0x28c>)
 80005ee:	430b      	orrs	r3, r1
 80005f0:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005f2:	4b89      	ldr	r3, [pc, #548]	; (8000818 <GPIO_Init+0x28c>)
 80005f4:	689b      	ldr	r3, [r3, #8]
 80005f6:	687a      	ldr	r2, [r7, #4]
 80005f8:	7912      	ldrb	r2, [r2, #4]
 80005fa:	4611      	mov	r1, r2
 80005fc:	2201      	movs	r2, #1
 80005fe:	408a      	lsls	r2, r1
 8000600:	43d2      	mvns	r2, r2
 8000602:	4611      	mov	r1, r2
 8000604:	4a84      	ldr	r2, [pc, #528]	; (8000818 <GPIO_Init+0x28c>)
 8000606:	400b      	ands	r3, r1
 8000608:	6093      	str	r3, [r2, #8]
 800060a:	e035      	b.n	8000678 <GPIO_Init+0xec>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	795b      	ldrb	r3, [r3, #5]
 8000610:	2b04      	cmp	r3, #4
 8000612:	d117      	bne.n	8000644 <GPIO_Init+0xb8>
		{
			//Enable the Rising edge interrupt and clear the falling edge interrupt
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000614:	4b80      	ldr	r3, [pc, #512]	; (8000818 <GPIO_Init+0x28c>)
 8000616:	68db      	ldr	r3, [r3, #12]
 8000618:	687a      	ldr	r2, [r7, #4]
 800061a:	7912      	ldrb	r2, [r2, #4]
 800061c:	4611      	mov	r1, r2
 800061e:	2201      	movs	r2, #1
 8000620:	408a      	lsls	r2, r1
 8000622:	43d2      	mvns	r2, r2
 8000624:	4611      	mov	r1, r2
 8000626:	4a7c      	ldr	r2, [pc, #496]	; (8000818 <GPIO_Init+0x28c>)
 8000628:	400b      	ands	r3, r1
 800062a:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800062c:	4b7a      	ldr	r3, [pc, #488]	; (8000818 <GPIO_Init+0x28c>)
 800062e:	689b      	ldr	r3, [r3, #8]
 8000630:	687a      	ldr	r2, [r7, #4]
 8000632:	7912      	ldrb	r2, [r2, #4]
 8000634:	4611      	mov	r1, r2
 8000636:	2201      	movs	r2, #1
 8000638:	408a      	lsls	r2, r1
 800063a:	4611      	mov	r1, r2
 800063c:	4a76      	ldr	r2, [pc, #472]	; (8000818 <GPIO_Init+0x28c>)
 800063e:	430b      	orrs	r3, r1
 8000640:	6093      	str	r3, [r2, #8]
 8000642:	e019      	b.n	8000678 <GPIO_Init+0xec>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT)
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	795b      	ldrb	r3, [r3, #5]
 8000648:	2b06      	cmp	r3, #6
 800064a:	d115      	bne.n	8000678 <GPIO_Init+0xec>
		{
			//Enable the Rising edge interrupt and falling edge interrupt
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800064c:	4b72      	ldr	r3, [pc, #456]	; (8000818 <GPIO_Init+0x28c>)
 800064e:	68db      	ldr	r3, [r3, #12]
 8000650:	687a      	ldr	r2, [r7, #4]
 8000652:	7912      	ldrb	r2, [r2, #4]
 8000654:	4611      	mov	r1, r2
 8000656:	2201      	movs	r2, #1
 8000658:	408a      	lsls	r2, r1
 800065a:	4611      	mov	r1, r2
 800065c:	4a6e      	ldr	r2, [pc, #440]	; (8000818 <GPIO_Init+0x28c>)
 800065e:	430b      	orrs	r3, r1
 8000660:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000662:	4b6d      	ldr	r3, [pc, #436]	; (8000818 <GPIO_Init+0x28c>)
 8000664:	689b      	ldr	r3, [r3, #8]
 8000666:	687a      	ldr	r2, [r7, #4]
 8000668:	7912      	ldrb	r2, [r2, #4]
 800066a:	4611      	mov	r1, r2
 800066c:	2201      	movs	r2, #1
 800066e:	408a      	lsls	r2, r1
 8000670:	4611      	mov	r1, r2
 8000672:	4a69      	ldr	r2, [pc, #420]	; (8000818 <GPIO_Init+0x28c>)
 8000674:	430b      	orrs	r3, r1
 8000676:	6093      	str	r3, [r2, #8]
		}

		//Enable the respective port for the pin number to NVIC
		SYSCFG_PCLK_EN();
 8000678:	4b68      	ldr	r3, [pc, #416]	; (800081c <GPIO_Init+0x290>)
 800067a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800067c:	4a67      	ldr	r2, [pc, #412]	; (800081c <GPIO_Init+0x290>)
 800067e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000682:	6453      	str	r3, [r2, #68]	; 0x44
		uint8_t index = 0;
 8000684:	2300      	movs	r3, #0
 8000686:	74fb      	strb	r3, [r7, #19]
		uint8_t pos	= 0 ;
 8000688:	2300      	movs	r3, #0
 800068a:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = PORTCODE_FROM_GPIO_PORTREG(pGPIOHandle->pGPIOx);
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	4a63      	ldr	r2, [pc, #396]	; (8000820 <GPIO_Init+0x294>)
 8000692:	4293      	cmp	r3, r2
 8000694:	d039      	beq.n	800070a <GPIO_Init+0x17e>
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	4a62      	ldr	r2, [pc, #392]	; (8000824 <GPIO_Init+0x298>)
 800069c:	4293      	cmp	r3, r2
 800069e:	d032      	beq.n	8000706 <GPIO_Init+0x17a>
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	4a60      	ldr	r2, [pc, #384]	; (8000828 <GPIO_Init+0x29c>)
 80006a6:	4293      	cmp	r3, r2
 80006a8:	d02b      	beq.n	8000702 <GPIO_Init+0x176>
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	4a5f      	ldr	r2, [pc, #380]	; (800082c <GPIO_Init+0x2a0>)
 80006b0:	4293      	cmp	r3, r2
 80006b2:	d024      	beq.n	80006fe <GPIO_Init+0x172>
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	4a5d      	ldr	r2, [pc, #372]	; (8000830 <GPIO_Init+0x2a4>)
 80006ba:	4293      	cmp	r3, r2
 80006bc:	d01d      	beq.n	80006fa <GPIO_Init+0x16e>
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	4a5c      	ldr	r2, [pc, #368]	; (8000834 <GPIO_Init+0x2a8>)
 80006c4:	4293      	cmp	r3, r2
 80006c6:	d016      	beq.n	80006f6 <GPIO_Init+0x16a>
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	4a5a      	ldr	r2, [pc, #360]	; (8000838 <GPIO_Init+0x2ac>)
 80006ce:	4293      	cmp	r3, r2
 80006d0:	d00f      	beq.n	80006f2 <GPIO_Init+0x166>
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	4a59      	ldr	r2, [pc, #356]	; (800083c <GPIO_Init+0x2b0>)
 80006d8:	4293      	cmp	r3, r2
 80006da:	d008      	beq.n	80006ee <GPIO_Init+0x162>
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	4a57      	ldr	r2, [pc, #348]	; (8000840 <GPIO_Init+0x2b4>)
 80006e2:	4293      	cmp	r3, r2
 80006e4:	d101      	bne.n	80006ea <GPIO_Init+0x15e>
 80006e6:	2308      	movs	r3, #8
 80006e8:	e010      	b.n	800070c <GPIO_Init+0x180>
 80006ea:	2300      	movs	r3, #0
 80006ec:	e00e      	b.n	800070c <GPIO_Init+0x180>
 80006ee:	2307      	movs	r3, #7
 80006f0:	e00c      	b.n	800070c <GPIO_Init+0x180>
 80006f2:	2306      	movs	r3, #6
 80006f4:	e00a      	b.n	800070c <GPIO_Init+0x180>
 80006f6:	2305      	movs	r3, #5
 80006f8:	e008      	b.n	800070c <GPIO_Init+0x180>
 80006fa:	2304      	movs	r3, #4
 80006fc:	e006      	b.n	800070c <GPIO_Init+0x180>
 80006fe:	2303      	movs	r3, #3
 8000700:	e004      	b.n	800070c <GPIO_Init+0x180>
 8000702:	2302      	movs	r3, #2
 8000704:	e002      	b.n	800070c <GPIO_Init+0x180>
 8000706:	2301      	movs	r3, #1
 8000708:	e000      	b.n	800070c <GPIO_Init+0x180>
 800070a:	2300      	movs	r3, #0
 800070c:	747b      	strb	r3, [r7, #17]
		index = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	791b      	ldrb	r3, [r3, #4]
 8000712:	089b      	lsrs	r3, r3, #2
 8000714:	74fb      	strb	r3, [r7, #19]
		pos = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	791b      	ldrb	r3, [r3, #4]
 800071a:	f003 0303 	and.w	r3, r3, #3
 800071e:	74bb      	strb	r3, [r7, #18]

		SYSCFG->EXTICR[index] |= (portcode << (4 * pos));
 8000720:	4a48      	ldr	r2, [pc, #288]	; (8000844 <GPIO_Init+0x2b8>)
 8000722:	7cfb      	ldrb	r3, [r7, #19]
 8000724:	3302      	adds	r3, #2
 8000726:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800072a:	7c79      	ldrb	r1, [r7, #17]
 800072c:	7cbb      	ldrb	r3, [r7, #18]
 800072e:	009b      	lsls	r3, r3, #2
 8000730:	fa01 f303 	lsl.w	r3, r1, r3
 8000734:	4618      	mov	r0, r3
 8000736:	4943      	ldr	r1, [pc, #268]	; (8000844 <GPIO_Init+0x2b8>)
 8000738:	7cfb      	ldrb	r3, [r7, #19]
 800073a:	4302      	orrs	r2, r0
 800073c:	3302      	adds	r3, #2
 800073e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


		//Enable the GPIO peripheral interrupt
		EXTI->IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000742:	4b35      	ldr	r3, [pc, #212]	; (8000818 <GPIO_Init+0x28c>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	687a      	ldr	r2, [r7, #4]
 8000748:	7912      	ldrb	r2, [r2, #4]
 800074a:	4611      	mov	r1, r2
 800074c:	2201      	movs	r2, #1
 800074e:	408a      	lsls	r2, r1
 8000750:	4611      	mov	r1, r2
 8000752:	4a31      	ldr	r2, [pc, #196]	; (8000818 <GPIO_Init+0x28c>)
 8000754:	430b      	orrs	r3, r1
 8000756:	6013      	str	r3, [r2, #0]
	}

	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 *pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	799b      	ldrb	r3, [r3, #6]
 800075c:	461a      	mov	r2, r3
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	791b      	ldrb	r3, [r3, #4]
 8000762:	005b      	lsls	r3, r3, #1
 8000764:	fa02 f303 	lsl.w	r3, r2, r3
 8000768:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	6899      	ldr	r1, [r3, #8]
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	697a      	ldr	r2, [r7, #20]
 8000776:	430a      	orrs	r2, r1
 8000778:	609a      	str	r2, [r3, #8]
	temp = 0;
 800077a:	2300      	movs	r3, #0
 800077c:	617b      	str	r3, [r7, #20]

	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	7a1b      	ldrb	r3, [r3, #8]
 8000782:	461a      	mov	r2, r3
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	791b      	ldrb	r3, [r3, #4]
 8000788:	fa02 f303 	lsl.w	r3, r2, r3
 800078c:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	6859      	ldr	r1, [r3, #4]
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	697a      	ldr	r2, [r7, #20]
 800079a:	430a      	orrs	r2, r1
 800079c:	605a      	str	r2, [r3, #4]
	temp = 0;
 800079e:	2300      	movs	r3, #0
 80007a0:	617b      	str	r3, [r7, #20]

	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 *pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	79db      	ldrb	r3, [r3, #7]
 80007a6:	461a      	mov	r2, r3
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	791b      	ldrb	r3, [r3, #4]
 80007ac:	005b      	lsls	r3, r3, #1
 80007ae:	fa02 f303 	lsl.w	r3, r2, r3
 80007b2:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	68d9      	ldr	r1, [r3, #12]
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	697a      	ldr	r2, [r7, #20]
 80007c0:	430a      	orrs	r2, r1
 80007c2:	60da      	str	r2, [r3, #12]
	temp = 0;
 80007c4:	2300      	movs	r3, #0
 80007c6:	617b      	str	r3, [r7, #20]

	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	795b      	ldrb	r3, [r3, #5]
 80007cc:	2b02      	cmp	r3, #2
 80007ce:	d11f      	bne.n	8000810 <GPIO_Init+0x284>
	{
		uint8_t Reg_index = (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) / 8;
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	791b      	ldrb	r3, [r3, #4]
 80007d4:	08db      	lsrs	r3, r3, #3
 80007d6:	743b      	strb	r3, [r7, #16]
		uint8_t Bit_pos	= (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) % 8;
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	791b      	ldrb	r3, [r3, #4]
 80007dc:	f003 0307 	and.w	r3, r3, #7
 80007e0:	73fb      	strb	r3, [r7, #15]

		temp = pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode;
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	7a5b      	ldrb	r3, [r3, #9]
 80007e6:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->AFR[Reg_index] |= (temp << (4 * Bit_pos) );
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	7c3a      	ldrb	r2, [r7, #16]
 80007ee:	3208      	adds	r2, #8
 80007f0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80007f4:	7bfb      	ldrb	r3, [r7, #15]
 80007f6:	009b      	lsls	r3, r3, #2
 80007f8:	697a      	ldr	r2, [r7, #20]
 80007fa:	fa02 f103 	lsl.w	r1, r2, r3
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	7c3a      	ldrb	r2, [r7, #16]
 8000804:	4301      	orrs	r1, r0
 8000806:	3208      	adds	r2, #8
 8000808:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		temp = 0;
 800080c:	2300      	movs	r3, #0
 800080e:	617b      	str	r3, [r7, #20]
	}

}
 8000810:	bf00      	nop
 8000812:	3718      	adds	r7, #24
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}
 8000818:	40013c00 	.word	0x40013c00
 800081c:	40023800 	.word	0x40023800
 8000820:	40020000 	.word	0x40020000
 8000824:	40020400 	.word	0x40020400
 8000828:	40020800 	.word	0x40020800
 800082c:	40020c00 	.word	0x40020c00
 8000830:	40021000 	.word	0x40021000
 8000834:	40021400 	.word	0x40021400
 8000838:	40021800 	.word	0x40021800
 800083c:	40021c00 	.word	0x40021c00
 8000840:	40022000 	.word	0x40022000
 8000844:	40013800 	.word	0x40013800

08000848 <GPIO_ReadFromInputPin>:

/*
 * GPIO write and read from Pin and Port
 */
uint8_t GPIO_ReadFromInputPin(GPIOx_RegDef_t *pGPIOx,uint16_t PinNumber)
{
 8000848:	b480      	push	{r7}
 800084a:	b085      	sub	sp, #20
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
 8000850:	460b      	mov	r3, r1
 8000852:	807b      	strh	r3, [r7, #2]
	uint8_t status = 0;
 8000854:	2300      	movs	r3, #0
 8000856:	73fb      	strb	r3, [r7, #15]
	status = (((pGPIOx->IDR) >> PinNumber) & 0x1);
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	691a      	ldr	r2, [r3, #16]
 800085c:	887b      	ldrh	r3, [r7, #2]
 800085e:	fa22 f303 	lsr.w	r3, r2, r3
 8000862:	b2db      	uxtb	r3, r3
 8000864:	f003 0301 	and.w	r3, r3, #1
 8000868:	73fb      	strb	r3, [r7, #15]
	return status;
 800086a:	7bfb      	ldrb	r3, [r7, #15]
}
 800086c:	4618      	mov	r0, r3
 800086e:	3714      	adds	r7, #20
 8000870:	46bd      	mov	sp, r7
 8000872:	bc80      	pop	{r7}
 8000874:	4770      	bx	lr
	...

08000878 <I2C_PeriClock_Control>:

/*
 * Peripheral clock enable or disable API
 */
void I2C_PeriClock_Control(I2C_RegDef_t *pI2Cx,uint8_t EnorDi)
{
 8000878:	b480      	push	{r7}
 800087a:	b083      	sub	sp, #12
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
 8000880:	460b      	mov	r3, r1
 8000882:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000884:	78fb      	ldrb	r3, [r7, #3]
 8000886:	2b01      	cmp	r3, #1
 8000888:	d120      	bne.n	80008cc <I2C_PeriClock_Control+0x54>
	{
		if(pI2Cx == I2C1)
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	4a22      	ldr	r2, [pc, #136]	; (8000918 <I2C_PeriClock_Control+0xa0>)
 800088e:	4293      	cmp	r3, r2
 8000890:	d106      	bne.n	80008a0 <I2C_PeriClock_Control+0x28>
		{
			I2C1_PCLK_EN();
 8000892:	4b22      	ldr	r3, [pc, #136]	; (800091c <I2C_PeriClock_Control+0xa4>)
 8000894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000896:	4a21      	ldr	r2, [pc, #132]	; (800091c <I2C_PeriClock_Control+0xa4>)
 8000898:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800089c:	6413      	str	r3, [r2, #64]	; 0x40
		else if(pI2Cx == I2C3)
		{
			I2C3_PCLK_DI();
		}
	}
}
 800089e:	e035      	b.n	800090c <I2C_PeriClock_Control+0x94>
		else if(pI2Cx == I2C2)
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	4a1f      	ldr	r2, [pc, #124]	; (8000920 <I2C_PeriClock_Control+0xa8>)
 80008a4:	4293      	cmp	r3, r2
 80008a6:	d106      	bne.n	80008b6 <I2C_PeriClock_Control+0x3e>
			I2C2_PCLK_EN();
 80008a8:	4b1c      	ldr	r3, [pc, #112]	; (800091c <I2C_PeriClock_Control+0xa4>)
 80008aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ac:	4a1b      	ldr	r2, [pc, #108]	; (800091c <I2C_PeriClock_Control+0xa4>)
 80008ae:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80008b2:	6413      	str	r3, [r2, #64]	; 0x40
}
 80008b4:	e02a      	b.n	800090c <I2C_PeriClock_Control+0x94>
		else if(pI2Cx == I2C3)
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	4a1a      	ldr	r2, [pc, #104]	; (8000924 <I2C_PeriClock_Control+0xac>)
 80008ba:	4293      	cmp	r3, r2
 80008bc:	d126      	bne.n	800090c <I2C_PeriClock_Control+0x94>
			I2C3_PCLK_EN();
 80008be:	4b17      	ldr	r3, [pc, #92]	; (800091c <I2C_PeriClock_Control+0xa4>)
 80008c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008c2:	4a16      	ldr	r2, [pc, #88]	; (800091c <I2C_PeriClock_Control+0xa4>)
 80008c4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80008c8:	6413      	str	r3, [r2, #64]	; 0x40
}
 80008ca:	e01f      	b.n	800090c <I2C_PeriClock_Control+0x94>
		if(pI2Cx == I2C1)
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	4a12      	ldr	r2, [pc, #72]	; (8000918 <I2C_PeriClock_Control+0xa0>)
 80008d0:	4293      	cmp	r3, r2
 80008d2:	d106      	bne.n	80008e2 <I2C_PeriClock_Control+0x6a>
			I2C1_PCLK_DI();
 80008d4:	4b11      	ldr	r3, [pc, #68]	; (800091c <I2C_PeriClock_Control+0xa4>)
 80008d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008d8:	4a10      	ldr	r2, [pc, #64]	; (800091c <I2C_PeriClock_Control+0xa4>)
 80008da:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80008de:	6413      	str	r3, [r2, #64]	; 0x40
}
 80008e0:	e014      	b.n	800090c <I2C_PeriClock_Control+0x94>
		else if(pI2Cx == I2C2)
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	4a0e      	ldr	r2, [pc, #56]	; (8000920 <I2C_PeriClock_Control+0xa8>)
 80008e6:	4293      	cmp	r3, r2
 80008e8:	d106      	bne.n	80008f8 <I2C_PeriClock_Control+0x80>
			I2C2_PCLK_DI();
 80008ea:	4b0c      	ldr	r3, [pc, #48]	; (800091c <I2C_PeriClock_Control+0xa4>)
 80008ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ee:	4a0b      	ldr	r2, [pc, #44]	; (800091c <I2C_PeriClock_Control+0xa4>)
 80008f0:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80008f4:	6413      	str	r3, [r2, #64]	; 0x40
}
 80008f6:	e009      	b.n	800090c <I2C_PeriClock_Control+0x94>
		else if(pI2Cx == I2C3)
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	4a0a      	ldr	r2, [pc, #40]	; (8000924 <I2C_PeriClock_Control+0xac>)
 80008fc:	4293      	cmp	r3, r2
 80008fe:	d105      	bne.n	800090c <I2C_PeriClock_Control+0x94>
			I2C3_PCLK_DI();
 8000900:	4b06      	ldr	r3, [pc, #24]	; (800091c <I2C_PeriClock_Control+0xa4>)
 8000902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000904:	4a05      	ldr	r2, [pc, #20]	; (800091c <I2C_PeriClock_Control+0xa4>)
 8000906:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800090a:	6413      	str	r3, [r2, #64]	; 0x40
}
 800090c:	bf00      	nop
 800090e:	370c      	adds	r7, #12
 8000910:	46bd      	mov	sp, r7
 8000912:	bc80      	pop	{r7}
 8000914:	4770      	bx	lr
 8000916:	bf00      	nop
 8000918:	40005400 	.word	0x40005400
 800091c:	40023800 	.word	0x40023800
 8000920:	40005800 	.word	0x40005800
 8000924:	40005c00 	.word	0x40005c00

08000928 <GetPLLClockOutput>:

uint32_t GetPLLClockOutput(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
	//TODO
}
 800092c:	bf00      	nop
 800092e:	4618      	mov	r0, r3
 8000930:	46bd      	mov	sp, r7
 8000932:	bc80      	pop	{r7}
 8000934:	4770      	bx	lr
	...

08000938 <GetPCLKValue>:

uint16_t AHB_Prescalar[] = {2,4,8,16,32,64,128,256,512};
uint8_t APB1_Prescalar[] = {2,4,8,16};
uint32_t GetPCLKValue(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b084      	sub	sp, #16
 800093c:	af00      	add	r7, sp, #0
	uint32_t SystemClock = 0;
 800093e:	2300      	movs	r3, #0
 8000940:	60fb      	str	r3, [r7, #12]
	uint32_t PCLK = 0;
 8000942:	2300      	movs	r3, #0
 8000944:	607b      	str	r3, [r7, #4]
	uint8_t ClockSource = 0;
 8000946:	2300      	movs	r3, #0
 8000948:	70fb      	strb	r3, [r7, #3]
	uint8_t AHBprescalarIndex = 0;
 800094a:	2300      	movs	r3, #0
 800094c:	70bb      	strb	r3, [r7, #2]
	uint8_t APB1prescalarIndex = 0;
 800094e:	2300      	movs	r3, #0
 8000950:	707b      	strb	r3, [r7, #1]
	uint16_t AHBPrescValue = 0;
 8000952:	2300      	movs	r3, #0
 8000954:	817b      	strh	r3, [r7, #10]
	uint8_t APB1PrescValue = 0;
 8000956:	2300      	movs	r3, #0
 8000958:	727b      	strb	r3, [r7, #9]

	ClockSource = (RCC->CFGR >> 2) & 0x03;
 800095a:	4b25      	ldr	r3, [pc, #148]	; (80009f0 <GetPCLKValue+0xb8>)
 800095c:	689b      	ldr	r3, [r3, #8]
 800095e:	089b      	lsrs	r3, r3, #2
 8000960:	b2db      	uxtb	r3, r3
 8000962:	f003 0303 	and.w	r3, r3, #3
 8000966:	70fb      	strb	r3, [r7, #3]

	if( ClockSource == 0)
 8000968:	78fb      	ldrb	r3, [r7, #3]
 800096a:	2b00      	cmp	r3, #0
 800096c:	d102      	bne.n	8000974 <GetPCLKValue+0x3c>
	{
		//HSI
		SystemClock = 16000000;
 800096e:	4b21      	ldr	r3, [pc, #132]	; (80009f4 <GetPCLKValue+0xbc>)
 8000970:	60fb      	str	r3, [r7, #12]
 8000972:	e00b      	b.n	800098c <GetPCLKValue+0x54>
	}
	else if( ClockSource == 1)
 8000974:	78fb      	ldrb	r3, [r7, #3]
 8000976:	2b01      	cmp	r3, #1
 8000978:	d102      	bne.n	8000980 <GetPCLKValue+0x48>
	{
		//HSE
		SystemClock = 8000000;
 800097a:	4b1f      	ldr	r3, [pc, #124]	; (80009f8 <GetPCLKValue+0xc0>)
 800097c:	60fb      	str	r3, [r7, #12]
 800097e:	e005      	b.n	800098c <GetPCLKValue+0x54>
	}
	else if( ClockSource == 2)
 8000980:	78fb      	ldrb	r3, [r7, #3]
 8000982:	2b02      	cmp	r3, #2
 8000984:	d102      	bne.n	800098c <GetPCLKValue+0x54>
	{
		//PLL
		SystemClock = GetPLLClockOutput();
 8000986:	f7ff ffcf 	bl	8000928 <GetPLLClockOutput>
 800098a:	60f8      	str	r0, [r7, #12]
	}

	AHBprescalarIndex = (RCC->CFGR >> 4) & 0xF;
 800098c:	4b18      	ldr	r3, [pc, #96]	; (80009f0 <GetPCLKValue+0xb8>)
 800098e:	689b      	ldr	r3, [r3, #8]
 8000990:	091b      	lsrs	r3, r3, #4
 8000992:	b2db      	uxtb	r3, r3
 8000994:	f003 030f 	and.w	r3, r3, #15
 8000998:	70bb      	strb	r3, [r7, #2]
	if(AHBprescalarIndex == 0)
 800099a:	78bb      	ldrb	r3, [r7, #2]
 800099c:	2b00      	cmp	r3, #0
 800099e:	d102      	bne.n	80009a6 <GetPCLKValue+0x6e>
	{
		AHBPrescValue = 1;
 80009a0:	2301      	movs	r3, #1
 80009a2:	817b      	strh	r3, [r7, #10]
 80009a4:	e005      	b.n	80009b2 <GetPCLKValue+0x7a>
	}
	else
	{
		AHBPrescValue = AHB_Prescalar[AHBprescalarIndex - 8];
 80009a6:	78bb      	ldrb	r3, [r7, #2]
 80009a8:	3b08      	subs	r3, #8
 80009aa:	4a14      	ldr	r2, [pc, #80]	; (80009fc <GetPCLKValue+0xc4>)
 80009ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80009b0:	817b      	strh	r3, [r7, #10]
	}

	APB1prescalarIndex = (RCC->CFGR >> 10) & 0x7;
 80009b2:	4b0f      	ldr	r3, [pc, #60]	; (80009f0 <GetPCLKValue+0xb8>)
 80009b4:	689b      	ldr	r3, [r3, #8]
 80009b6:	0a9b      	lsrs	r3, r3, #10
 80009b8:	b2db      	uxtb	r3, r3
 80009ba:	f003 0307 	and.w	r3, r3, #7
 80009be:	707b      	strb	r3, [r7, #1]
	if(APB1prescalarIndex == 0)
 80009c0:	787b      	ldrb	r3, [r7, #1]
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d102      	bne.n	80009cc <GetPCLKValue+0x94>
	{
		APB1PrescValue = 1;
 80009c6:	2301      	movs	r3, #1
 80009c8:	727b      	strb	r3, [r7, #9]
 80009ca:	e004      	b.n	80009d6 <GetPCLKValue+0x9e>
	}
	else
	{
		APB1PrescValue = APB1_Prescalar[APB1prescalarIndex - 4];
 80009cc:	787b      	ldrb	r3, [r7, #1]
 80009ce:	3b04      	subs	r3, #4
 80009d0:	4a0b      	ldr	r2, [pc, #44]	; (8000a00 <GetPCLKValue+0xc8>)
 80009d2:	5cd3      	ldrb	r3, [r2, r3]
 80009d4:	727b      	strb	r3, [r7, #9]
	}

	PCLK = ((SystemClock / AHBPrescValue) / APB1PrescValue) ;
 80009d6:	897b      	ldrh	r3, [r7, #10]
 80009d8:	68fa      	ldr	r2, [r7, #12]
 80009da:	fbb2 f2f3 	udiv	r2, r2, r3
 80009de:	7a7b      	ldrb	r3, [r7, #9]
 80009e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80009e4:	607b      	str	r3, [r7, #4]

	return PCLK;
 80009e6:	687b      	ldr	r3, [r7, #4]

}
 80009e8:	4618      	mov	r0, r3
 80009ea:	3710      	adds	r7, #16
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	40023800 	.word	0x40023800
 80009f4:	00f42400 	.word	0x00f42400
 80009f8:	007a1200 	.word	0x007a1200
 80009fc:	20000000 	.word	0x20000000
 8000a00:	20000014 	.word	0x20000014

08000a04 <I2C_Init>:

/*
 * I2Cx init and De-init function
 */
void I2C_Init(I2C_Handle_t *pI2CHandle)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b084      	sub	sp, #16
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
	uint32_t tempreg = 0;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	60fb      	str	r3, [r7, #12]
	uint32_t APBCLK = 0;
 8000a10:	2300      	movs	r3, #0
 8000a12:	60bb      	str	r3, [r7, #8]

	I2C_PeriClock_Control(pI2CHandle->pI2Cx, ENABLE);
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	2101      	movs	r1, #1
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f7ff ff2c 	bl	8000878 <I2C_PeriClock_Control>

	//Enable the automatic ACKing in I2C hardware
	tempreg |= (pI2CHandle->pI2C_Config.I2C_ACKCtrl << I2C_CR1_ACK);
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	7a5b      	ldrb	r3, [r3, #9]
 8000a24:	029b      	lsls	r3, r3, #10
 8000a26:	461a      	mov	r2, r3
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	4313      	orrs	r3, r2
 8000a2c:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->CR1 |= tempreg;
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	6819      	ldr	r1, [r3, #0]
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	68fa      	ldr	r2, [r7, #12]
 8000a3a:	430a      	orrs	r2, r1
 8000a3c:	601a      	str	r2, [r3, #0]
	tempreg = 0;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	60fb      	str	r3, [r7, #12]

	//Configure the OWN address , this will be used when I2C act as slave
	tempreg |= (pI2CHandle->pI2C_Config.I2C_DeviceAddr << 1);
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	7a1b      	ldrb	r3, [r3, #8]
 8000a46:	005b      	lsls	r3, r3, #1
 8000a48:	461a      	mov	r2, r3
 8000a4a:	68fb      	ldr	r3, [r7, #12]
 8000a4c:	4313      	orrs	r3, r2
 8000a4e:	60fb      	str	r3, [r7, #12]
	tempreg |= (1 << 14);//this is reserved bit and set as per RM
 8000a50:	68fb      	ldr	r3, [r7, #12]
 8000a52:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a56:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->OAR1 |= tempreg;
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	6899      	ldr	r1, [r3, #8]
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	68fa      	ldr	r2, [r7, #12]
 8000a64:	430a      	orrs	r2, r1
 8000a66:	609a      	str	r2, [r3, #8]
	tempreg = 0;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	60fb      	str	r3, [r7, #12]

	APBCLK = GetPCLKValue() / 1000000U; //16000000/1000000 =>16
 8000a6c:	f7ff ff64 	bl	8000938 <GetPCLKValue>
 8000a70:	4603      	mov	r3, r0
 8000a72:	4a44      	ldr	r2, [pc, #272]	; (8000b84 <I2C_Init+0x180>)
 8000a74:	fba2 2303 	umull	r2, r3, r2, r3
 8000a78:	0c9b      	lsrs	r3, r3, #18
 8000a7a:	60bb      	str	r3, [r7, #8]

	if(APBCLK <= 1)
 8000a7c:	68bb      	ldr	r3, [r7, #8]
 8000a7e:	2b01      	cmp	r3, #1
 8000a80:	d801      	bhi.n	8000a86 <I2C_Init+0x82>
	{
		APBCLK = 2;
 8000a82:	2302      	movs	r3, #2
 8000a84:	60bb      	str	r3, [r7, #8]
	}
	//Configure the I2C frequency
	pI2CHandle->pI2Cx->CR2 = (APBCLK & 0x3F);
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	68ba      	ldr	r2, [r7, #8]
 8000a8c:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000a90:	605a      	str	r2, [r3, #4]


	if(pI2CHandle->pI2C_Config.I2C_SCLSpeed <= I2C_SPEED_STD_MODE)
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	685b      	ldr	r3, [r3, #4]
 8000a96:	4a3c      	ldr	r2, [pc, #240]	; (8000b88 <I2C_Init+0x184>)
 8000a98:	4293      	cmp	r3, r2
 8000a9a:	d80b      	bhi.n	8000ab4 <I2C_Init+0xb0>

		//Sm mode or SMBus:
		//Thigh = CCR * TPCLK1
		//Tlow = CCR * TPCLK1

		tempreg |= (GetPCLKValue() / (2 * pI2CHandle->pI2C_Config.I2C_SCLSpeed));
 8000a9c:	f7ff ff4c 	bl	8000938 <GetPCLKValue>
 8000aa0:	4602      	mov	r2, r0
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	685b      	ldr	r3, [r3, #4]
 8000aa6:	005b      	lsls	r3, r3, #1
 8000aa8:	fbb2 f3f3 	udiv	r3, r2, r3
 8000aac:	68fa      	ldr	r2, [r7, #12]
 8000aae:	4313      	orrs	r3, r2
 8000ab0:	60fb      	str	r3, [r7, #12]
 8000ab2:	e02b      	b.n	8000b0c <I2C_Init+0x108>
	}
	else
	{
		//Fast mode
		tempreg |= (1 << I2C_CCR_FS);
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000aba:	60fb      	str	r3, [r7, #12]
		//Configure duty cycle
		tempreg |= (pI2CHandle->pI2C_Config.I2C_FMDutyCycle << I2C_CCR_DUTY);
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	895b      	ldrh	r3, [r3, #10]
 8000ac0:	039b      	lsls	r3, r3, #14
 8000ac2:	461a      	mov	r2, r3
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	4313      	orrs	r3, r2
 8000ac8:	60fb      	str	r3, [r7, #12]
		//Duty = 0
		if(pI2CHandle->pI2C_Config.I2C_FMDutyCycle == I2C_FM_DUTY_2)
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	895b      	ldrh	r3, [r3, #10]
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d10d      	bne.n	8000aee <I2C_Init+0xea>
			//If DUTY = 0:
			//Thigh = CCR * TPCLK1
			//Tlow = 2 * CCR * TPCLK1
			//Tlow = 2 * Thigh

			tempreg |= (GetPCLKValue() / (3 * pI2CHandle->pI2C_Config.I2C_SCLSpeed));
 8000ad2:	f7ff ff31 	bl	8000938 <GetPCLKValue>
 8000ad6:	4601      	mov	r1, r0
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	685a      	ldr	r2, [r3, #4]
 8000adc:	4613      	mov	r3, r2
 8000ade:	005b      	lsls	r3, r3, #1
 8000ae0:	4413      	add	r3, r2
 8000ae2:	fbb1 f3f3 	udiv	r3, r1, r3
 8000ae6:	68fa      	ldr	r2, [r7, #12]
 8000ae8:	4313      	orrs	r3, r2
 8000aea:	60fb      	str	r3, [r7, #12]
 8000aec:	e00e      	b.n	8000b0c <I2C_Init+0x108>
		{
			//Duty = 1
			//If DUTY = 1: (to reach 400 kHz)
			//Thigh = 9 * CCR * TPCLK1
			//Tlow = 16 * CCR * TPCLK1
			tempreg |= (GetPCLKValue() / (25 * pI2CHandle->pI2C_Config.I2C_SCLSpeed));
 8000aee:	f7ff ff23 	bl	8000938 <GetPCLKValue>
 8000af2:	4601      	mov	r1, r0
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	685a      	ldr	r2, [r3, #4]
 8000af8:	4613      	mov	r3, r2
 8000afa:	009b      	lsls	r3, r3, #2
 8000afc:	4413      	add	r3, r2
 8000afe:	009a      	lsls	r2, r3, #2
 8000b00:	4413      	add	r3, r2
 8000b02:	fbb1 f3f3 	udiv	r3, r1, r3
 8000b06:	68fa      	ldr	r2, [r7, #12]
 8000b08:	4313      	orrs	r3, r2
 8000b0a:	60fb      	str	r3, [r7, #12]
		}
	}
	pI2CHandle->pI2Cx->CCR |= (tempreg & 0xFFF);
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	69d9      	ldr	r1, [r3, #28]
 8000b12:	68fb      	ldr	r3, [r7, #12]
 8000b14:	f3c3 020b 	ubfx	r2, r3, #0, #12
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	430a      	orrs	r2, r1
 8000b1e:	61da      	str	r2, [r3, #28]
	tempreg = 0;
 8000b20:	2300      	movs	r3, #0
 8000b22:	60fb      	str	r3, [r7, #12]

	//Configure the Trise value
	if(pI2CHandle->pI2C_Config.I2C_SCLSpeed <= I2C_SPEED_STD_MODE)
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	685b      	ldr	r3, [r3, #4]
 8000b28:	4a17      	ldr	r2, [pc, #92]	; (8000b88 <I2C_Init+0x184>)
 8000b2a:	4293      	cmp	r3, r2
 8000b2c:	d80b      	bhi.n	8000b46 <I2C_Init+0x142>
	{
		// Standard mode as per I2C spec trise for SM is 1000ns
		tempreg |= ((GetPCLKValue() * 1) / 1000000U)  + 1;
 8000b2e:	f7ff ff03 	bl	8000938 <GetPCLKValue>
 8000b32:	4603      	mov	r3, r0
 8000b34:	4a13      	ldr	r2, [pc, #76]	; (8000b84 <I2C_Init+0x180>)
 8000b36:	fba2 2303 	umull	r2, r3, r2, r3
 8000b3a:	0c9b      	lsrs	r3, r3, #18
 8000b3c:	3301      	adds	r3, #1
 8000b3e:	68fa      	ldr	r2, [r7, #12]
 8000b40:	4313      	orrs	r3, r2
 8000b42:	60fb      	str	r3, [r7, #12]
 8000b44:	e00f      	b.n	8000b66 <I2C_Init+0x162>
	}
	else
	{
		//fast mode as per I2C spec trise is 300ns
		tempreg |= ((GetPCLKValue() * 300) / 1000000000U)  + 1;
 8000b46:	f7ff fef7 	bl	8000938 <GetPCLKValue>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000b50:	fb02 f303 	mul.w	r3, r2, r3
 8000b54:	0a5b      	lsrs	r3, r3, #9
 8000b56:	4a0d      	ldr	r2, [pc, #52]	; (8000b8c <I2C_Init+0x188>)
 8000b58:	fba2 2303 	umull	r2, r3, r2, r3
 8000b5c:	09db      	lsrs	r3, r3, #7
 8000b5e:	3301      	adds	r3, #1
 8000b60:	68fa      	ldr	r2, [r7, #12]
 8000b62:	4313      	orrs	r3, r2
 8000b64:	60fb      	str	r3, [r7, #12]
	}

	pI2CHandle->pI2Cx->TRISE |= (tempreg & 0x3F);
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	6a19      	ldr	r1, [r3, #32]
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	430a      	orrs	r2, r1
 8000b78:	621a      	str	r2, [r3, #32]
}
 8000b7a:	bf00      	nop
 8000b7c:	3710      	adds	r7, #16
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	431bde83 	.word	0x431bde83
 8000b88:	000186a0 	.word	0x000186a0
 8000b8c:	00044b83 	.word	0x00044b83

08000b90 <I2C_MasterSenddata>:

/*
 * I2C send and receive data
 */
void I2C_MasterSenddata(I2C_Handle_t *pI2CHandle,uint8_t *pTxBuffer,uint32_t Len, uint8_t SlaveAddress,uint8_t RepeatedStart)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b084      	sub	sp, #16
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	60f8      	str	r0, [r7, #12]
 8000b98:	60b9      	str	r1, [r7, #8]
 8000b9a:	607a      	str	r2, [r7, #4]
 8000b9c:	70fb      	strb	r3, [r7, #3]
	//Start condition iss generated by master
	I2C_StartCondition(pI2CHandle->pI2Cx);
 8000b9e:	68fb      	ldr	r3, [r7, #12]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f000 f8ee 	bl	8000d84 <I2C_StartCondition>

	//to clear the start condition event and write the address phase
	while(!(I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_SB)));
 8000ba8:	bf00      	nop
 8000baa:	68fb      	ldr	r3, [r7, #12]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	2101      	movs	r1, #1
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f000 f905 	bl	8000dc0 <I2C_GetFlagStatus>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d0f6      	beq.n	8000baa <I2C_MasterSenddata+0x1a>

	// write the address phase
	I2C_AddressPhaseWrite(pI2CHandle->pI2Cx,SlaveAddress);
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	78fa      	ldrb	r2, [r7, #3]
 8000bc2:	4611      	mov	r1, r2
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f000 f90e 	bl	8000de6 <I2C_AddressPhaseWrite>

	//to clear the address ADDR =1 , read the SR1 and SR2
	while(!(I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_ADDR)));
 8000bca:	bf00      	nop
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	2102      	movs	r1, #2
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f000 f8f4 	bl	8000dc0 <I2C_GetFlagStatus>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d0f6      	beq.n	8000bcc <I2C_MasterSenddata+0x3c>
	I2C_ClearAddressPhase(pI2CHandle->pI2Cx);
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	4618      	mov	r0, r3
 8000be4:	f000 f937 	bl	8000e56 <I2C_ClearAddressPhase>

	//write data into slave
	while(Len > 0)
 8000be8:	e014      	b.n	8000c14 <I2C_MasterSenddata+0x84>
	{
		while(!(I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_TXE)));
 8000bea:	bf00      	nop
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	2180      	movs	r1, #128	; 0x80
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f000 f8e4 	bl	8000dc0 <I2C_GetFlagStatus>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d0f6      	beq.n	8000bec <I2C_MasterSenddata+0x5c>
		pI2CHandle->pI2Cx->DR = *pTxBuffer;
 8000bfe:	68bb      	ldr	r3, [r7, #8]
 8000c00:	781a      	ldrb	r2, [r3, #0]
 8000c02:	68fb      	ldr	r3, [r7, #12]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	611a      	str	r2, [r3, #16]
		pTxBuffer++;
 8000c08:	68bb      	ldr	r3, [r7, #8]
 8000c0a:	3301      	adds	r3, #1
 8000c0c:	60bb      	str	r3, [r7, #8]
		Len--;
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	3b01      	subs	r3, #1
 8000c12:	607b      	str	r3, [r7, #4]
	while(Len > 0)
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d1e7      	bne.n	8000bea <I2C_MasterSenddata+0x5a>
	}

	//wait for TXE =1 AND BTF =1
	while(!(I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_TXE)));
 8000c1a:	bf00      	nop
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	2180      	movs	r1, #128	; 0x80
 8000c22:	4618      	mov	r0, r3
 8000c24:	f000 f8cc 	bl	8000dc0 <I2C_GetFlagStatus>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d0f6      	beq.n	8000c1c <I2C_MasterSenddata+0x8c>
	while(!(I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_BTF)));
 8000c2e:	bf00      	nop
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	2104      	movs	r1, #4
 8000c36:	4618      	mov	r0, r3
 8000c38:	f000 f8c2 	bl	8000dc0 <I2C_GetFlagStatus>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d0f6      	beq.n	8000c30 <I2C_MasterSenddata+0xa0>

	if(RepeatedStart == REPEATED_START_DISABLE)
 8000c42:	7e3b      	ldrb	r3, [r7, #24]
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d104      	bne.n	8000c52 <I2C_MasterSenddata+0xc2>
	{
		//generate the stop condition
		I2C_StopCondition(pI2CHandle->pI2Cx);
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f000 f8a8 	bl	8000da2 <I2C_StopCondition>
	}

}
 8000c52:	bf00      	nop
 8000c54:	3710      	adds	r7, #16
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}

08000c5a <I2C_MasterReceivedata>:


void I2C_MasterReceivedata(I2C_Handle_t *pI2CHandle,uint8_t *pRxBuffer,uint32_t Len, uint8_t SlaveAddress,uint8_t RepeatedStart)
{
 8000c5a:	b580      	push	{r7, lr}
 8000c5c:	b086      	sub	sp, #24
 8000c5e:	af00      	add	r7, sp, #0
 8000c60:	60f8      	str	r0, [r7, #12]
 8000c62:	60b9      	str	r1, [r7, #8]
 8000c64:	607a      	str	r2, [r7, #4]
 8000c66:	70fb      	strb	r3, [r7, #3]
	//Generate the start condition
	I2C_StartCondition(pI2CHandle->pI2Cx);
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f000 f889 	bl	8000d84 <I2C_StartCondition>

	//Read the SB bit from 12C SR1 to clear the Event
	while(!(I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_SB)));
 8000c72:	bf00      	nop
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	2101      	movs	r1, #1
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f000 f8a0 	bl	8000dc0 <I2C_GetFlagStatus>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d0f6      	beq.n	8000c74 <I2C_MasterReceivedata+0x1a>

	//I2C Address phase read
	I2C_AddressPhaseRead(pI2CHandle->pI2Cx,SlaveAddress);
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	78fa      	ldrb	r2, [r7, #3]
 8000c8c:	4611      	mov	r1, r2
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f000 f8c5 	bl	8000e1e <I2C_AddressPhaseRead>

	//to clear the address ADDR =1 , read the SR1 and SR2
	while(!(I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_ADDR)));
 8000c94:	bf00      	nop
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	2102      	movs	r1, #2
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f000 f88f 	bl	8000dc0 <I2C_GetFlagStatus>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d0f6      	beq.n	8000c96 <I2C_MasterReceivedata+0x3c>

	//1 byte transmission
	if(Len == 1)
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	2b01      	cmp	r3, #1
 8000cac:	d123      	bne.n	8000cf6 <I2C_MasterReceivedata+0x9c>
	{
		//Disable the ACK bit, so Master wont send ACK to slave this confirms the from the master that slave
		//wont proceed to send further bytes
		I2C_ManageACK(pI2CHandle->pI2Cx, DISABLE);
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f000 f8df 	bl	8000e78 <I2C_ManageACK>

		//Clear the Address phase
		I2C_ClearAddressPhase(pI2CHandle->pI2Cx);
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f000 f8c9 	bl	8000e56 <I2C_ClearAddressPhase>

		//Wait until RXNE bit is set
		while(!(I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_RXNE)));
 8000cc4:	bf00      	nop
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	2140      	movs	r1, #64	; 0x40
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f000 f877 	bl	8000dc0 <I2C_GetFlagStatus>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d0f6      	beq.n	8000cc6 <I2C_MasterReceivedata+0x6c>

		if(RepeatedStart == REPEATED_START_DISABLE)
 8000cd8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d104      	bne.n	8000cea <I2C_MasterReceivedata+0x90>
		{
			//Generate the I2C stop condition
			I2C_StopCondition(pI2CHandle->pI2Cx);
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f000 f85c 	bl	8000da2 <I2C_StopCondition>
		}

		//Read the Data
		*pRxBuffer = pI2CHandle->pI2Cx->DR;
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	691b      	ldr	r3, [r3, #16]
 8000cf0:	b2da      	uxtb	r2, r3
 8000cf2:	68bb      	ldr	r3, [r7, #8]
 8000cf4:	701a      	strb	r2, [r3, #0]
	}

	//N byte's transmission
	if ( Len > 1)
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	2b01      	cmp	r3, #1
 8000cfa:	d935      	bls.n	8000d68 <I2C_MasterReceivedata+0x10e>
	{
		//Clear the Address phase so master release the SCL line for further transaction
		I2C_ClearAddressPhase(pI2CHandle->pI2Cx);
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	4618      	mov	r0, r3
 8000d02:	f000 f8a8 	bl	8000e56 <I2C_ClearAddressPhase>

		for(uint32_t i = Len; i > 0;i--)
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	617b      	str	r3, [r7, #20]
 8000d0a:	e02a      	b.n	8000d62 <I2C_MasterReceivedata+0x108>
		{

			//Wait until RXNE bit is set
			while(!(I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_RXNE)));
 8000d0c:	bf00      	nop
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	2140      	movs	r1, #64	; 0x40
 8000d14:	4618      	mov	r0, r3
 8000d16:	f000 f853 	bl	8000dc0 <I2C_GetFlagStatus>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d0f6      	beq.n	8000d0e <I2C_MasterReceivedata+0xb4>

			if (i == 2)
 8000d20:	697b      	ldr	r3, [r7, #20]
 8000d22:	2b02      	cmp	r3, #2
 8000d24:	d10e      	bne.n	8000d44 <I2C_MasterReceivedata+0xea>
			{
				//Disable the ACK bit, so Master wont send ACK to slave this confirms the from the master that slave
				//wont proceed to send further bytes
				I2C_ManageACK(pI2CHandle->pI2Cx, DISABLE);
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	2100      	movs	r1, #0
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f000 f8a3 	bl	8000e78 <I2C_ManageACK>

				//Used to generate  the Repeated start
				if(RepeatedStart == REPEATED_START_DISABLE)
 8000d32:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d104      	bne.n	8000d44 <I2C_MasterReceivedata+0xea>
				{
					//Generate the I2C stop condition
					I2C_StopCondition(pI2CHandle->pI2Cx);
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f000 f82f 	bl	8000da2 <I2C_StopCondition>
				}

			}
			//Read the Data
			*pRxBuffer = pI2CHandle->pI2Cx->DR;
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	691b      	ldr	r3, [r3, #16]
 8000d4a:	b2da      	uxtb	r2, r3
 8000d4c:	68bb      	ldr	r3, [r7, #8]
 8000d4e:	701a      	strb	r2, [r3, #0]
			pRxBuffer++;
 8000d50:	68bb      	ldr	r3, [r7, #8]
 8000d52:	3301      	adds	r3, #1
 8000d54:	60bb      	str	r3, [r7, #8]

			//Decrement the length byte by one
			Len--;
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	3b01      	subs	r3, #1
 8000d5a:	607b      	str	r3, [r7, #4]
		for(uint32_t i = Len; i > 0;i--)
 8000d5c:	697b      	ldr	r3, [r7, #20]
 8000d5e:	3b01      	subs	r3, #1
 8000d60:	617b      	str	r3, [r7, #20]
 8000d62:	697b      	ldr	r3, [r7, #20]
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d1d1      	bne.n	8000d0c <I2C_MasterReceivedata+0xb2>
		}
	}

	//IF User mentioned as enable in configuration
	if(pI2CHandle->pI2C_Config.I2C_ACKCtrl == I2C_ACK_ENABLE)
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	7a5b      	ldrb	r3, [r3, #9]
 8000d6c:	2b01      	cmp	r3, #1
 8000d6e:	d105      	bne.n	8000d7c <I2C_MasterReceivedata+0x122>
	{
		I2C_ManageACK(pI2CHandle->pI2Cx, ENABLE);
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	2101      	movs	r1, #1
 8000d76:	4618      	mov	r0, r3
 8000d78:	f000 f87e 	bl	8000e78 <I2C_ManageACK>
	}

}
 8000d7c:	bf00      	nop
 8000d7e:	3718      	adds	r7, #24
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}

08000d84 <I2C_StartCondition>:

void I2C_StartCondition(I2C_RegDef_t *pI2Cx)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b083      	sub	sp, #12
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= ( 1 << I2C_CR1_START);
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	601a      	str	r2, [r3, #0]
}
 8000d98:	bf00      	nop
 8000d9a:	370c      	adds	r7, #12
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bc80      	pop	{r7}
 8000da0:	4770      	bx	lr

08000da2 <I2C_StopCondition>:


void I2C_StopCondition(I2C_RegDef_t *pI2Cx)
{
 8000da2:	b480      	push	{r7}
 8000da4:	b083      	sub	sp, #12
 8000da6:	af00      	add	r7, sp, #0
 8000da8:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= ( 1 << I2C_CR1_STOP);
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	601a      	str	r2, [r3, #0]
}
 8000db6:	bf00      	nop
 8000db8:	370c      	adds	r7, #12
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bc80      	pop	{r7}
 8000dbe:	4770      	bx	lr

08000dc0 <I2C_GetFlagStatus>:

/*
 * I2C Get Status API's
 */
uint8_t I2C_GetFlagStatus(I2C_RegDef_t *pI2Cx,uint32_t flagread)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b083      	sub	sp, #12
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
 8000dc8:	6039      	str	r1, [r7, #0]
	if(pI2Cx->SR1 & flagread)
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	695a      	ldr	r2, [r3, #20]
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	4013      	ands	r3, r2
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d001      	beq.n	8000dda <I2C_GetFlagStatus+0x1a>
	{
		return 1;
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	e000      	b.n	8000ddc <I2C_GetFlagStatus+0x1c>
	}
	return 0;
 8000dda:	2300      	movs	r3, #0
}
 8000ddc:	4618      	mov	r0, r3
 8000dde:	370c      	adds	r7, #12
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bc80      	pop	{r7}
 8000de4:	4770      	bx	lr

08000de6 <I2C_AddressPhaseWrite>:


void I2C_AddressPhaseWrite(I2C_RegDef_t *pI2Cx,uint8_t SlaveAddress)
{
 8000de6:	b480      	push	{r7}
 8000de8:	b085      	sub	sp, #20
 8000dea:	af00      	add	r7, sp, #0
 8000dec:	6078      	str	r0, [r7, #4]
 8000dee:	460b      	mov	r3, r1
 8000df0:	70fb      	strb	r3, [r7, #3]
	uint8_t tempreg = 0;
 8000df2:	2300      	movs	r3, #0
 8000df4:	73fb      	strb	r3, [r7, #15]
	tempreg |= ( SlaveAddress << 1);
 8000df6:	78fb      	ldrb	r3, [r7, #3]
 8000df8:	005b      	lsls	r3, r3, #1
 8000dfa:	b25a      	sxtb	r2, r3
 8000dfc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e00:	4313      	orrs	r3, r2
 8000e02:	b25b      	sxtb	r3, r3
 8000e04:	73fb      	strb	r3, [r7, #15]
	tempreg &= ~(1);	// Write operation bit is set in I2C slave address
 8000e06:	7bfb      	ldrb	r3, [r7, #15]
 8000e08:	f023 0301 	bic.w	r3, r3, #1
 8000e0c:	73fb      	strb	r3, [r7, #15]
	pI2Cx->DR = tempreg;
 8000e0e:	7bfa      	ldrb	r2, [r7, #15]
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	611a      	str	r2, [r3, #16]
}
 8000e14:	bf00      	nop
 8000e16:	3714      	adds	r7, #20
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bc80      	pop	{r7}
 8000e1c:	4770      	bx	lr

08000e1e <I2C_AddressPhaseRead>:

void I2C_AddressPhaseRead(I2C_RegDef_t *pI2Cx,uint8_t SlaveAddress)
{
 8000e1e:	b480      	push	{r7}
 8000e20:	b085      	sub	sp, #20
 8000e22:	af00      	add	r7, sp, #0
 8000e24:	6078      	str	r0, [r7, #4]
 8000e26:	460b      	mov	r3, r1
 8000e28:	70fb      	strb	r3, [r7, #3]
	uint8_t tempreg = 0;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	73fb      	strb	r3, [r7, #15]
	tempreg |= ( SlaveAddress << 1);
 8000e2e:	78fb      	ldrb	r3, [r7, #3]
 8000e30:	005b      	lsls	r3, r3, #1
 8000e32:	b25a      	sxtb	r2, r3
 8000e34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e38:	4313      	orrs	r3, r2
 8000e3a:	b25b      	sxtb	r3, r3
 8000e3c:	73fb      	strb	r3, [r7, #15]
	tempreg |= (1 << 0);// Read bit is set in slave address
 8000e3e:	7bfb      	ldrb	r3, [r7, #15]
 8000e40:	f043 0301 	orr.w	r3, r3, #1
 8000e44:	73fb      	strb	r3, [r7, #15]
	pI2Cx->DR = tempreg;
 8000e46:	7bfa      	ldrb	r2, [r7, #15]
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	611a      	str	r2, [r3, #16]
}
 8000e4c:	bf00      	nop
 8000e4e:	3714      	adds	r7, #20
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bc80      	pop	{r7}
 8000e54:	4770      	bx	lr

08000e56 <I2C_ClearAddressPhase>:


void I2C_ClearAddressPhase(I2C_RegDef_t *pI2Cx)
{
 8000e56:	b480      	push	{r7}
 8000e58:	b085      	sub	sp, #20
 8000e5a:	af00      	add	r7, sp, #0
 8000e5c:	6078      	str	r0, [r7, #4]
	uint8_t tempreg = 0;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	73fb      	strb	r3, [r7, #15]
	tempreg = pI2Cx->SR1;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	695b      	ldr	r3, [r3, #20]
 8000e66:	73fb      	strb	r3, [r7, #15]
	tempreg = pI2Cx->SR2;
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	699b      	ldr	r3, [r3, #24]
 8000e6c:	73fb      	strb	r3, [r7, #15]
	(void)tempreg;
}
 8000e6e:	bf00      	nop
 8000e70:	3714      	adds	r7, #20
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bc80      	pop	{r7}
 8000e76:	4770      	bx	lr

08000e78 <I2C_ManageACK>:

void I2C_ManageACK(I2C_RegDef_t *pI2Cx,uint8_t EnorDi)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b083      	sub	sp, #12
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
 8000e80:	460b      	mov	r3, r1
 8000e82:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000e84:	78fb      	ldrb	r3, [r7, #3]
 8000e86:	2b01      	cmp	r3, #1
 8000e88:	d106      	bne.n	8000e98 <I2C_ManageACK+0x20>
	{
		pI2Cx->CR1 |= (1 << I2C_CR1_ACK);
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	601a      	str	r2, [r3, #0]
	}
	else
	{
		pI2Cx->CR1 &= ~(1 << I2C_CR1_ACK);
	}
}
 8000e96:	e005      	b.n	8000ea4 <I2C_ManageACK+0x2c>
		pI2Cx->CR1 &= ~(1 << I2C_CR1_ACK);
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	601a      	str	r2, [r3, #0]
}
 8000ea4:	bf00      	nop
 8000ea6:	370c      	adds	r7, #12
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bc80      	pop	{r7}
 8000eac:	4770      	bx	lr

08000eae <I2C_PeripheralControl>:
	}
}


void I2C_PeripheralControl(I2C_RegDef_t *pI2Cx,uint8_t EnorDi)
{
 8000eae:	b480      	push	{r7}
 8000eb0:	b083      	sub	sp, #12
 8000eb2:	af00      	add	r7, sp, #0
 8000eb4:	6078      	str	r0, [r7, #4]
 8000eb6:	460b      	mov	r3, r1
 8000eb8:	70fb      	strb	r3, [r7, #3]
	if(EnorDi ==  ENABLE)
 8000eba:	78fb      	ldrb	r3, [r7, #3]
 8000ebc:	2b01      	cmp	r3, #1
 8000ebe:	d106      	bne.n	8000ece <I2C_PeripheralControl+0x20>
	{
		pI2Cx->CR1 |= (1 << I2C_CR1_PE);
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	f043 0201 	orr.w	r2, r3, #1
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	601a      	str	r2, [r3, #0]
	}
	else
	{
		pI2Cx->CR1 &= ~(1 << I2C_CR1_PE);
	}
}
 8000ecc:	e005      	b.n	8000eda <I2C_PeripheralControl+0x2c>
		pI2Cx->CR1 &= ~(1 << I2C_CR1_PE);
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	f023 0201 	bic.w	r2, r3, #1
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	601a      	str	r2, [r3, #0]
}
 8000eda:	bf00      	nop
 8000edc:	370c      	adds	r7, #12
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bc80      	pop	{r7}
 8000ee2:	4770      	bx	lr

08000ee4 <__libc_init_array>:
 8000ee4:	b570      	push	{r4, r5, r6, lr}
 8000ee6:	4d0d      	ldr	r5, [pc, #52]	; (8000f1c <__libc_init_array+0x38>)
 8000ee8:	4c0d      	ldr	r4, [pc, #52]	; (8000f20 <__libc_init_array+0x3c>)
 8000eea:	1b64      	subs	r4, r4, r5
 8000eec:	10a4      	asrs	r4, r4, #2
 8000eee:	2600      	movs	r6, #0
 8000ef0:	42a6      	cmp	r6, r4
 8000ef2:	d109      	bne.n	8000f08 <__libc_init_array+0x24>
 8000ef4:	4d0b      	ldr	r5, [pc, #44]	; (8000f24 <__libc_init_array+0x40>)
 8000ef6:	4c0c      	ldr	r4, [pc, #48]	; (8000f28 <__libc_init_array+0x44>)
 8000ef8:	f000 f818 	bl	8000f2c <_init>
 8000efc:	1b64      	subs	r4, r4, r5
 8000efe:	10a4      	asrs	r4, r4, #2
 8000f00:	2600      	movs	r6, #0
 8000f02:	42a6      	cmp	r6, r4
 8000f04:	d105      	bne.n	8000f12 <__libc_init_array+0x2e>
 8000f06:	bd70      	pop	{r4, r5, r6, pc}
 8000f08:	f855 3b04 	ldr.w	r3, [r5], #4
 8000f0c:	4798      	blx	r3
 8000f0e:	3601      	adds	r6, #1
 8000f10:	e7ee      	b.n	8000ef0 <__libc_init_array+0xc>
 8000f12:	f855 3b04 	ldr.w	r3, [r5], #4
 8000f16:	4798      	blx	r3
 8000f18:	3601      	adds	r6, #1
 8000f1a:	e7f2      	b.n	8000f02 <__libc_init_array+0x1e>
 8000f1c:	08000f44 	.word	0x08000f44
 8000f20:	08000f44 	.word	0x08000f44
 8000f24:	08000f44 	.word	0x08000f44
 8000f28:	08000f48 	.word	0x08000f48

08000f2c <_init>:
 8000f2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f2e:	bf00      	nop
 8000f30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f32:	bc08      	pop	{r3}
 8000f34:	469e      	mov	lr, r3
 8000f36:	4770      	bx	lr

08000f38 <_fini>:
 8000f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f3a:	bf00      	nop
 8000f3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f3e:	bc08      	pop	{r3}
 8000f40:	469e      	mov	lr, r3
 8000f42:	4770      	bx	lr
