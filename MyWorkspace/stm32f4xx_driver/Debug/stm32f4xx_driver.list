
stm32f4xx_driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002258  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08002400  08002400  00012400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002480  08002480  00020084  2**0
                  CONTENTS
  4 .ARM          00000000  08002480  08002480  00020084  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002480  08002480  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002480  08002480  00012480  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002484  08002484  00012484  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08002488  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020084  2**0
                  CONTENTS
 10 .bss          00000110  20000084  20000084  00020084  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000194  20000194  00020084  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 13 .debug_info   00003bcb  00000000  00000000  000200ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000009f4  00000000  00000000  00023c79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001f0  00000000  00000000  00024670  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000001a8  00000000  00000000  00024860  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002f8b  00000000  00000000  00024a08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00002874  00000000  00000000  00027993  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000b28b  00000000  00000000  0002a207  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00035492  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000114c  00000000  00000000  000354e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000084 	.word	0x20000084
 80001c4:	00000000 	.word	0x00000000
 80001c8:	080023e8 	.word	0x080023e8

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000088 	.word	0x20000088
 80001e4:	080023e8 	.word	0x080023e8

080001e8 <strlen>:
 80001e8:	4603      	mov	r3, r0
 80001ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ee:	2a00      	cmp	r2, #0
 80001f0:	d1fb      	bne.n	80001ea <strlen+0x2>
 80001f2:	1a18      	subs	r0, r3, r0
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr

080001f8 <delay>:
void I2C1_Init(void);
extern uint8_t RxCmplt;
extern void initialise_monitor_handles();

void delay(void)
{
 80001f8:	b480      	push	{r7}
 80001fa:	b083      	sub	sp, #12
 80001fc:	af00      	add	r7, sp, #0
	for (uint32_t i = 0;i < 500000 ;i++);
 80001fe:	2300      	movs	r3, #0
 8000200:	607b      	str	r3, [r7, #4]
 8000202:	e002      	b.n	800020a <delay+0x12>
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	3301      	adds	r3, #1
 8000208:	607b      	str	r3, [r7, #4]
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	4a04      	ldr	r2, [pc, #16]	; (8000220 <delay+0x28>)
 800020e:	4293      	cmp	r3, r2
 8000210:	d9f8      	bls.n	8000204 <delay+0xc>
}
 8000212:	bf00      	nop
 8000214:	bf00      	nop
 8000216:	370c      	adds	r7, #12
 8000218:	46bd      	mov	sp, r7
 800021a:	bc80      	pop	{r7}
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop
 8000220:	0007a11f 	.word	0x0007a11f

08000224 <main>:


int main(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	b09c      	sub	sp, #112	; 0x70
 8000228:	af02      	add	r7, sp, #8
	char usr_msg[100] = {0};
 800022a:	2300      	movs	r3, #0
 800022c:	607b      	str	r3, [r7, #4]
 800022e:	f107 0308 	add.w	r3, r7, #8
 8000232:	2260      	movs	r2, #96	; 0x60
 8000234:	2100      	movs	r1, #0
 8000236:	4618      	mov	r0, r3
 8000238:	f001 f964 	bl	8001504 <memset>
	uint8_t command_code = 0;
 800023c:	2300      	movs	r3, #0
 800023e:	70fb      	strb	r3, [r7, #3]
	uint8_t Len = 0;
 8000240:	2300      	movs	r3, #0
 8000242:	70bb      	strb	r3, [r7, #2]


	initialise_monitor_handles();
 8000244:	f002 f856 	bl	80022f4 <initialise_monitor_handles>
	//Initialize and configure the GPIO pin as input for button
	GPIO_ButtonInit();
 8000248:	f000 f8ae 	bl	80003a8 <GPIO_ButtonInit>

	I2C1_GpioInit();
 800024c:	f000 f86a 	bl	8000324 <I2C1_GpioInit>

	I2C1_Init();
 8000250:	f000 f88e 	bl	8000370 <I2C1_Init>

	//enable the I2C NVIC interrupt
	I2C_IRQConfig(IRQ_NO_I2C1_EV, ENABLE);
 8000254:	2101      	movs	r1, #1
 8000256:	201f      	movs	r0, #31
 8000258:	f001 f8a6 	bl	80013a8 <I2C_IRQConfig>
	I2C_IRQConfig(IRQ_NO_I2C1_ER, ENABLE);
 800025c:	2101      	movs	r1, #1
 800025e:	2020      	movs	r0, #32
 8000260:	f001 f8a2 	bl	80013a8 <I2C_IRQConfig>

	I2C_PeripheralControl(I2C1, ENABLE);
 8000264:	2101      	movs	r1, #1
 8000266:	482c      	ldr	r0, [pc, #176]	; (8000318 <main+0xf4>)
 8000268:	f001 f882 	bl	8001370 <I2C_PeripheralControl>

	//This bit is set and cleared by software and cleared by hardware when PE=0. so after PE=1 in above statement
	I2C_ManageACK(I2C_Config.pI2Cx, ENABLE);
 800026c:	4b2b      	ldr	r3, [pc, #172]	; (800031c <main+0xf8>)
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	2101      	movs	r1, #1
 8000272:	4618      	mov	r0, r3
 8000274:	f001 f861 	bl	800133a <I2C_ManageACK>


	while(1)
	{
		//Wait until user press the button
		while(!GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_0));
 8000278:	bf00      	nop
 800027a:	2100      	movs	r1, #0
 800027c:	4828      	ldr	r0, [pc, #160]	; (8000320 <main+0xfc>)
 800027e:	f000 fb67 	bl	8000950 <GPIO_ReadFromInputPin>
 8000282:	4603      	mov	r3, r0
 8000284:	2b00      	cmp	r3, #0
 8000286:	d0f8      	beq.n	800027a <main+0x56>

		delay();
 8000288:	f7ff ffb6 	bl	80001f8 <delay>
		//printf(" I2C starts...\n");
		command_code = 0x51;// Used to Len information
 800028c:	2351      	movs	r3, #81	; 0x51
 800028e:	70fb      	strb	r3, [r7, #3]

		I2C_MasterSenddataIT(&I2C_Config,&command_code ,1, MY_SLAVE_ADDR,REPEATED_START_ENABLE);
 8000290:	1cf9      	adds	r1, r7, #3
 8000292:	2301      	movs	r3, #1
 8000294:	9300      	str	r3, [sp, #0]
 8000296:	2368      	movs	r3, #104	; 0x68
 8000298:	2201      	movs	r2, #1
 800029a:	4820      	ldr	r0, [pc, #128]	; (800031c <main+0xf8>)
 800029c:	f000 fcfc 	bl	8000c98 <I2C_MasterSenddataIT>
		while(I2C_Config.TxRxState != I2C_STATE_IDLE);
 80002a0:	bf00      	nop
 80002a2:	4b1e      	ldr	r3, [pc, #120]	; (800031c <main+0xf8>)
 80002a4:	7f1b      	ldrb	r3, [r3, #28]
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	d1fb      	bne.n	80002a2 <main+0x7e>

		I2C_MasterReceivedataIT(&I2C_Config, &Len, 1, MY_SLAVE_ADDR,REPEATED_START_ENABLE);
 80002aa:	1cb9      	adds	r1, r7, #2
 80002ac:	2301      	movs	r3, #1
 80002ae:	9300      	str	r3, [sp, #0]
 80002b0:	2368      	movs	r3, #104	; 0x68
 80002b2:	2201      	movs	r2, #1
 80002b4:	4819      	ldr	r0, [pc, #100]	; (800031c <main+0xf8>)
 80002b6:	f000 fd32 	bl	8000d1e <I2C_MasterReceivedataIT>
		while(I2C_Config.TxRxState != I2C_STATE_IDLE);
 80002ba:	bf00      	nop
 80002bc:	4b17      	ldr	r3, [pc, #92]	; (800031c <main+0xf8>)
 80002be:	7f1b      	ldrb	r3, [r3, #28]
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d1fb      	bne.n	80002bc <main+0x98>

		command_code = 0x52;// Used to Len information
 80002c4:	2352      	movs	r3, #82	; 0x52
 80002c6:	70fb      	strb	r3, [r7, #3]
		I2C_MasterSenddataIT(&I2C_Config,&command_code ,1, MY_SLAVE_ADDR,REPEATED_START_ENABLE);
 80002c8:	1cf9      	adds	r1, r7, #3
 80002ca:	2301      	movs	r3, #1
 80002cc:	9300      	str	r3, [sp, #0]
 80002ce:	2368      	movs	r3, #104	; 0x68
 80002d0:	2201      	movs	r2, #1
 80002d2:	4812      	ldr	r0, [pc, #72]	; (800031c <main+0xf8>)
 80002d4:	f000 fce0 	bl	8000c98 <I2C_MasterSenddataIT>
		while(I2C_Config.TxRxState != I2C_STATE_IDLE);
 80002d8:	bf00      	nop
 80002da:	4b10      	ldr	r3, [pc, #64]	; (800031c <main+0xf8>)
 80002dc:	7f1b      	ldrb	r3, [r3, #28]
 80002de:	2b00      	cmp	r3, #0
 80002e0:	d1fb      	bne.n	80002da <main+0xb6>

		I2C_MasterReceivedataIT(&I2C_Config, (uint8_t *)&usr_msg[0], Len, MY_SLAVE_ADDR,REPEATED_START_DISABLE);
 80002e2:	78bb      	ldrb	r3, [r7, #2]
 80002e4:	461a      	mov	r2, r3
 80002e6:	1d39      	adds	r1, r7, #4
 80002e8:	2300      	movs	r3, #0
 80002ea:	9300      	str	r3, [sp, #0]
 80002ec:	2368      	movs	r3, #104	; 0x68
 80002ee:	480b      	ldr	r0, [pc, #44]	; (800031c <main+0xf8>)
 80002f0:	f000 fd15 	bl	8000d1e <I2C_MasterReceivedataIT>
		while(I2C_Config.TxRxState != I2C_STATE_IDLE);
 80002f4:	bf00      	nop
 80002f6:	4b09      	ldr	r3, [pc, #36]	; (800031c <main+0xf8>)
 80002f8:	7f1b      	ldrb	r3, [r3, #28]
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d1fb      	bne.n	80002f6 <main+0xd2>

		usr_msg[Len +1]= '\0';
 80002fe:	78bb      	ldrb	r3, [r7, #2]
 8000300:	3301      	adds	r3, #1
 8000302:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8000306:	4413      	add	r3, r2
 8000308:	2200      	movs	r2, #0
 800030a:	f803 2c64 	strb.w	r2, [r3, #-100]
#if 1
		//while(!RxCmplt);
		printf("%s\n",usr_msg);
 800030e:	1d3b      	adds	r3, r7, #4
 8000310:	4618      	mov	r0, r3
 8000312:	f001 f96d 	bl	80015f0 <puts>
		while(!GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_0));
 8000316:	e7af      	b.n	8000278 <main+0x54>
 8000318:	40005400 	.word	0x40005400
 800031c:	2000015c 	.word	0x2000015c
 8000320:	40020000 	.word	0x40020000

08000324 <I2C1_GpioInit>:
 * PB6 -> I2C1_SCL
 * PB7 -> I2C1_SDA
 * Alternate functionality 4
 */
void I2C1_GpioInit(void)
{
 8000324:	b580      	push	{r7, lr}
 8000326:	b084      	sub	sp, #16
 8000328:	af00      	add	r7, sp, #0
	GPIO_Handle_t I2Cpins = {0};
 800032a:	1d3b      	adds	r3, r7, #4
 800032c:	2200      	movs	r2, #0
 800032e:	601a      	str	r2, [r3, #0]
 8000330:	605a      	str	r2, [r3, #4]
 8000332:	609a      	str	r2, [r3, #8]

	I2Cpins.pGPIOx = GPIOB;
 8000334:	4b0d      	ldr	r3, [pc, #52]	; (800036c <I2C1_GpioInit+0x48>)
 8000336:	607b      	str	r3, [r7, #4]
	I2Cpins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000338:	2302      	movs	r3, #2
 800033a:	727b      	strb	r3, [r7, #9]
	I2Cpins.GPIO_PinConfig.GPIO_PinOPType = GPIO_PIN_OUT_OD;
 800033c:	2301      	movs	r3, #1
 800033e:	733b      	strb	r3, [r7, #12]
	I2Cpins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPD_PU;
 8000340:	2301      	movs	r3, #1
 8000342:	72fb      	strb	r3, [r7, #11]
	I2Cpins.GPIO_PinConfig.GPIO_PinAltFunMode = 4;
 8000344:	2304      	movs	r3, #4
 8000346:	737b      	strb	r3, [r7, #13]
	I2Cpins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_HIGH;
 8000348:	2302      	movs	r3, #2
 800034a:	72bb      	strb	r3, [r7, #10]

	//scl
	I2Cpins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_6;
 800034c:	2306      	movs	r3, #6
 800034e:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&I2Cpins);
 8000350:	1d3b      	adds	r3, r7, #4
 8000352:	4618      	mov	r0, r3
 8000354:	f000 f99e 	bl	8000694 <GPIO_Init>

	//sda
	I2Cpins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_7;
 8000358:	2307      	movs	r3, #7
 800035a:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&I2Cpins);
 800035c:	1d3b      	adds	r3, r7, #4
 800035e:	4618      	mov	r0, r3
 8000360:	f000 f998 	bl	8000694 <GPIO_Init>

}
 8000364:	bf00      	nop
 8000366:	3710      	adds	r7, #16
 8000368:	46bd      	mov	sp, r7
 800036a:	bd80      	pop	{r7, pc}
 800036c:	40020400 	.word	0x40020400

08000370 <I2C1_Init>:


void I2C1_Init(void)
{
 8000370:	b580      	push	{r7, lr}
 8000372:	af00      	add	r7, sp, #0


	I2C_Config.pI2Cx =  I2C1;
 8000374:	4b09      	ldr	r3, [pc, #36]	; (800039c <I2C1_Init+0x2c>)
 8000376:	4a0a      	ldr	r2, [pc, #40]	; (80003a0 <I2C1_Init+0x30>)
 8000378:	601a      	str	r2, [r3, #0]
	I2C_Config.pI2C_Config.I2C_ACKCtrl = I2C_ACK_ENABLE;
 800037a:	4b08      	ldr	r3, [pc, #32]	; (800039c <I2C1_Init+0x2c>)
 800037c:	2201      	movs	r2, #1
 800037e:	725a      	strb	r2, [r3, #9]
	I2C_Config.pI2C_Config.I2C_DeviceAddr = MY_ADDR;
 8000380:	4b06      	ldr	r3, [pc, #24]	; (800039c <I2C1_Init+0x2c>)
 8000382:	2261      	movs	r2, #97	; 0x61
 8000384:	721a      	strb	r2, [r3, #8]
	I2C_Config.pI2C_Config.I2C_FMDutyCycle = I2C_FM_DUTY_2;
 8000386:	4b05      	ldr	r3, [pc, #20]	; (800039c <I2C1_Init+0x2c>)
 8000388:	2200      	movs	r2, #0
 800038a:	815a      	strh	r2, [r3, #10]
	I2C_Config.pI2C_Config.I2C_SCLSpeed = I2C_SPEED_STD_MODE;
 800038c:	4b03      	ldr	r3, [pc, #12]	; (800039c <I2C1_Init+0x2c>)
 800038e:	4a05      	ldr	r2, [pc, #20]	; (80003a4 <I2C1_Init+0x34>)
 8000390:	605a      	str	r2, [r3, #4]

	I2C_Init(&I2C_Config);
 8000392:	4802      	ldr	r0, [pc, #8]	; (800039c <I2C1_Init+0x2c>)
 8000394:	f000 fbba 	bl	8000b0c <I2C_Init>
}
 8000398:	bf00      	nop
 800039a:	bd80      	pop	{r7, pc}
 800039c:	2000015c 	.word	0x2000015c
 80003a0:	40005400 	.word	0x40005400
 80003a4:	000186a0 	.word	0x000186a0

080003a8 <GPIO_ButtonInit>:

void GPIO_ButtonInit(void)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b084      	sub	sp, #16
 80003ac:	af00      	add	r7, sp, #0

	GPIO_Handle_t GpioBtn;

	GpioBtn.pGPIOx = GPIOA;
 80003ae:	4b0a      	ldr	r3, [pc, #40]	; (80003d8 <GPIO_ButtonInit+0x30>)
 80003b0:	607b      	str	r3, [r7, #4]
	GpioBtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_0;
 80003b2:	2300      	movs	r3, #0
 80003b4:	723b      	strb	r3, [r7, #8]
	GpioBtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 80003b6:	2300      	movs	r3, #0
 80003b8:	727b      	strb	r3, [r7, #9]
	GpioBtn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPD_NOPUPD;
 80003ba:	2300      	movs	r3, #0
 80003bc:	72fb      	strb	r3, [r7, #11]

	//Enable the peripheral clock
	GPIO_PeriClock_Control(GPIOA, ENABLE);
 80003be:	2101      	movs	r1, #1
 80003c0:	4805      	ldr	r0, [pc, #20]	; (80003d8 <GPIO_ButtonInit+0x30>)
 80003c2:	f000 f87f 	bl	80004c4 <GPIO_PeriClock_Control>

	//Init the GPIO
	GPIO_Init(&GpioBtn);
 80003c6:	1d3b      	adds	r3, r7, #4
 80003c8:	4618      	mov	r0, r3
 80003ca:	f000 f963 	bl	8000694 <GPIO_Init>
}
 80003ce:	bf00      	nop
 80003d0:	3710      	adds	r7, #16
 80003d2:	46bd      	mov	sp, r7
 80003d4:	bd80      	pop	{r7, pc}
 80003d6:	bf00      	nop
 80003d8:	40020000 	.word	0x40020000

080003dc <I2C1_EV_IRQHandler>:


void I2C1_EV_IRQHandler(void)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	af00      	add	r7, sp, #0
	I2C_Event_IRQHandling(&I2C_Config);
 80003e0:	4802      	ldr	r0, [pc, #8]	; (80003ec <I2C1_EV_IRQHandler+0x10>)
 80003e2:	f000 fce2 	bl	8000daa <I2C_Event_IRQHandling>
}
 80003e6:	bf00      	nop
 80003e8:	bd80      	pop	{r7, pc}
 80003ea:	bf00      	nop
 80003ec:	2000015c 	.word	0x2000015c

080003f0 <I2C1_ER_IRQHandler>:

void I2C1_ER_IRQHandler(void)
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	af00      	add	r7, sp, #0
	I2C_Error_IRQHandling(&I2C_Config);
 80003f4:	4802      	ldr	r0, [pc, #8]	; (8000400 <I2C1_ER_IRQHandler+0x10>)
 80003f6:	f000 fd9a 	bl	8000f2e <I2C_Error_IRQHandling>
}
 80003fa:	bf00      	nop
 80003fc:	bd80      	pop	{r7, pc}
 80003fe:	bf00      	nop
 8000400:	2000015c 	.word	0x2000015c

08000404 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	b086      	sub	sp, #24
 8000408:	af00      	add	r7, sp, #0
 800040a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800040c:	4a14      	ldr	r2, [pc, #80]	; (8000460 <_sbrk+0x5c>)
 800040e:	4b15      	ldr	r3, [pc, #84]	; (8000464 <_sbrk+0x60>)
 8000410:	1ad3      	subs	r3, r2, r3
 8000412:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000414:	697b      	ldr	r3, [r7, #20]
 8000416:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000418:	4b13      	ldr	r3, [pc, #76]	; (8000468 <_sbrk+0x64>)
 800041a:	681b      	ldr	r3, [r3, #0]
 800041c:	2b00      	cmp	r3, #0
 800041e:	d102      	bne.n	8000426 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000420:	4b11      	ldr	r3, [pc, #68]	; (8000468 <_sbrk+0x64>)
 8000422:	4a12      	ldr	r2, [pc, #72]	; (800046c <_sbrk+0x68>)
 8000424:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000426:	4b10      	ldr	r3, [pc, #64]	; (8000468 <_sbrk+0x64>)
 8000428:	681a      	ldr	r2, [r3, #0]
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	4413      	add	r3, r2
 800042e:	693a      	ldr	r2, [r7, #16]
 8000430:	429a      	cmp	r2, r3
 8000432:	d207      	bcs.n	8000444 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000434:	f001 f83c 	bl	80014b0 <__errno>
 8000438:	4603      	mov	r3, r0
 800043a:	220c      	movs	r2, #12
 800043c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800043e:	f04f 33ff 	mov.w	r3, #4294967295
 8000442:	e009      	b.n	8000458 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000444:	4b08      	ldr	r3, [pc, #32]	; (8000468 <_sbrk+0x64>)
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800044a:	4b07      	ldr	r3, [pc, #28]	; (8000468 <_sbrk+0x64>)
 800044c:	681a      	ldr	r2, [r3, #0]
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	4413      	add	r3, r2
 8000452:	4a05      	ldr	r2, [pc, #20]	; (8000468 <_sbrk+0x64>)
 8000454:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000456:	68fb      	ldr	r3, [r7, #12]
}
 8000458:	4618      	mov	r0, r3
 800045a:	3718      	adds	r7, #24
 800045c:	46bd      	mov	sp, r7
 800045e:	bd80      	pop	{r7, pc}
 8000460:	20020000 	.word	0x20020000
 8000464:	00000400 	.word	0x00000400
 8000468:	200000a0 	.word	0x200000a0
 800046c:	20000198 	.word	0x20000198

08000470 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000470:	480d      	ldr	r0, [pc, #52]	; (80004a8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000472:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000474:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000478:	480c      	ldr	r0, [pc, #48]	; (80004ac <LoopForever+0x6>)
  ldr r1, =_edata
 800047a:	490d      	ldr	r1, [pc, #52]	; (80004b0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800047c:	4a0d      	ldr	r2, [pc, #52]	; (80004b4 <LoopForever+0xe>)
  movs r3, #0
 800047e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000480:	e002      	b.n	8000488 <LoopCopyDataInit>

08000482 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000482:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000484:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000486:	3304      	adds	r3, #4

08000488 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000488:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800048a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800048c:	d3f9      	bcc.n	8000482 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800048e:	4a0a      	ldr	r2, [pc, #40]	; (80004b8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000490:	4c0a      	ldr	r4, [pc, #40]	; (80004bc <LoopForever+0x16>)
  movs r3, #0
 8000492:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000494:	e001      	b.n	800049a <LoopFillZerobss>

08000496 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000496:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000498:	3204      	adds	r2, #4

0800049a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800049a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800049c:	d3fb      	bcc.n	8000496 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800049e:	f001 f80d 	bl	80014bc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80004a2:	f7ff febf 	bl	8000224 <main>

080004a6 <LoopForever>:

LoopForever:
    b LoopForever
 80004a6:	e7fe      	b.n	80004a6 <LoopForever>
  ldr   r0, =_estack
 80004a8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80004ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004b0:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 80004b4:	08002488 	.word	0x08002488
  ldr r2, =_sbss
 80004b8:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 80004bc:	20000194 	.word	0x20000194

080004c0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80004c0:	e7fe      	b.n	80004c0 <ADC_IRQHandler>
	...

080004c4 <GPIO_PeriClock_Control>:
 *
 * @Note              -  none

 */
void GPIO_PeriClock_Control(GPIOx_RegDef_t *pGPIOx,uint8_t EnorDi)
{
 80004c4:	b480      	push	{r7}
 80004c6:	b083      	sub	sp, #12
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	6078      	str	r0, [r7, #4]
 80004cc:	460b      	mov	r3, r1
 80004ce:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 80004d0:	78fb      	ldrb	r3, [r7, #3]
 80004d2:	2b01      	cmp	r3, #1
 80004d4:	d162      	bne.n	800059c <GPIO_PeriClock_Control+0xd8>
	{
		if(pGPIOx == GPIOA)
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	4a64      	ldr	r2, [pc, #400]	; (800066c <GPIO_PeriClock_Control+0x1a8>)
 80004da:	4293      	cmp	r3, r2
 80004dc:	d106      	bne.n	80004ec <GPIO_PeriClock_Control+0x28>
		{
			GPIOA_PCLK_EN();
 80004de:	4b64      	ldr	r3, [pc, #400]	; (8000670 <GPIO_PeriClock_Control+0x1ac>)
 80004e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004e2:	4a63      	ldr	r2, [pc, #396]	; (8000670 <GPIO_PeriClock_Control+0x1ac>)
 80004e4:	f043 0301 	orr.w	r3, r3, #1
 80004e8:	6313      	str	r3, [r2, #48]	; 0x30
		else if(pGPIOx == GPIOI)
		{
			GPIOI_PCLK_DI();
		}
	}
}
 80004ea:	e0b9      	b.n	8000660 <GPIO_PeriClock_Control+0x19c>
		else if(pGPIOx == GPIOB)
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	4a61      	ldr	r2, [pc, #388]	; (8000674 <GPIO_PeriClock_Control+0x1b0>)
 80004f0:	4293      	cmp	r3, r2
 80004f2:	d106      	bne.n	8000502 <GPIO_PeriClock_Control+0x3e>
			GPIOB_PCLK_EN();
 80004f4:	4b5e      	ldr	r3, [pc, #376]	; (8000670 <GPIO_PeriClock_Control+0x1ac>)
 80004f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004f8:	4a5d      	ldr	r2, [pc, #372]	; (8000670 <GPIO_PeriClock_Control+0x1ac>)
 80004fa:	f043 0302 	orr.w	r3, r3, #2
 80004fe:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000500:	e0ae      	b.n	8000660 <GPIO_PeriClock_Control+0x19c>
		else if(pGPIOx == GPIOC)
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	4a5c      	ldr	r2, [pc, #368]	; (8000678 <GPIO_PeriClock_Control+0x1b4>)
 8000506:	4293      	cmp	r3, r2
 8000508:	d106      	bne.n	8000518 <GPIO_PeriClock_Control+0x54>
			GPIOC_PCLK_EN();
 800050a:	4b59      	ldr	r3, [pc, #356]	; (8000670 <GPIO_PeriClock_Control+0x1ac>)
 800050c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800050e:	4a58      	ldr	r2, [pc, #352]	; (8000670 <GPIO_PeriClock_Control+0x1ac>)
 8000510:	f043 0304 	orr.w	r3, r3, #4
 8000514:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000516:	e0a3      	b.n	8000660 <GPIO_PeriClock_Control+0x19c>
		else if(pGPIOx == GPIOD)
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	4a58      	ldr	r2, [pc, #352]	; (800067c <GPIO_PeriClock_Control+0x1b8>)
 800051c:	4293      	cmp	r3, r2
 800051e:	d106      	bne.n	800052e <GPIO_PeriClock_Control+0x6a>
			GPIOD_PCLK_EN();
 8000520:	4b53      	ldr	r3, [pc, #332]	; (8000670 <GPIO_PeriClock_Control+0x1ac>)
 8000522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000524:	4a52      	ldr	r2, [pc, #328]	; (8000670 <GPIO_PeriClock_Control+0x1ac>)
 8000526:	f043 0308 	orr.w	r3, r3, #8
 800052a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800052c:	e098      	b.n	8000660 <GPIO_PeriClock_Control+0x19c>
		else if(pGPIOx == GPIOE)
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	4a53      	ldr	r2, [pc, #332]	; (8000680 <GPIO_PeriClock_Control+0x1bc>)
 8000532:	4293      	cmp	r3, r2
 8000534:	d106      	bne.n	8000544 <GPIO_PeriClock_Control+0x80>
			GPIOE_PCLK_EN();
 8000536:	4b4e      	ldr	r3, [pc, #312]	; (8000670 <GPIO_PeriClock_Control+0x1ac>)
 8000538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800053a:	4a4d      	ldr	r2, [pc, #308]	; (8000670 <GPIO_PeriClock_Control+0x1ac>)
 800053c:	f043 0310 	orr.w	r3, r3, #16
 8000540:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000542:	e08d      	b.n	8000660 <GPIO_PeriClock_Control+0x19c>
		else if(pGPIOx == GPIOF)
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	4a4f      	ldr	r2, [pc, #316]	; (8000684 <GPIO_PeriClock_Control+0x1c0>)
 8000548:	4293      	cmp	r3, r2
 800054a:	d106      	bne.n	800055a <GPIO_PeriClock_Control+0x96>
			GPIOF_PCLK_EN();
 800054c:	4b48      	ldr	r3, [pc, #288]	; (8000670 <GPIO_PeriClock_Control+0x1ac>)
 800054e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000550:	4a47      	ldr	r2, [pc, #284]	; (8000670 <GPIO_PeriClock_Control+0x1ac>)
 8000552:	f043 0320 	orr.w	r3, r3, #32
 8000556:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000558:	e082      	b.n	8000660 <GPIO_PeriClock_Control+0x19c>
		else if(pGPIOx == GPIOG)
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	4a4a      	ldr	r2, [pc, #296]	; (8000688 <GPIO_PeriClock_Control+0x1c4>)
 800055e:	4293      	cmp	r3, r2
 8000560:	d106      	bne.n	8000570 <GPIO_PeriClock_Control+0xac>
			GPIOG_PCLK_EN();
 8000562:	4b43      	ldr	r3, [pc, #268]	; (8000670 <GPIO_PeriClock_Control+0x1ac>)
 8000564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000566:	4a42      	ldr	r2, [pc, #264]	; (8000670 <GPIO_PeriClock_Control+0x1ac>)
 8000568:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800056c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800056e:	e077      	b.n	8000660 <GPIO_PeriClock_Control+0x19c>
		else if(pGPIOx == GPIOH)
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	4a46      	ldr	r2, [pc, #280]	; (800068c <GPIO_PeriClock_Control+0x1c8>)
 8000574:	4293      	cmp	r3, r2
 8000576:	d106      	bne.n	8000586 <GPIO_PeriClock_Control+0xc2>
			GPIOH_PCLK_EN();
 8000578:	4b3d      	ldr	r3, [pc, #244]	; (8000670 <GPIO_PeriClock_Control+0x1ac>)
 800057a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800057c:	4a3c      	ldr	r2, [pc, #240]	; (8000670 <GPIO_PeriClock_Control+0x1ac>)
 800057e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000582:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000584:	e06c      	b.n	8000660 <GPIO_PeriClock_Control+0x19c>
		else if(pGPIOx == GPIOI)
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	4a41      	ldr	r2, [pc, #260]	; (8000690 <GPIO_PeriClock_Control+0x1cc>)
 800058a:	4293      	cmp	r3, r2
 800058c:	d168      	bne.n	8000660 <GPIO_PeriClock_Control+0x19c>
			GPIOI_PCLK_EN();
 800058e:	4b38      	ldr	r3, [pc, #224]	; (8000670 <GPIO_PeriClock_Control+0x1ac>)
 8000590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000592:	4a37      	ldr	r2, [pc, #220]	; (8000670 <GPIO_PeriClock_Control+0x1ac>)
 8000594:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000598:	6313      	str	r3, [r2, #48]	; 0x30
}
 800059a:	e061      	b.n	8000660 <GPIO_PeriClock_Control+0x19c>
		if(pGPIOx == GPIOA)
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	4a33      	ldr	r2, [pc, #204]	; (800066c <GPIO_PeriClock_Control+0x1a8>)
 80005a0:	4293      	cmp	r3, r2
 80005a2:	d106      	bne.n	80005b2 <GPIO_PeriClock_Control+0xee>
			GPIOA_PCLK_DI();
 80005a4:	4b32      	ldr	r3, [pc, #200]	; (8000670 <GPIO_PeriClock_Control+0x1ac>)
 80005a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a8:	4a31      	ldr	r2, [pc, #196]	; (8000670 <GPIO_PeriClock_Control+0x1ac>)
 80005aa:	f023 0301 	bic.w	r3, r3, #1
 80005ae:	6313      	str	r3, [r2, #48]	; 0x30
}
 80005b0:	e056      	b.n	8000660 <GPIO_PeriClock_Control+0x19c>
		else if(pGPIOx == GPIOB)
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	4a2f      	ldr	r2, [pc, #188]	; (8000674 <GPIO_PeriClock_Control+0x1b0>)
 80005b6:	4293      	cmp	r3, r2
 80005b8:	d106      	bne.n	80005c8 <GPIO_PeriClock_Control+0x104>
			GPIOB_PCLK_DI();
 80005ba:	4b2d      	ldr	r3, [pc, #180]	; (8000670 <GPIO_PeriClock_Control+0x1ac>)
 80005bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005be:	4a2c      	ldr	r2, [pc, #176]	; (8000670 <GPIO_PeriClock_Control+0x1ac>)
 80005c0:	f023 0302 	bic.w	r3, r3, #2
 80005c4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80005c6:	e04b      	b.n	8000660 <GPIO_PeriClock_Control+0x19c>
		else if(pGPIOx == GPIOC)
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	4a2b      	ldr	r2, [pc, #172]	; (8000678 <GPIO_PeriClock_Control+0x1b4>)
 80005cc:	4293      	cmp	r3, r2
 80005ce:	d106      	bne.n	80005de <GPIO_PeriClock_Control+0x11a>
			GPIOC_PCLK_DI();
 80005d0:	4b27      	ldr	r3, [pc, #156]	; (8000670 <GPIO_PeriClock_Control+0x1ac>)
 80005d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d4:	4a26      	ldr	r2, [pc, #152]	; (8000670 <GPIO_PeriClock_Control+0x1ac>)
 80005d6:	f023 0304 	bic.w	r3, r3, #4
 80005da:	6313      	str	r3, [r2, #48]	; 0x30
}
 80005dc:	e040      	b.n	8000660 <GPIO_PeriClock_Control+0x19c>
		else if(pGPIOx == GPIOD)
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	4a26      	ldr	r2, [pc, #152]	; (800067c <GPIO_PeriClock_Control+0x1b8>)
 80005e2:	4293      	cmp	r3, r2
 80005e4:	d106      	bne.n	80005f4 <GPIO_PeriClock_Control+0x130>
			GPIOD_PCLK_DI();
 80005e6:	4b22      	ldr	r3, [pc, #136]	; (8000670 <GPIO_PeriClock_Control+0x1ac>)
 80005e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ea:	4a21      	ldr	r2, [pc, #132]	; (8000670 <GPIO_PeriClock_Control+0x1ac>)
 80005ec:	f023 0308 	bic.w	r3, r3, #8
 80005f0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80005f2:	e035      	b.n	8000660 <GPIO_PeriClock_Control+0x19c>
		else if(pGPIOx == GPIOE)
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	4a22      	ldr	r2, [pc, #136]	; (8000680 <GPIO_PeriClock_Control+0x1bc>)
 80005f8:	4293      	cmp	r3, r2
 80005fa:	d106      	bne.n	800060a <GPIO_PeriClock_Control+0x146>
			GPIOE_PCLK_DI();
 80005fc:	4b1c      	ldr	r3, [pc, #112]	; (8000670 <GPIO_PeriClock_Control+0x1ac>)
 80005fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000600:	4a1b      	ldr	r2, [pc, #108]	; (8000670 <GPIO_PeriClock_Control+0x1ac>)
 8000602:	f023 0310 	bic.w	r3, r3, #16
 8000606:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000608:	e02a      	b.n	8000660 <GPIO_PeriClock_Control+0x19c>
		else if(pGPIOx == GPIOF)
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	4a1d      	ldr	r2, [pc, #116]	; (8000684 <GPIO_PeriClock_Control+0x1c0>)
 800060e:	4293      	cmp	r3, r2
 8000610:	d106      	bne.n	8000620 <GPIO_PeriClock_Control+0x15c>
			GPIOF_PCLK_DI();
 8000612:	4b17      	ldr	r3, [pc, #92]	; (8000670 <GPIO_PeriClock_Control+0x1ac>)
 8000614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000616:	4a16      	ldr	r2, [pc, #88]	; (8000670 <GPIO_PeriClock_Control+0x1ac>)
 8000618:	f023 0320 	bic.w	r3, r3, #32
 800061c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800061e:	e01f      	b.n	8000660 <GPIO_PeriClock_Control+0x19c>
		else if(pGPIOx == GPIOG)
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	4a19      	ldr	r2, [pc, #100]	; (8000688 <GPIO_PeriClock_Control+0x1c4>)
 8000624:	4293      	cmp	r3, r2
 8000626:	d106      	bne.n	8000636 <GPIO_PeriClock_Control+0x172>
			GPIOG_PCLK_DI();
 8000628:	4b11      	ldr	r3, [pc, #68]	; (8000670 <GPIO_PeriClock_Control+0x1ac>)
 800062a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062c:	4a10      	ldr	r2, [pc, #64]	; (8000670 <GPIO_PeriClock_Control+0x1ac>)
 800062e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000632:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000634:	e014      	b.n	8000660 <GPIO_PeriClock_Control+0x19c>
		else if(pGPIOx == GPIOH)
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	4a14      	ldr	r2, [pc, #80]	; (800068c <GPIO_PeriClock_Control+0x1c8>)
 800063a:	4293      	cmp	r3, r2
 800063c:	d106      	bne.n	800064c <GPIO_PeriClock_Control+0x188>
			GPIOH_PCLK_DI();
 800063e:	4b0c      	ldr	r3, [pc, #48]	; (8000670 <GPIO_PeriClock_Control+0x1ac>)
 8000640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000642:	4a0b      	ldr	r2, [pc, #44]	; (8000670 <GPIO_PeriClock_Control+0x1ac>)
 8000644:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000648:	6313      	str	r3, [r2, #48]	; 0x30
}
 800064a:	e009      	b.n	8000660 <GPIO_PeriClock_Control+0x19c>
		else if(pGPIOx == GPIOI)
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	4a10      	ldr	r2, [pc, #64]	; (8000690 <GPIO_PeriClock_Control+0x1cc>)
 8000650:	4293      	cmp	r3, r2
 8000652:	d105      	bne.n	8000660 <GPIO_PeriClock_Control+0x19c>
			GPIOI_PCLK_DI();
 8000654:	4b06      	ldr	r3, [pc, #24]	; (8000670 <GPIO_PeriClock_Control+0x1ac>)
 8000656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000658:	4a05      	ldr	r2, [pc, #20]	; (8000670 <GPIO_PeriClock_Control+0x1ac>)
 800065a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800065e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000660:	bf00      	nop
 8000662:	370c      	adds	r7, #12
 8000664:	46bd      	mov	sp, r7
 8000666:	bc80      	pop	{r7}
 8000668:	4770      	bx	lr
 800066a:	bf00      	nop
 800066c:	40020000 	.word	0x40020000
 8000670:	40023800 	.word	0x40023800
 8000674:	40020400 	.word	0x40020400
 8000678:	40020800 	.word	0x40020800
 800067c:	40020c00 	.word	0x40020c00
 8000680:	40021000 	.word	0x40021000
 8000684:	40021400 	.word	0x40021400
 8000688:	40021800 	.word	0x40021800
 800068c:	40021c00 	.word	0x40021c00
 8000690:	40022000 	.word	0x40022000

08000694 <GPIO_Init>:

/*
 * GPIO init and De-init function
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b086      	sub	sp, #24
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
	uint32_t temp = 0 ;
 800069c:	2300      	movs	r3, #0
 800069e:	617b      	str	r3, [r7, #20]

	//Enable the GPIO peripheral clock
	GPIO_PeriClock_Control(pGPIOHandle->pGPIOx, ENABLE);
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	2101      	movs	r1, #1
 80006a6:	4618      	mov	r0, r3
 80006a8:	f7ff ff0c 	bl	80004c4 <GPIO_PeriClock_Control>

	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ALTFN)
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	795b      	ldrb	r3, [r3, #5]
 80006b0:	2b02      	cmp	r3, #2
 80006b2:	d813      	bhi.n	80006dc <GPIO_Init+0x48>
	{
		//Non-interrupt functionality
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 *pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	795b      	ldrb	r3, [r3, #5]
 80006b8:	461a      	mov	r2, r3
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	791b      	ldrb	r3, [r3, #4]
 80006be:	005b      	lsls	r3, r3, #1
 80006c0:	fa02 f303 	lsl.w	r3, r2, r3
 80006c4:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER |= temp;
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	6819      	ldr	r1, [r3, #0]
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	697a      	ldr	r2, [r7, #20]
 80006d2:	430a      	orrs	r2, r1
 80006d4:	601a      	str	r2, [r3, #0]
		temp = 0;
 80006d6:	2300      	movs	r3, #0
 80006d8:	617b      	str	r3, [r7, #20]
 80006da:	e0c1      	b.n	8000860 <GPIO_Init+0x1cc>
	}
	else
	{
		//Alternate functionality
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	795b      	ldrb	r3, [r3, #5]
 80006e0:	2b05      	cmp	r3, #5
 80006e2:	d117      	bne.n	8000714 <GPIO_Init+0x80>
		{
			//Enable the Falling edge interrupt and clear the rising edge interrupt
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80006e4:	4b8e      	ldr	r3, [pc, #568]	; (8000920 <GPIO_Init+0x28c>)
 80006e6:	68db      	ldr	r3, [r3, #12]
 80006e8:	687a      	ldr	r2, [r7, #4]
 80006ea:	7912      	ldrb	r2, [r2, #4]
 80006ec:	4611      	mov	r1, r2
 80006ee:	2201      	movs	r2, #1
 80006f0:	408a      	lsls	r2, r1
 80006f2:	4611      	mov	r1, r2
 80006f4:	4a8a      	ldr	r2, [pc, #552]	; (8000920 <GPIO_Init+0x28c>)
 80006f6:	430b      	orrs	r3, r1
 80006f8:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80006fa:	4b89      	ldr	r3, [pc, #548]	; (8000920 <GPIO_Init+0x28c>)
 80006fc:	689b      	ldr	r3, [r3, #8]
 80006fe:	687a      	ldr	r2, [r7, #4]
 8000700:	7912      	ldrb	r2, [r2, #4]
 8000702:	4611      	mov	r1, r2
 8000704:	2201      	movs	r2, #1
 8000706:	408a      	lsls	r2, r1
 8000708:	43d2      	mvns	r2, r2
 800070a:	4611      	mov	r1, r2
 800070c:	4a84      	ldr	r2, [pc, #528]	; (8000920 <GPIO_Init+0x28c>)
 800070e:	400b      	ands	r3, r1
 8000710:	6093      	str	r3, [r2, #8]
 8000712:	e035      	b.n	8000780 <GPIO_Init+0xec>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	795b      	ldrb	r3, [r3, #5]
 8000718:	2b04      	cmp	r3, #4
 800071a:	d117      	bne.n	800074c <GPIO_Init+0xb8>
		{
			//Enable the Rising edge interrupt and clear the falling edge interrupt
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800071c:	4b80      	ldr	r3, [pc, #512]	; (8000920 <GPIO_Init+0x28c>)
 800071e:	68db      	ldr	r3, [r3, #12]
 8000720:	687a      	ldr	r2, [r7, #4]
 8000722:	7912      	ldrb	r2, [r2, #4]
 8000724:	4611      	mov	r1, r2
 8000726:	2201      	movs	r2, #1
 8000728:	408a      	lsls	r2, r1
 800072a:	43d2      	mvns	r2, r2
 800072c:	4611      	mov	r1, r2
 800072e:	4a7c      	ldr	r2, [pc, #496]	; (8000920 <GPIO_Init+0x28c>)
 8000730:	400b      	ands	r3, r1
 8000732:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000734:	4b7a      	ldr	r3, [pc, #488]	; (8000920 <GPIO_Init+0x28c>)
 8000736:	689b      	ldr	r3, [r3, #8]
 8000738:	687a      	ldr	r2, [r7, #4]
 800073a:	7912      	ldrb	r2, [r2, #4]
 800073c:	4611      	mov	r1, r2
 800073e:	2201      	movs	r2, #1
 8000740:	408a      	lsls	r2, r1
 8000742:	4611      	mov	r1, r2
 8000744:	4a76      	ldr	r2, [pc, #472]	; (8000920 <GPIO_Init+0x28c>)
 8000746:	430b      	orrs	r3, r1
 8000748:	6093      	str	r3, [r2, #8]
 800074a:	e019      	b.n	8000780 <GPIO_Init+0xec>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT)
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	795b      	ldrb	r3, [r3, #5]
 8000750:	2b06      	cmp	r3, #6
 8000752:	d115      	bne.n	8000780 <GPIO_Init+0xec>
		{
			//Enable the Rising edge interrupt and falling edge interrupt
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000754:	4b72      	ldr	r3, [pc, #456]	; (8000920 <GPIO_Init+0x28c>)
 8000756:	68db      	ldr	r3, [r3, #12]
 8000758:	687a      	ldr	r2, [r7, #4]
 800075a:	7912      	ldrb	r2, [r2, #4]
 800075c:	4611      	mov	r1, r2
 800075e:	2201      	movs	r2, #1
 8000760:	408a      	lsls	r2, r1
 8000762:	4611      	mov	r1, r2
 8000764:	4a6e      	ldr	r2, [pc, #440]	; (8000920 <GPIO_Init+0x28c>)
 8000766:	430b      	orrs	r3, r1
 8000768:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800076a:	4b6d      	ldr	r3, [pc, #436]	; (8000920 <GPIO_Init+0x28c>)
 800076c:	689b      	ldr	r3, [r3, #8]
 800076e:	687a      	ldr	r2, [r7, #4]
 8000770:	7912      	ldrb	r2, [r2, #4]
 8000772:	4611      	mov	r1, r2
 8000774:	2201      	movs	r2, #1
 8000776:	408a      	lsls	r2, r1
 8000778:	4611      	mov	r1, r2
 800077a:	4a69      	ldr	r2, [pc, #420]	; (8000920 <GPIO_Init+0x28c>)
 800077c:	430b      	orrs	r3, r1
 800077e:	6093      	str	r3, [r2, #8]
		}

		//Enable the respective port for the pin number to NVIC
		SYSCFG_PCLK_EN();
 8000780:	4b68      	ldr	r3, [pc, #416]	; (8000924 <GPIO_Init+0x290>)
 8000782:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000784:	4a67      	ldr	r2, [pc, #412]	; (8000924 <GPIO_Init+0x290>)
 8000786:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800078a:	6453      	str	r3, [r2, #68]	; 0x44
		uint8_t index = 0;
 800078c:	2300      	movs	r3, #0
 800078e:	74fb      	strb	r3, [r7, #19]
		uint8_t pos	= 0 ;
 8000790:	2300      	movs	r3, #0
 8000792:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = PORTCODE_FROM_GPIO_PORTREG(pGPIOHandle->pGPIOx);
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	4a63      	ldr	r2, [pc, #396]	; (8000928 <GPIO_Init+0x294>)
 800079a:	4293      	cmp	r3, r2
 800079c:	d039      	beq.n	8000812 <GPIO_Init+0x17e>
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	4a62      	ldr	r2, [pc, #392]	; (800092c <GPIO_Init+0x298>)
 80007a4:	4293      	cmp	r3, r2
 80007a6:	d032      	beq.n	800080e <GPIO_Init+0x17a>
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	4a60      	ldr	r2, [pc, #384]	; (8000930 <GPIO_Init+0x29c>)
 80007ae:	4293      	cmp	r3, r2
 80007b0:	d02b      	beq.n	800080a <GPIO_Init+0x176>
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	4a5f      	ldr	r2, [pc, #380]	; (8000934 <GPIO_Init+0x2a0>)
 80007b8:	4293      	cmp	r3, r2
 80007ba:	d024      	beq.n	8000806 <GPIO_Init+0x172>
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	4a5d      	ldr	r2, [pc, #372]	; (8000938 <GPIO_Init+0x2a4>)
 80007c2:	4293      	cmp	r3, r2
 80007c4:	d01d      	beq.n	8000802 <GPIO_Init+0x16e>
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	4a5c      	ldr	r2, [pc, #368]	; (800093c <GPIO_Init+0x2a8>)
 80007cc:	4293      	cmp	r3, r2
 80007ce:	d016      	beq.n	80007fe <GPIO_Init+0x16a>
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	4a5a      	ldr	r2, [pc, #360]	; (8000940 <GPIO_Init+0x2ac>)
 80007d6:	4293      	cmp	r3, r2
 80007d8:	d00f      	beq.n	80007fa <GPIO_Init+0x166>
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	4a59      	ldr	r2, [pc, #356]	; (8000944 <GPIO_Init+0x2b0>)
 80007e0:	4293      	cmp	r3, r2
 80007e2:	d008      	beq.n	80007f6 <GPIO_Init+0x162>
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	4a57      	ldr	r2, [pc, #348]	; (8000948 <GPIO_Init+0x2b4>)
 80007ea:	4293      	cmp	r3, r2
 80007ec:	d101      	bne.n	80007f2 <GPIO_Init+0x15e>
 80007ee:	2308      	movs	r3, #8
 80007f0:	e010      	b.n	8000814 <GPIO_Init+0x180>
 80007f2:	2300      	movs	r3, #0
 80007f4:	e00e      	b.n	8000814 <GPIO_Init+0x180>
 80007f6:	2307      	movs	r3, #7
 80007f8:	e00c      	b.n	8000814 <GPIO_Init+0x180>
 80007fa:	2306      	movs	r3, #6
 80007fc:	e00a      	b.n	8000814 <GPIO_Init+0x180>
 80007fe:	2305      	movs	r3, #5
 8000800:	e008      	b.n	8000814 <GPIO_Init+0x180>
 8000802:	2304      	movs	r3, #4
 8000804:	e006      	b.n	8000814 <GPIO_Init+0x180>
 8000806:	2303      	movs	r3, #3
 8000808:	e004      	b.n	8000814 <GPIO_Init+0x180>
 800080a:	2302      	movs	r3, #2
 800080c:	e002      	b.n	8000814 <GPIO_Init+0x180>
 800080e:	2301      	movs	r3, #1
 8000810:	e000      	b.n	8000814 <GPIO_Init+0x180>
 8000812:	2300      	movs	r3, #0
 8000814:	747b      	strb	r3, [r7, #17]
		index = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	791b      	ldrb	r3, [r3, #4]
 800081a:	089b      	lsrs	r3, r3, #2
 800081c:	74fb      	strb	r3, [r7, #19]
		pos = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	791b      	ldrb	r3, [r3, #4]
 8000822:	f003 0303 	and.w	r3, r3, #3
 8000826:	74bb      	strb	r3, [r7, #18]

		SYSCFG->EXTICR[index] |= (portcode << (4 * pos));
 8000828:	4a48      	ldr	r2, [pc, #288]	; (800094c <GPIO_Init+0x2b8>)
 800082a:	7cfb      	ldrb	r3, [r7, #19]
 800082c:	3302      	adds	r3, #2
 800082e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000832:	7c79      	ldrb	r1, [r7, #17]
 8000834:	7cbb      	ldrb	r3, [r7, #18]
 8000836:	009b      	lsls	r3, r3, #2
 8000838:	fa01 f303 	lsl.w	r3, r1, r3
 800083c:	4618      	mov	r0, r3
 800083e:	4943      	ldr	r1, [pc, #268]	; (800094c <GPIO_Init+0x2b8>)
 8000840:	7cfb      	ldrb	r3, [r7, #19]
 8000842:	4302      	orrs	r2, r0
 8000844:	3302      	adds	r3, #2
 8000846:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


		//Enable the GPIO peripheral interrupt
		EXTI->IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800084a:	4b35      	ldr	r3, [pc, #212]	; (8000920 <GPIO_Init+0x28c>)
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	687a      	ldr	r2, [r7, #4]
 8000850:	7912      	ldrb	r2, [r2, #4]
 8000852:	4611      	mov	r1, r2
 8000854:	2201      	movs	r2, #1
 8000856:	408a      	lsls	r2, r1
 8000858:	4611      	mov	r1, r2
 800085a:	4a31      	ldr	r2, [pc, #196]	; (8000920 <GPIO_Init+0x28c>)
 800085c:	430b      	orrs	r3, r1
 800085e:	6013      	str	r3, [r2, #0]
	}

	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 *pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	799b      	ldrb	r3, [r3, #6]
 8000864:	461a      	mov	r2, r3
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	791b      	ldrb	r3, [r3, #4]
 800086a:	005b      	lsls	r3, r3, #1
 800086c:	fa02 f303 	lsl.w	r3, r2, r3
 8000870:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	6899      	ldr	r1, [r3, #8]
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	697a      	ldr	r2, [r7, #20]
 800087e:	430a      	orrs	r2, r1
 8000880:	609a      	str	r2, [r3, #8]
	temp = 0;
 8000882:	2300      	movs	r3, #0
 8000884:	617b      	str	r3, [r7, #20]

	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	7a1b      	ldrb	r3, [r3, #8]
 800088a:	461a      	mov	r2, r3
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	791b      	ldrb	r3, [r3, #4]
 8000890:	fa02 f303 	lsl.w	r3, r2, r3
 8000894:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	6859      	ldr	r1, [r3, #4]
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	697a      	ldr	r2, [r7, #20]
 80008a2:	430a      	orrs	r2, r1
 80008a4:	605a      	str	r2, [r3, #4]
	temp = 0;
 80008a6:	2300      	movs	r3, #0
 80008a8:	617b      	str	r3, [r7, #20]

	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 *pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	79db      	ldrb	r3, [r3, #7]
 80008ae:	461a      	mov	r2, r3
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	791b      	ldrb	r3, [r3, #4]
 80008b4:	005b      	lsls	r3, r3, #1
 80008b6:	fa02 f303 	lsl.w	r3, r2, r3
 80008ba:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	68d9      	ldr	r1, [r3, #12]
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	697a      	ldr	r2, [r7, #20]
 80008c8:	430a      	orrs	r2, r1
 80008ca:	60da      	str	r2, [r3, #12]
	temp = 0;
 80008cc:	2300      	movs	r3, #0
 80008ce:	617b      	str	r3, [r7, #20]

	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	795b      	ldrb	r3, [r3, #5]
 80008d4:	2b02      	cmp	r3, #2
 80008d6:	d11f      	bne.n	8000918 <GPIO_Init+0x284>
	{
		uint8_t Reg_index = (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) / 8;
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	791b      	ldrb	r3, [r3, #4]
 80008dc:	08db      	lsrs	r3, r3, #3
 80008de:	743b      	strb	r3, [r7, #16]
		uint8_t Bit_pos	= (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) % 8;
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	791b      	ldrb	r3, [r3, #4]
 80008e4:	f003 0307 	and.w	r3, r3, #7
 80008e8:	73fb      	strb	r3, [r7, #15]

		temp = pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode;
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	7a5b      	ldrb	r3, [r3, #9]
 80008ee:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->AFR[Reg_index] |= (temp << (4 * Bit_pos) );
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	7c3a      	ldrb	r2, [r7, #16]
 80008f6:	3208      	adds	r2, #8
 80008f8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80008fc:	7bfb      	ldrb	r3, [r7, #15]
 80008fe:	009b      	lsls	r3, r3, #2
 8000900:	697a      	ldr	r2, [r7, #20]
 8000902:	fa02 f103 	lsl.w	r1, r2, r3
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	7c3a      	ldrb	r2, [r7, #16]
 800090c:	4301      	orrs	r1, r0
 800090e:	3208      	adds	r2, #8
 8000910:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		temp = 0;
 8000914:	2300      	movs	r3, #0
 8000916:	617b      	str	r3, [r7, #20]
	}

}
 8000918:	bf00      	nop
 800091a:	3718      	adds	r7, #24
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}
 8000920:	40013c00 	.word	0x40013c00
 8000924:	40023800 	.word	0x40023800
 8000928:	40020000 	.word	0x40020000
 800092c:	40020400 	.word	0x40020400
 8000930:	40020800 	.word	0x40020800
 8000934:	40020c00 	.word	0x40020c00
 8000938:	40021000 	.word	0x40021000
 800093c:	40021400 	.word	0x40021400
 8000940:	40021800 	.word	0x40021800
 8000944:	40021c00 	.word	0x40021c00
 8000948:	40022000 	.word	0x40022000
 800094c:	40013800 	.word	0x40013800

08000950 <GPIO_ReadFromInputPin>:

/*
 * GPIO write and read from Pin and Port
 */
uint8_t GPIO_ReadFromInputPin(GPIOx_RegDef_t *pGPIOx,uint16_t PinNumber)
{
 8000950:	b480      	push	{r7}
 8000952:	b085      	sub	sp, #20
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
 8000958:	460b      	mov	r3, r1
 800095a:	807b      	strh	r3, [r7, #2]
	uint8_t status = 0;
 800095c:	2300      	movs	r3, #0
 800095e:	73fb      	strb	r3, [r7, #15]
	status = (((pGPIOx->IDR) >> PinNumber) & 0x1);
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	691a      	ldr	r2, [r3, #16]
 8000964:	887b      	ldrh	r3, [r7, #2]
 8000966:	fa22 f303 	lsr.w	r3, r2, r3
 800096a:	b2db      	uxtb	r3, r3
 800096c:	f003 0301 	and.w	r3, r3, #1
 8000970:	73fb      	strb	r3, [r7, #15]
	return status;
 8000972:	7bfb      	ldrb	r3, [r7, #15]
}
 8000974:	4618      	mov	r0, r3
 8000976:	3714      	adds	r7, #20
 8000978:	46bd      	mov	sp, r7
 800097a:	bc80      	pop	{r7}
 800097c:	4770      	bx	lr
	...

08000980 <I2C_PeriClock_Control>:

/*
 * Peripheral clock enable or disable API
 */
void I2C_PeriClock_Control(I2C_RegDef_t *pI2Cx,uint8_t EnorDi)
{
 8000980:	b480      	push	{r7}
 8000982:	b083      	sub	sp, #12
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
 8000988:	460b      	mov	r3, r1
 800098a:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 800098c:	78fb      	ldrb	r3, [r7, #3]
 800098e:	2b01      	cmp	r3, #1
 8000990:	d120      	bne.n	80009d4 <I2C_PeriClock_Control+0x54>
	{
		if(pI2Cx == I2C1)
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	4a22      	ldr	r2, [pc, #136]	; (8000a20 <I2C_PeriClock_Control+0xa0>)
 8000996:	4293      	cmp	r3, r2
 8000998:	d106      	bne.n	80009a8 <I2C_PeriClock_Control+0x28>
		{
			I2C1_PCLK_EN();
 800099a:	4b22      	ldr	r3, [pc, #136]	; (8000a24 <I2C_PeriClock_Control+0xa4>)
 800099c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800099e:	4a21      	ldr	r2, [pc, #132]	; (8000a24 <I2C_PeriClock_Control+0xa4>)
 80009a0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80009a4:	6413      	str	r3, [r2, #64]	; 0x40
		else if(pI2Cx == I2C3)
		{
			I2C3_PCLK_DI();
		}
	}
}
 80009a6:	e035      	b.n	8000a14 <I2C_PeriClock_Control+0x94>
		else if(pI2Cx == I2C2)
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	4a1f      	ldr	r2, [pc, #124]	; (8000a28 <I2C_PeriClock_Control+0xa8>)
 80009ac:	4293      	cmp	r3, r2
 80009ae:	d106      	bne.n	80009be <I2C_PeriClock_Control+0x3e>
			I2C2_PCLK_EN();
 80009b0:	4b1c      	ldr	r3, [pc, #112]	; (8000a24 <I2C_PeriClock_Control+0xa4>)
 80009b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009b4:	4a1b      	ldr	r2, [pc, #108]	; (8000a24 <I2C_PeriClock_Control+0xa4>)
 80009b6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80009ba:	6413      	str	r3, [r2, #64]	; 0x40
}
 80009bc:	e02a      	b.n	8000a14 <I2C_PeriClock_Control+0x94>
		else if(pI2Cx == I2C3)
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	4a1a      	ldr	r2, [pc, #104]	; (8000a2c <I2C_PeriClock_Control+0xac>)
 80009c2:	4293      	cmp	r3, r2
 80009c4:	d126      	bne.n	8000a14 <I2C_PeriClock_Control+0x94>
			I2C3_PCLK_EN();
 80009c6:	4b17      	ldr	r3, [pc, #92]	; (8000a24 <I2C_PeriClock_Control+0xa4>)
 80009c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ca:	4a16      	ldr	r2, [pc, #88]	; (8000a24 <I2C_PeriClock_Control+0xa4>)
 80009cc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80009d0:	6413      	str	r3, [r2, #64]	; 0x40
}
 80009d2:	e01f      	b.n	8000a14 <I2C_PeriClock_Control+0x94>
		if(pI2Cx == I2C1)
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	4a12      	ldr	r2, [pc, #72]	; (8000a20 <I2C_PeriClock_Control+0xa0>)
 80009d8:	4293      	cmp	r3, r2
 80009da:	d106      	bne.n	80009ea <I2C_PeriClock_Control+0x6a>
			I2C1_PCLK_DI();
 80009dc:	4b11      	ldr	r3, [pc, #68]	; (8000a24 <I2C_PeriClock_Control+0xa4>)
 80009de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e0:	4a10      	ldr	r2, [pc, #64]	; (8000a24 <I2C_PeriClock_Control+0xa4>)
 80009e2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80009e6:	6413      	str	r3, [r2, #64]	; 0x40
}
 80009e8:	e014      	b.n	8000a14 <I2C_PeriClock_Control+0x94>
		else if(pI2Cx == I2C2)
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	4a0e      	ldr	r2, [pc, #56]	; (8000a28 <I2C_PeriClock_Control+0xa8>)
 80009ee:	4293      	cmp	r3, r2
 80009f0:	d106      	bne.n	8000a00 <I2C_PeriClock_Control+0x80>
			I2C2_PCLK_DI();
 80009f2:	4b0c      	ldr	r3, [pc, #48]	; (8000a24 <I2C_PeriClock_Control+0xa4>)
 80009f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f6:	4a0b      	ldr	r2, [pc, #44]	; (8000a24 <I2C_PeriClock_Control+0xa4>)
 80009f8:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80009fc:	6413      	str	r3, [r2, #64]	; 0x40
}
 80009fe:	e009      	b.n	8000a14 <I2C_PeriClock_Control+0x94>
		else if(pI2Cx == I2C3)
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	4a0a      	ldr	r2, [pc, #40]	; (8000a2c <I2C_PeriClock_Control+0xac>)
 8000a04:	4293      	cmp	r3, r2
 8000a06:	d105      	bne.n	8000a14 <I2C_PeriClock_Control+0x94>
			I2C3_PCLK_DI();
 8000a08:	4b06      	ldr	r3, [pc, #24]	; (8000a24 <I2C_PeriClock_Control+0xa4>)
 8000a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a0c:	4a05      	ldr	r2, [pc, #20]	; (8000a24 <I2C_PeriClock_Control+0xa4>)
 8000a0e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000a12:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000a14:	bf00      	nop
 8000a16:	370c      	adds	r7, #12
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bc80      	pop	{r7}
 8000a1c:	4770      	bx	lr
 8000a1e:	bf00      	nop
 8000a20:	40005400 	.word	0x40005400
 8000a24:	40023800 	.word	0x40023800
 8000a28:	40005800 	.word	0x40005800
 8000a2c:	40005c00 	.word	0x40005c00

08000a30 <GetPLLClockOutput>:

uint32_t GetPLLClockOutput(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
	//TODO
}
 8000a34:	bf00      	nop
 8000a36:	4618      	mov	r0, r3
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bc80      	pop	{r7}
 8000a3c:	4770      	bx	lr
	...

08000a40 <GetPCLKValue>:

uint16_t AHB_Prescalar[] = {2,4,8,16,32,64,128,256,512};
uint8_t APB1_Prescalar[] = {2,4,8,16};
uint32_t GetPCLKValue(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b084      	sub	sp, #16
 8000a44:	af00      	add	r7, sp, #0
	uint32_t SystemClock = 0;
 8000a46:	2300      	movs	r3, #0
 8000a48:	60fb      	str	r3, [r7, #12]
	uint32_t PCLK = 0;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	607b      	str	r3, [r7, #4]
	uint8_t ClockSource = 0;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	70fb      	strb	r3, [r7, #3]
	uint8_t AHBprescalarIndex = 0;
 8000a52:	2300      	movs	r3, #0
 8000a54:	70bb      	strb	r3, [r7, #2]
	uint8_t APB1prescalarIndex = 0;
 8000a56:	2300      	movs	r3, #0
 8000a58:	707b      	strb	r3, [r7, #1]
	uint16_t AHBPrescValue = 0;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	817b      	strh	r3, [r7, #10]
	uint8_t APB1PrescValue = 0;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	727b      	strb	r3, [r7, #9]

	ClockSource = (RCC->CFGR >> 2) & 0x03;
 8000a62:	4b25      	ldr	r3, [pc, #148]	; (8000af8 <GetPCLKValue+0xb8>)
 8000a64:	689b      	ldr	r3, [r3, #8]
 8000a66:	089b      	lsrs	r3, r3, #2
 8000a68:	b2db      	uxtb	r3, r3
 8000a6a:	f003 0303 	and.w	r3, r3, #3
 8000a6e:	70fb      	strb	r3, [r7, #3]

	if( ClockSource == 0)
 8000a70:	78fb      	ldrb	r3, [r7, #3]
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d102      	bne.n	8000a7c <GetPCLKValue+0x3c>
	{
		//HSI
		SystemClock = 16000000;
 8000a76:	4b21      	ldr	r3, [pc, #132]	; (8000afc <GetPCLKValue+0xbc>)
 8000a78:	60fb      	str	r3, [r7, #12]
 8000a7a:	e00b      	b.n	8000a94 <GetPCLKValue+0x54>
	}
	else if( ClockSource == 1)
 8000a7c:	78fb      	ldrb	r3, [r7, #3]
 8000a7e:	2b01      	cmp	r3, #1
 8000a80:	d102      	bne.n	8000a88 <GetPCLKValue+0x48>
	{
		//HSE
		SystemClock = 8000000;
 8000a82:	4b1f      	ldr	r3, [pc, #124]	; (8000b00 <GetPCLKValue+0xc0>)
 8000a84:	60fb      	str	r3, [r7, #12]
 8000a86:	e005      	b.n	8000a94 <GetPCLKValue+0x54>
	}
	else if( ClockSource == 2)
 8000a88:	78fb      	ldrb	r3, [r7, #3]
 8000a8a:	2b02      	cmp	r3, #2
 8000a8c:	d102      	bne.n	8000a94 <GetPCLKValue+0x54>
	{
		//PLL
		SystemClock = GetPLLClockOutput();
 8000a8e:	f7ff ffcf 	bl	8000a30 <GetPLLClockOutput>
 8000a92:	60f8      	str	r0, [r7, #12]
	}

	AHBprescalarIndex = (RCC->CFGR >> 4) & 0xF;
 8000a94:	4b18      	ldr	r3, [pc, #96]	; (8000af8 <GetPCLKValue+0xb8>)
 8000a96:	689b      	ldr	r3, [r3, #8]
 8000a98:	091b      	lsrs	r3, r3, #4
 8000a9a:	b2db      	uxtb	r3, r3
 8000a9c:	f003 030f 	and.w	r3, r3, #15
 8000aa0:	70bb      	strb	r3, [r7, #2]
	if(AHBprescalarIndex == 0)
 8000aa2:	78bb      	ldrb	r3, [r7, #2]
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d102      	bne.n	8000aae <GetPCLKValue+0x6e>
	{
		AHBPrescValue = 1;
 8000aa8:	2301      	movs	r3, #1
 8000aaa:	817b      	strh	r3, [r7, #10]
 8000aac:	e005      	b.n	8000aba <GetPCLKValue+0x7a>
	}
	else
	{
		AHBPrescValue = AHB_Prescalar[AHBprescalarIndex - 8];
 8000aae:	78bb      	ldrb	r3, [r7, #2]
 8000ab0:	3b08      	subs	r3, #8
 8000ab2:	4a14      	ldr	r2, [pc, #80]	; (8000b04 <GetPCLKValue+0xc4>)
 8000ab4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ab8:	817b      	strh	r3, [r7, #10]
	}

	APB1prescalarIndex = (RCC->CFGR >> 10) & 0x7;
 8000aba:	4b0f      	ldr	r3, [pc, #60]	; (8000af8 <GetPCLKValue+0xb8>)
 8000abc:	689b      	ldr	r3, [r3, #8]
 8000abe:	0a9b      	lsrs	r3, r3, #10
 8000ac0:	b2db      	uxtb	r3, r3
 8000ac2:	f003 0307 	and.w	r3, r3, #7
 8000ac6:	707b      	strb	r3, [r7, #1]
	if(APB1prescalarIndex == 0)
 8000ac8:	787b      	ldrb	r3, [r7, #1]
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d102      	bne.n	8000ad4 <GetPCLKValue+0x94>
	{
		APB1PrescValue = 1;
 8000ace:	2301      	movs	r3, #1
 8000ad0:	727b      	strb	r3, [r7, #9]
 8000ad2:	e004      	b.n	8000ade <GetPCLKValue+0x9e>
	}
	else
	{
		APB1PrescValue = APB1_Prescalar[APB1prescalarIndex - 4];
 8000ad4:	787b      	ldrb	r3, [r7, #1]
 8000ad6:	3b04      	subs	r3, #4
 8000ad8:	4a0b      	ldr	r2, [pc, #44]	; (8000b08 <GetPCLKValue+0xc8>)
 8000ada:	5cd3      	ldrb	r3, [r2, r3]
 8000adc:	727b      	strb	r3, [r7, #9]
	}

	PCLK = ((SystemClock / AHBPrescValue) / APB1PrescValue) ;
 8000ade:	897b      	ldrh	r3, [r7, #10]
 8000ae0:	68fa      	ldr	r2, [r7, #12]
 8000ae2:	fbb2 f2f3 	udiv	r2, r2, r3
 8000ae6:	7a7b      	ldrb	r3, [r7, #9]
 8000ae8:	fbb2 f3f3 	udiv	r3, r2, r3
 8000aec:	607b      	str	r3, [r7, #4]

	return PCLK;
 8000aee:	687b      	ldr	r3, [r7, #4]

}
 8000af0:	4618      	mov	r0, r3
 8000af2:	3710      	adds	r7, #16
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	40023800 	.word	0x40023800
 8000afc:	00f42400 	.word	0x00f42400
 8000b00:	007a1200 	.word	0x007a1200
 8000b04:	20000000 	.word	0x20000000
 8000b08:	20000014 	.word	0x20000014

08000b0c <I2C_Init>:

/*
 * I2Cx init and De-init function
 */
void I2C_Init(I2C_Handle_t *pI2CHandle)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b084      	sub	sp, #16
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
	uint32_t tempreg = 0;
 8000b14:	2300      	movs	r3, #0
 8000b16:	60fb      	str	r3, [r7, #12]
	uint32_t APBCLK = 0;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	60bb      	str	r3, [r7, #8]

	I2C_PeriClock_Control(pI2CHandle->pI2Cx, ENABLE);
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	2101      	movs	r1, #1
 8000b22:	4618      	mov	r0, r3
 8000b24:	f7ff ff2c 	bl	8000980 <I2C_PeriClock_Control>

	//Enable the automatic ACKing in I2C hardware
	tempreg |= (pI2CHandle->pI2C_Config.I2C_ACKCtrl << I2C_CR1_ACK);
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	7a5b      	ldrb	r3, [r3, #9]
 8000b2c:	029b      	lsls	r3, r3, #10
 8000b2e:	461a      	mov	r2, r3
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	4313      	orrs	r3, r2
 8000b34:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->CR1 |= tempreg;
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	6819      	ldr	r1, [r3, #0]
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	68fa      	ldr	r2, [r7, #12]
 8000b42:	430a      	orrs	r2, r1
 8000b44:	601a      	str	r2, [r3, #0]
	tempreg = 0;
 8000b46:	2300      	movs	r3, #0
 8000b48:	60fb      	str	r3, [r7, #12]

	//Configure the OWN address , this will be used when I2C act as slave
	tempreg |= (pI2CHandle->pI2C_Config.I2C_DeviceAddr << 1);
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	7a1b      	ldrb	r3, [r3, #8]
 8000b4e:	005b      	lsls	r3, r3, #1
 8000b50:	461a      	mov	r2, r3
 8000b52:	68fb      	ldr	r3, [r7, #12]
 8000b54:	4313      	orrs	r3, r2
 8000b56:	60fb      	str	r3, [r7, #12]
	tempreg |= (1 << 14);//this is reserved bit and set as per RM
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b5e:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->OAR1 |= tempreg;
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	6899      	ldr	r1, [r3, #8]
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	68fa      	ldr	r2, [r7, #12]
 8000b6c:	430a      	orrs	r2, r1
 8000b6e:	609a      	str	r2, [r3, #8]
	tempreg = 0;
 8000b70:	2300      	movs	r3, #0
 8000b72:	60fb      	str	r3, [r7, #12]

	APBCLK = GetPCLKValue() / 1000000U; //16000000/1000000 =>16
 8000b74:	f7ff ff64 	bl	8000a40 <GetPCLKValue>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	4a44      	ldr	r2, [pc, #272]	; (8000c8c <I2C_Init+0x180>)
 8000b7c:	fba2 2303 	umull	r2, r3, r2, r3
 8000b80:	0c9b      	lsrs	r3, r3, #18
 8000b82:	60bb      	str	r3, [r7, #8]

	if(APBCLK <= 1)
 8000b84:	68bb      	ldr	r3, [r7, #8]
 8000b86:	2b01      	cmp	r3, #1
 8000b88:	d801      	bhi.n	8000b8e <I2C_Init+0x82>
	{
		APBCLK = 2;
 8000b8a:	2302      	movs	r3, #2
 8000b8c:	60bb      	str	r3, [r7, #8]
	}
	//Configure the I2C frequency
	pI2CHandle->pI2Cx->CR2 = (APBCLK & 0x3F);
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	68ba      	ldr	r2, [r7, #8]
 8000b94:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000b98:	605a      	str	r2, [r3, #4]


	if(pI2CHandle->pI2C_Config.I2C_SCLSpeed <= I2C_SPEED_STD_MODE)
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	685b      	ldr	r3, [r3, #4]
 8000b9e:	4a3c      	ldr	r2, [pc, #240]	; (8000c90 <I2C_Init+0x184>)
 8000ba0:	4293      	cmp	r3, r2
 8000ba2:	d80b      	bhi.n	8000bbc <I2C_Init+0xb0>

		//Sm mode or SMBus:
		//Thigh = CCR * TPCLK1
		//Tlow = CCR * TPCLK1

		tempreg |= (GetPCLKValue() / (2 * pI2CHandle->pI2C_Config.I2C_SCLSpeed));
 8000ba4:	f7ff ff4c 	bl	8000a40 <GetPCLKValue>
 8000ba8:	4602      	mov	r2, r0
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	685b      	ldr	r3, [r3, #4]
 8000bae:	005b      	lsls	r3, r3, #1
 8000bb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bb4:	68fa      	ldr	r2, [r7, #12]
 8000bb6:	4313      	orrs	r3, r2
 8000bb8:	60fb      	str	r3, [r7, #12]
 8000bba:	e02b      	b.n	8000c14 <I2C_Init+0x108>
	}
	else
	{
		//Fast mode
		tempreg |= (1 << I2C_CCR_FS);
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000bc2:	60fb      	str	r3, [r7, #12]
		//Configure duty cycle
		tempreg |= (pI2CHandle->pI2C_Config.I2C_FMDutyCycle << I2C_CCR_DUTY);
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	895b      	ldrh	r3, [r3, #10]
 8000bc8:	039b      	lsls	r3, r3, #14
 8000bca:	461a      	mov	r2, r3
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	4313      	orrs	r3, r2
 8000bd0:	60fb      	str	r3, [r7, #12]
		//Duty = 0
		if(pI2CHandle->pI2C_Config.I2C_FMDutyCycle == I2C_FM_DUTY_2)
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	895b      	ldrh	r3, [r3, #10]
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d10d      	bne.n	8000bf6 <I2C_Init+0xea>
			//If DUTY = 0:
			//Thigh = CCR * TPCLK1
			//Tlow = 2 * CCR * TPCLK1
			//Tlow = 2 * Thigh

			tempreg |= (GetPCLKValue() / (3 * pI2CHandle->pI2C_Config.I2C_SCLSpeed));
 8000bda:	f7ff ff31 	bl	8000a40 <GetPCLKValue>
 8000bde:	4601      	mov	r1, r0
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	685a      	ldr	r2, [r3, #4]
 8000be4:	4613      	mov	r3, r2
 8000be6:	005b      	lsls	r3, r3, #1
 8000be8:	4413      	add	r3, r2
 8000bea:	fbb1 f3f3 	udiv	r3, r1, r3
 8000bee:	68fa      	ldr	r2, [r7, #12]
 8000bf0:	4313      	orrs	r3, r2
 8000bf2:	60fb      	str	r3, [r7, #12]
 8000bf4:	e00e      	b.n	8000c14 <I2C_Init+0x108>
		{
			//Duty = 1
			//If DUTY = 1: (to reach 400 kHz)
			//Thigh = 9 * CCR * TPCLK1
			//Tlow = 16 * CCR * TPCLK1
			tempreg |= (GetPCLKValue() / (25 * pI2CHandle->pI2C_Config.I2C_SCLSpeed));
 8000bf6:	f7ff ff23 	bl	8000a40 <GetPCLKValue>
 8000bfa:	4601      	mov	r1, r0
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	685a      	ldr	r2, [r3, #4]
 8000c00:	4613      	mov	r3, r2
 8000c02:	009b      	lsls	r3, r3, #2
 8000c04:	4413      	add	r3, r2
 8000c06:	009a      	lsls	r2, r3, #2
 8000c08:	4413      	add	r3, r2
 8000c0a:	fbb1 f3f3 	udiv	r3, r1, r3
 8000c0e:	68fa      	ldr	r2, [r7, #12]
 8000c10:	4313      	orrs	r3, r2
 8000c12:	60fb      	str	r3, [r7, #12]
		}
	}
	pI2CHandle->pI2Cx->CCR |= (tempreg & 0xFFF);
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	69d9      	ldr	r1, [r3, #28]
 8000c1a:	68fb      	ldr	r3, [r7, #12]
 8000c1c:	f3c3 020b 	ubfx	r2, r3, #0, #12
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	430a      	orrs	r2, r1
 8000c26:	61da      	str	r2, [r3, #28]
	tempreg = 0;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	60fb      	str	r3, [r7, #12]

	//Configure the Trise value
	if(pI2CHandle->pI2C_Config.I2C_SCLSpeed <= I2C_SPEED_STD_MODE)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	685b      	ldr	r3, [r3, #4]
 8000c30:	4a17      	ldr	r2, [pc, #92]	; (8000c90 <I2C_Init+0x184>)
 8000c32:	4293      	cmp	r3, r2
 8000c34:	d80b      	bhi.n	8000c4e <I2C_Init+0x142>
	{
		// Standard mode as per I2C spec trise for SM is 1000ns
		tempreg |= ((GetPCLKValue() * 1) / 1000000U)  + 1;
 8000c36:	f7ff ff03 	bl	8000a40 <GetPCLKValue>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	4a13      	ldr	r2, [pc, #76]	; (8000c8c <I2C_Init+0x180>)
 8000c3e:	fba2 2303 	umull	r2, r3, r2, r3
 8000c42:	0c9b      	lsrs	r3, r3, #18
 8000c44:	3301      	adds	r3, #1
 8000c46:	68fa      	ldr	r2, [r7, #12]
 8000c48:	4313      	orrs	r3, r2
 8000c4a:	60fb      	str	r3, [r7, #12]
 8000c4c:	e00f      	b.n	8000c6e <I2C_Init+0x162>
	}
	else
	{
		//fast mode as per I2C spec trise is 300ns
		tempreg |= ((GetPCLKValue() * 300) / 1000000000U)  + 1;
 8000c4e:	f7ff fef7 	bl	8000a40 <GetPCLKValue>
 8000c52:	4603      	mov	r3, r0
 8000c54:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000c58:	fb02 f303 	mul.w	r3, r2, r3
 8000c5c:	0a5b      	lsrs	r3, r3, #9
 8000c5e:	4a0d      	ldr	r2, [pc, #52]	; (8000c94 <I2C_Init+0x188>)
 8000c60:	fba2 2303 	umull	r2, r3, r2, r3
 8000c64:	09db      	lsrs	r3, r3, #7
 8000c66:	3301      	adds	r3, #1
 8000c68:	68fa      	ldr	r2, [r7, #12]
 8000c6a:	4313      	orrs	r3, r2
 8000c6c:	60fb      	str	r3, [r7, #12]
	}

	pI2CHandle->pI2Cx->TRISE |= (tempreg & 0x3F);
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	6a19      	ldr	r1, [r3, #32]
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	430a      	orrs	r2, r1
 8000c80:	621a      	str	r2, [r3, #32]
}
 8000c82:	bf00      	nop
 8000c84:	3710      	adds	r7, #16
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	431bde83 	.word	0x431bde83
 8000c90:	000186a0 	.word	0x000186a0
 8000c94:	00044b83 	.word	0x00044b83

08000c98 <I2C_MasterSenddataIT>:
	}

}

I2C_State_e I2C_MasterSenddataIT(I2C_Handle_t *pI2CHandle,uint8_t *pTxBuffer,uint32_t Len, uint8_t SlaveAddress,uint8_t RepeatedStart)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b086      	sub	sp, #24
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	60f8      	str	r0, [r7, #12]
 8000ca0:	60b9      	str	r1, [r7, #8]
 8000ca2:	607a      	str	r2, [r7, #4]
 8000ca4:	70fb      	strb	r3, [r7, #3]
	I2C_State_e state = pI2CHandle->TxRxState;
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	7f1b      	ldrb	r3, [r3, #28]
 8000caa:	75fb      	strb	r3, [r7, #23]

	if( (state != I2C_STATE_BUSY_IN_TX) && (state != I2C_STATE_BUSY_IN_RX))
 8000cac:	7dfb      	ldrb	r3, [r7, #23]
 8000cae:	2b01      	cmp	r3, #1
 8000cb0:	d030      	beq.n	8000d14 <I2C_MasterSenddataIT+0x7c>
 8000cb2:	7dfb      	ldrb	r3, [r7, #23]
 8000cb4:	2b02      	cmp	r3, #2
 8000cb6:	d02d      	beq.n	8000d14 <I2C_MasterSenddataIT+0x7c>
	{
		pI2CHandle->pTxBuffer = pTxBuffer ;
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	68ba      	ldr	r2, [r7, #8]
 8000cbc:	60da      	str	r2, [r3, #12]
		pI2CHandle->TxLen = Len;
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	687a      	ldr	r2, [r7, #4]
 8000cc2:	615a      	str	r2, [r3, #20]
		pI2CHandle->TxRxState = I2C_STATE_BUSY_IN_TX;
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	771a      	strb	r2, [r3, #28]
		pI2CHandle->Device_Addr = SlaveAddress;
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	78fa      	ldrb	r2, [r7, #3]
 8000cce:	775a      	strb	r2, [r3, #29]
		pI2CHandle->Repeated_Start = RepeatedStart;
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000cd6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		//Generate the start condition
		I2C_StartCondition(pI2CHandle->pI2Cx);
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f000 fa9c 	bl	800121c <I2C_StartCondition>


		//Enable ITBUFEN Control Bit
		pI2CHandle->pI2Cx->CR2 |= ( 1 << I2C_CR2_ITBUFEN);
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	685a      	ldr	r2, [r3, #4]
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000cf2:	605a      	str	r2, [r3, #4]

		//Enable ITEVFEN Control Bit
		pI2CHandle->pI2Cx->CR2 |= ( 1 << I2C_CR2_ITEVTEN);
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	685a      	ldr	r2, [r3, #4]
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000d02:	605a      	str	r2, [r3, #4]

		//Enable ITERREN Control Bit
		pI2CHandle->pI2Cx->CR2 |= ( 1 << I2C_CR2_ITERREN);
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	685a      	ldr	r2, [r3, #4]
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000d12:	605a      	str	r2, [r3, #4]

	}

	return state;
 8000d14:	7dfb      	ldrb	r3, [r7, #23]
}
 8000d16:	4618      	mov	r0, r3
 8000d18:	3718      	adds	r7, #24
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}

08000d1e <I2C_MasterReceivedataIT>:


I2C_State_e I2C_MasterReceivedataIT(I2C_Handle_t *pI2CHandle,uint8_t *pRxBuffer,uint32_t Len, uint8_t SlaveAddress,uint8_t RepeatedStart)
{
 8000d1e:	b580      	push	{r7, lr}
 8000d20:	b086      	sub	sp, #24
 8000d22:	af00      	add	r7, sp, #0
 8000d24:	60f8      	str	r0, [r7, #12]
 8000d26:	60b9      	str	r1, [r7, #8]
 8000d28:	607a      	str	r2, [r7, #4]
 8000d2a:	70fb      	strb	r3, [r7, #3]
	I2C_State_e state = pI2CHandle->TxRxState;
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	7f1b      	ldrb	r3, [r3, #28]
 8000d30:	75fb      	strb	r3, [r7, #23]

	if( (state != I2C_STATE_BUSY_IN_TX) && (state != I2C_STATE_BUSY_IN_RX))
 8000d32:	7dfb      	ldrb	r3, [r7, #23]
 8000d34:	2b01      	cmp	r3, #1
 8000d36:	d033      	beq.n	8000da0 <I2C_MasterReceivedataIT+0x82>
 8000d38:	7dfb      	ldrb	r3, [r7, #23]
 8000d3a:	2b02      	cmp	r3, #2
 8000d3c:	d030      	beq.n	8000da0 <I2C_MasterReceivedataIT+0x82>
	{
		pI2CHandle->pRxBuffer = pRxBuffer ;
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	68ba      	ldr	r2, [r7, #8]
 8000d42:	611a      	str	r2, [r3, #16]
		pI2CHandle->RxLen = Len;
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	687a      	ldr	r2, [r7, #4]
 8000d48:	619a      	str	r2, [r3, #24]
		pI2CHandle->TxRxState = I2C_STATE_BUSY_IN_RX;
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	2202      	movs	r2, #2
 8000d4e:	771a      	strb	r2, [r3, #28]
		pI2CHandle->RxSize = Len;
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	687a      	ldr	r2, [r7, #4]
 8000d54:	621a      	str	r2, [r3, #32]
		pI2CHandle->Device_Addr = SlaveAddress;
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	78fa      	ldrb	r2, [r7, #3]
 8000d5a:	775a      	strb	r2, [r3, #29]
		pI2CHandle->Repeated_Start = RepeatedStart;
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000d62:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

		//Generate the start condition
		I2C_StartCondition(pI2CHandle->pI2Cx);
 8000d66:	68fb      	ldr	r3, [r7, #12]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f000 fa56 	bl	800121c <I2C_StartCondition>


		//Enable ITBUFEN Control Bit
		pI2CHandle->pI2Cx->CR2 |= ( 1 << I2C_CR2_ITBUFEN);
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	685a      	ldr	r2, [r3, #4]
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000d7e:	605a      	str	r2, [r3, #4]

		//Enable ITEVFEN Control Bit
		pI2CHandle->pI2Cx->CR2 |= ( 1 << I2C_CR2_ITEVTEN);
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	685a      	ldr	r2, [r3, #4]
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000d8e:	605a      	str	r2, [r3, #4]

		//Enable ITERREN Control Bit
		pI2CHandle->pI2Cx->CR2 |= ( 1 << I2C_CR2_ITERREN);
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	685a      	ldr	r2, [r3, #4]
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000d9e:	605a      	str	r2, [r3, #4]

	}

	return state;
 8000da0:	7dfb      	ldrb	r3, [r7, #23]
}
 8000da2:	4618      	mov	r0, r3
 8000da4:	3718      	adds	r7, #24
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}

08000daa <I2C_Event_IRQHandling>:



void I2C_Event_IRQHandling(I2C_Handle_t *pI2CHandle)
{
 8000daa:	b580      	push	{r7, lr}
 8000dac:	b086      	sub	sp, #24
 8000dae:	af00      	add	r7, sp, #0
 8000db0:	6078      	str	r0, [r7, #4]
	uint32_t temp1, temp2 , temp3 = 0;
 8000db2:	2300      	movs	r3, #0
 8000db4:	617b      	str	r3, [r7, #20]

	//Read the I2C interrupt I2C_CR2_ITEVTEN for Start , stop , ADDR event
	temp1 = (pI2CHandle->pI2Cx->CR2 & (1 << I2C_CR2_ITEVTEN)) ;
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	685b      	ldr	r3, [r3, #4]
 8000dbc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000dc0:	613b      	str	r3, [r7, #16]

	//Read the I2C interrupt I2C_CR2_ITBUFEN for TXE and RXNE
	temp2 = (pI2CHandle->pI2Cx->CR2   & (1 <<  I2C_CR2_ITBUFEN));
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	685b      	ldr	r3, [r3, #4]
 8000dc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000dcc:	60fb      	str	r3, [r7, #12]

	//Read the I2C status register for SB
	temp3 = (pI2CHandle->pI2Cx->SR1  & (1 <<  I2C_SR1_SB));
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	695b      	ldr	r3, [r3, #20]
 8000dd4:	f003 0301 	and.w	r3, r3, #1
 8000dd8:	617b      	str	r3, [r7, #20]
	if(temp3 && temp1)
 8000dda:	697b      	ldr	r3, [r7, #20]
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d01b      	beq.n	8000e18 <I2C_Event_IRQHandling+0x6e>
 8000de0:	693b      	ldr	r3, [r7, #16]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d018      	beq.n	8000e18 <I2C_Event_IRQHandling+0x6e>
	{
		//Execute the Address phase and To clear the address phase need to read the  SR1 followed by SR2
		if(pI2CHandle->TxRxState == I2C_STATE_BUSY_IN_TX)
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	7f1b      	ldrb	r3, [r3, #28]
 8000dea:	2b01      	cmp	r3, #1
 8000dec:	d108      	bne.n	8000e00 <I2C_Event_IRQHandling+0x56>
		{
			I2C_ExecuteAddressPhaseWrite(pI2CHandle->pI2Cx, pI2CHandle->Device_Addr);
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681a      	ldr	r2, [r3, #0]
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	7f5b      	ldrb	r3, [r3, #29]
 8000df6:	4619      	mov	r1, r3
 8000df8:	4610      	mov	r0, r2
 8000dfa:	f000 fa2d 	bl	8001258 <I2C_ExecuteAddressPhaseWrite>
 8000dfe:	e00b      	b.n	8000e18 <I2C_Event_IRQHandling+0x6e>
		}
		else if(pI2CHandle->TxRxState == I2C_STATE_BUSY_IN_RX)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	7f1b      	ldrb	r3, [r3, #28]
 8000e04:	2b02      	cmp	r3, #2
 8000e06:	d107      	bne.n	8000e18 <I2C_Event_IRQHandling+0x6e>
		{
			I2C_ExecuteAddressPhaseRead(pI2CHandle->pI2Cx, pI2CHandle->Device_Addr);
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681a      	ldr	r2, [r3, #0]
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	7f5b      	ldrb	r3, [r3, #29]
 8000e10:	4619      	mov	r1, r3
 8000e12:	4610      	mov	r0, r2
 8000e14:	f000 fa3c 	bl	8001290 <I2C_ExecuteAddressPhaseRead>
		}
	}

	//Read the I2C status register for ADDR
	temp3 = (pI2CHandle->pI2Cx->SR1 & (1 <<  I2C_SR1_ADDR));
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	695b      	ldr	r3, [r3, #20]
 8000e1e:	f003 0302 	and.w	r3, r3, #2
 8000e22:	617b      	str	r3, [r7, #20]
	if(temp3 && temp1)
 8000e24:	697b      	ldr	r3, [r7, #20]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d005      	beq.n	8000e36 <I2C_Event_IRQHandling+0x8c>
 8000e2a:	693b      	ldr	r3, [r7, #16]
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d002      	beq.n	8000e36 <I2C_Event_IRQHandling+0x8c>
	{
		//Clear the Address phase
		I2C_ClearAddressPhase(pI2CHandle);
 8000e30:	6878      	ldr	r0, [r7, #4]
 8000e32:	f000 fa49 	bl	80012c8 <I2C_ClearAddressPhase>
	}


	//Read the I2C status register for BTF
	temp3 = (pI2CHandle->pI2Cx->SR1  & (1 <<  I2C_SR1_BTF));
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	695b      	ldr	r3, [r3, #20]
 8000e3c:	f003 0304 	and.w	r3, r3, #4
 8000e40:	617b      	str	r3, [r7, #20]
	if(temp3 && temp1)
 8000e42:	697b      	ldr	r3, [r7, #20]
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d022      	beq.n	8000e8e <I2C_Event_IRQHandling+0xe4>
 8000e48:	693b      	ldr	r3, [r7, #16]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d01f      	beq.n	8000e8e <I2C_Event_IRQHandling+0xe4>
	{
		//Check whether I2C is in master mode
		if( pI2CHandle->pI2Cx->SR2 & (1 << I2C_SR2_MSL))
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	699b      	ldr	r3, [r3, #24]
 8000e54:	f003 0301 	and.w	r3, r3, #1
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d018      	beq.n	8000e8e <I2C_Event_IRQHandling+0xe4>
		{
			//BTF flag in TX ,Data register and Shift register is empty then BTF=1;
			if(pI2CHandle->TxRxState == I2C_STATE_BUSY_IN_TX)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	7f1b      	ldrb	r3, [r3, #28]
 8000e60:	2b01      	cmp	r3, #1
 8000e62:	d114      	bne.n	8000e8e <I2C_Event_IRQHandling+0xe4>
			{
				if(pI2CHandle->TxLen == 0)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	695b      	ldr	r3, [r3, #20]
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d110      	bne.n	8000e8e <I2C_Event_IRQHandling+0xe4>
				{

					if(pI2CHandle->Repeated_Start == REPEATED_START_DISABLE)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d104      	bne.n	8000e80 <I2C_Event_IRQHandling+0xd6>
						I2C_StopCondition(pI2CHandle->pI2Cx);
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f000 f9dd 	bl	800123a <I2C_StopCondition>

					//Close the I2C transmission
					I2C_CloseTranmission(pI2CHandle);
 8000e80:	6878      	ldr	r0, [r7, #4]
 8000e82:	f000 f967 	bl	8001154 <I2C_CloseTranmission>

					I2C_ApplicationEventCallback(pI2CHandle, I2C_APP_EVT_TX_CMPLT);
 8000e86:	2100      	movs	r1, #0
 8000e88:	6878      	ldr	r0, [r7, #4]
 8000e8a:	f000 f9b3 	bl	80011f4 <I2C_ApplicationEventCallback>
		}

	}

	//Read the I2C status register for STOPF
	temp3 = (pI2CHandle->pI2Cx->SR1  & (1 <<  I2C_SR1_STOPF));
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	695b      	ldr	r3, [r3, #20]
 8000e94:	f003 0310 	and.w	r3, r3, #16
 8000e98:	617b      	str	r3, [r7, #20]
	if(temp3 && temp1)
 8000e9a:	697b      	ldr	r3, [r7, #20]
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d00c      	beq.n	8000eba <I2C_Event_IRQHandling+0x110>
 8000ea0:	693b      	ldr	r3, [r7, #16]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d009      	beq.n	8000eba <I2C_Event_IRQHandling+0x110>
		//Set by hardware when a Stop condition is detected on the bus by the slave after an
		//acknowledge (if ACK=1)

		//To clear the STOPF bit
		//read the SR1 followed by writing the CR1
		pI2CHandle->pI2Cx->CR1 |= 0x0000;
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681a      	ldr	r2, [r3, #0]
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	6812      	ldr	r2, [r2, #0]
 8000eb0:	601a      	str	r2, [r3, #0]

		I2C_ApplicationEventCallback(pI2CHandle, I2C_APP_EVT_STOP);
 8000eb2:	2102      	movs	r1, #2
 8000eb4:	6878      	ldr	r0, [r7, #4]
 8000eb6:	f000 f99d 	bl	80011f4 <I2C_ApplicationEventCallback>
	}

	//Read the I2C status register for TXE
	temp3 = (pI2CHandle->pI2Cx->SR1 & (1 <<  I2C_SR1_TXE));
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	695b      	ldr	r3, [r3, #20]
 8000ec0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ec4:	617b      	str	r3, [r7, #20]
	if(temp3 && temp1 && temp2)
 8000ec6:	697b      	ldr	r3, [r7, #20]
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d00f      	beq.n	8000eec <I2C_Event_IRQHandling+0x142>
 8000ecc:	693b      	ldr	r3, [r7, #16]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d00c      	beq.n	8000eec <I2C_Event_IRQHandling+0x142>
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d009      	beq.n	8000eec <I2C_Event_IRQHandling+0x142>
	{
		//Handle the txe bit
		//Handle the BTF completed for end of Transmission and reception
		//Check whether I2C is in master mode
		if( pI2CHandle->pI2Cx->SR2 & (1 << I2C_SR2_MSL))
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	699b      	ldr	r3, [r3, #24]
 8000ede:	f003 0301 	and.w	r3, r3, #1
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d002      	beq.n	8000eec <I2C_Event_IRQHandling+0x142>
		{
			I2C_InterruptHandling_TXECallback(pI2CHandle);
 8000ee6:	6878      	ldr	r0, [r7, #4]
 8000ee8:	f000 f8b9 	bl	800105e <I2C_InterruptHandling_TXECallback>

		}
	}

	//Read the I2C status register for RXNE
	temp3 = (pI2CHandle->pI2Cx->SR1  & (1 <<  I2C_SR1_RXNE));
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	695b      	ldr	r3, [r3, #20]
 8000ef2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ef6:	617b      	str	r3, [r7, #20]
	if(temp3 && temp1 && temp2)
 8000ef8:	697b      	ldr	r3, [r7, #20]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d013      	beq.n	8000f26 <I2C_Event_IRQHandling+0x17c>
 8000efe:	693b      	ldr	r3, [r7, #16]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d010      	beq.n	8000f26 <I2C_Event_IRQHandling+0x17c>
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d00d      	beq.n	8000f26 <I2C_Event_IRQHandling+0x17c>
	{
		//Handle the RXNE bit
		//Check whether I2C is in master mode
		if( pI2CHandle->pI2Cx->SR2 & (1 << I2C_SR2_MSL))
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	699b      	ldr	r3, [r3, #24]
 8000f10:	f003 0301 	and.w	r3, r3, #1
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d006      	beq.n	8000f26 <I2C_Event_IRQHandling+0x17c>
		{
			if(pI2CHandle->TxRxState ==I2C_STATE_BUSY_IN_RX)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	7f1b      	ldrb	r3, [r3, #28]
 8000f1c:	2b02      	cmp	r3, #2
 8000f1e:	d102      	bne.n	8000f26 <I2C_Event_IRQHandling+0x17c>
			{
//				printf("%d\t%d\n", pI2CHandle->pI2Cx->SR2,pI2CHandle->RxLen);
				I2C_InterruptHandling_RXNECallback(pI2CHandle);
 8000f20:	6878      	ldr	r0, [r7, #4]
 8000f22:	f000 f8bd 	bl	80010a0 <I2C_InterruptHandling_RXNECallback>
		{

		}
	}

}
 8000f26:	bf00      	nop
 8000f28:	3718      	adds	r7, #24
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}

08000f2e <I2C_Error_IRQHandling>:


void I2C_Error_IRQHandling(I2C_Handle_t *pI2CHandle)
{
 8000f2e:	b580      	push	{r7, lr}
 8000f30:	b084      	sub	sp, #16
 8000f32:	af00      	add	r7, sp, #0
 8000f34:	6078      	str	r0, [r7, #4]
	uint32_t temp1,temp2;

    //Know the status of  ITERREN control bit in the CR2
	temp2 = (pI2CHandle->pI2Cx->CR2) & ( 1 << I2C_CR2_ITERREN);
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	685b      	ldr	r3, [r3, #4]
 8000f3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f40:	60fb      	str	r3, [r7, #12]


/***********************Check for Bus error************************************/
	temp1 = (pI2CHandle->pI2Cx->SR1) & ( 1<< I2C_SR1_BERR);
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	695b      	ldr	r3, [r3, #20]
 8000f48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f4c:	60bb      	str	r3, [r7, #8]
	if(temp1  && temp2 )
 8000f4e:	68bb      	ldr	r3, [r7, #8]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d00e      	beq.n	8000f72 <I2C_Error_IRQHandling+0x44>
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d00b      	beq.n	8000f72 <I2C_Error_IRQHandling+0x44>
	{
		//This is Bus error

		//clear the buss error flag
		pI2CHandle->pI2Cx->SR1 &= ~( 1 << I2C_SR1_BERR);
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	695a      	ldr	r2, [r3, #20]
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000f68:	615a      	str	r2, [r3, #20]

		//Implement the code to notify the application about the error
	   I2C_ApplicationEventCallback(pI2CHandle,I2C_ERROR_BERR);
 8000f6a:	2103      	movs	r1, #3
 8000f6c:	6878      	ldr	r0, [r7, #4]
 8000f6e:	f000 f941 	bl	80011f4 <I2C_ApplicationEventCallback>
	}

/***********************Check for arbitration lost error************************************/
	temp1 = (pI2CHandle->pI2Cx->SR1) & ( 1 << I2C_SR1_ARLO );
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	695b      	ldr	r3, [r3, #20]
 8000f78:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000f7c:	60bb      	str	r3, [r7, #8]
	if(temp1  && temp2)
 8000f7e:	68bb      	ldr	r3, [r7, #8]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d00e      	beq.n	8000fa2 <I2C_Error_IRQHandling+0x74>
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d00b      	beq.n	8000fa2 <I2C_Error_IRQHandling+0x74>
		//This is arbitration lost error

		//Implement the code to clear the arbitration lost error flag
		//After an ARLO event the interface switches back automatically to Slave mode (MSL=0).
		//clear the buss error flag
		pI2CHandle->pI2Cx->SR1 &= ~( 1 << I2C_SR1_ARLO);
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	695a      	ldr	r2, [r3, #20]
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000f98:	615a      	str	r2, [r3, #20]

		//Implement the code to notify the application about the error
		I2C_ApplicationEventCallback(pI2CHandle,I2C_ERROR_ARLO);
 8000f9a:	2104      	movs	r1, #4
 8000f9c:	6878      	ldr	r0, [r7, #4]
 8000f9e:	f000 f929 	bl	80011f4 <I2C_ApplicationEventCallback>

	}

/***********************Check for ACK failure  error************************************/

	temp1 = (pI2CHandle->pI2Cx->SR1) & ( 1 << I2C_SR1_AF);
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	695b      	ldr	r3, [r3, #20]
 8000fa8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fac:	60bb      	str	r3, [r7, #8]
	if(temp1  && temp2)
 8000fae:	68bb      	ldr	r3, [r7, #8]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d017      	beq.n	8000fe4 <I2C_Error_IRQHandling+0xb6>
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d014      	beq.n	8000fe4 <I2C_Error_IRQHandling+0xb6>
	{
		//This is ACK failure error

	    //Implement the code to clear the ACK failure error flag
		pI2CHandle->pI2Cx->SR1 &= ~( 1 << I2C_SR1_AF);
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	695a      	ldr	r2, [r3, #20]
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000fc8:	615a      	str	r2, [r3, #20]

		//Implement the code to notify the application about the error
		I2C_ApplicationEventCallback(pI2CHandle,I2C_ERROR_AF);
 8000fca:	2105      	movs	r1, #5
 8000fcc:	6878      	ldr	r0, [r7, #4]
 8000fce:	f000 f911 	bl	80011f4 <I2C_ApplicationEventCallback>

		//inside app event close the TX and generate STOP condition
		if(pI2CHandle->pI2C_Config.I2C_ACKCtrl == REPEATED_START_DISABLE)
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	7a5b      	ldrb	r3, [r3, #9]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d104      	bne.n	8000fe4 <I2C_Error_IRQHandling+0xb6>
		{
			I2C_StopCondition(pI2CHandle->pI2Cx);
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f000 f92b 	bl	800123a <I2C_StopCondition>
		}
	}

/***********************Check for Overrun/underrun error************************************/
	temp1 = (pI2CHandle->pI2Cx->SR1) & ( 1 << I2C_SR1_OVR);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	695b      	ldr	r3, [r3, #20]
 8000fea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000fee:	60bb      	str	r3, [r7, #8]
	if(temp1  && temp2)
 8000ff0:	68bb      	ldr	r3, [r7, #8]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d017      	beq.n	8001026 <I2C_Error_IRQHandling+0xf8>
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d014      	beq.n	8001026 <I2C_Error_IRQHandling+0xf8>
	{
		//This is Overrun/underrun

	    //Implement the code to clear the Overrun/underrun error flag
		pI2CHandle->pI2Cx->SR1 &= ~( 1 << I2C_SR1_OVR);
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	695a      	ldr	r2, [r3, #20]
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800100a:	615a      	str	r2, [r3, #20]

		//Implement the code to notify the application about the error
		I2C_ApplicationEventCallback(pI2CHandle,I2C_ERROR_OVR);
 800100c:	2106      	movs	r1, #6
 800100e:	6878      	ldr	r0, [r7, #4]
 8001010:	f000 f8f0 	bl	80011f4 <I2C_ApplicationEventCallback>

		//Re-trasmission or reception based on state
		//inside app event close the TX and generate STOP condition
		if(pI2CHandle->pI2C_Config.I2C_ACKCtrl == REPEATED_START_DISABLE)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	7a5b      	ldrb	r3, [r3, #9]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d104      	bne.n	8001026 <I2C_Error_IRQHandling+0xf8>
		{
			I2C_StopCondition(pI2CHandle->pI2Cx);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4618      	mov	r0, r3
 8001022:	f000 f90a 	bl	800123a <I2C_StopCondition>
		}
	}

/***********************Check for Time out error************************************/
	temp1 = (pI2CHandle->pI2Cx->SR1) & ( 1 << I2C_SR1_TIMEOUT);
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	695b      	ldr	r3, [r3, #20]
 800102c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001030:	60bb      	str	r3, [r7, #8]
	if(temp1  && temp2)
 8001032:	68bb      	ldr	r3, [r7, #8]
 8001034:	2b00      	cmp	r3, #0
 8001036:	d00e      	beq.n	8001056 <I2C_Error_IRQHandling+0x128>
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	2b00      	cmp	r3, #0
 800103c:	d00b      	beq.n	8001056 <I2C_Error_IRQHandling+0x128>
		//Master cumulative clock low extend time more than 10 ms (Tlow:mext)or
		//Slave cumulative clock low extend time more than 25 ms (Tlow:sext)

		//When set in slave mode: slave resets the communication and lines are released by hardware
		//When set in master mode: Stop condition sent by hardware
		pI2CHandle->pI2Cx->SR1 &= ~( 1 << I2C_SR1_TIMEOUT);
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	695a      	ldr	r2, [r3, #20]
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800104c:	615a      	str	r2, [r3, #20]

		//Implement the code to notify the application about the error
		I2C_ApplicationEventCallback(pI2CHandle,I2C_ERROR_TIMEOUT);
 800104e:	2107      	movs	r1, #7
 8001050:	6878      	ldr	r0, [r7, #4]
 8001052:	f000 f8cf 	bl	80011f4 <I2C_ApplicationEventCallback>
	}
}
 8001056:	bf00      	nop
 8001058:	3710      	adds	r7, #16
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}

0800105e <I2C_InterruptHandling_TXECallback>:

void I2C_InterruptHandling_TXECallback(I2C_Handle_t *pI2CHandle)
{
 800105e:	b480      	push	{r7}
 8001060:	b083      	sub	sp, #12
 8001062:	af00      	add	r7, sp, #0
 8001064:	6078      	str	r0, [r7, #4]
	if(pI2CHandle->TxRxState == I2C_STATE_BUSY_IN_TX)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	7f1b      	ldrb	r3, [r3, #28]
 800106a:	2b01      	cmp	r3, #1
 800106c:	d113      	bne.n	8001096 <I2C_InterruptHandling_TXECallback+0x38>
	{
		if(pI2CHandle->TxLen > 0)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	695b      	ldr	r3, [r3, #20]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d00f      	beq.n	8001096 <I2C_InterruptHandling_TXECallback+0x38>
		{
			//send the data
			pI2CHandle->pI2Cx->DR = *(pI2CHandle->pTxBuffer);
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	68db      	ldr	r3, [r3, #12]
 800107a:	781a      	ldrb	r2, [r3, #0]
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	611a      	str	r2, [r3, #16]

			//decrement the length by one byte
			pI2CHandle->TxLen--;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	695b      	ldr	r3, [r3, #20]
 8001086:	1e5a      	subs	r2, r3, #1
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	615a      	str	r2, [r3, #20]

			//increment the buffer address
			pI2CHandle->pTxBuffer++;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	68db      	ldr	r3, [r3, #12]
 8001090:	1c5a      	adds	r2, r3, #1
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	60da      	str	r2, [r3, #12]
		}
	}
}
 8001096:	bf00      	nop
 8001098:	370c      	adds	r7, #12
 800109a:	46bd      	mov	sp, r7
 800109c:	bc80      	pop	{r7}
 800109e:	4770      	bx	lr

080010a0 <I2C_InterruptHandling_RXNECallback>:


//as per my logic but last byte ACking in read with try here
#if 1 // Working fine
void I2C_InterruptHandling_RXNECallback(I2C_Handle_t *pI2CHandle)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
	if(pI2CHandle->RxSize == 1 )
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	6a1b      	ldr	r3, [r3, #32]
 80010ac:	2b01      	cmp	r3, #1
 80010ae:	d115      	bne.n	80010dc <I2C_InterruptHandling_RXNECallback+0x3c>
	{
		//printf("sin :%d\t%d\n", pI2CHandle->pI2Cx->SR2,pI2CHandle->RxLen);
		//read the Data byte from DR
		*(pI2CHandle->pRxBuffer) = pI2CHandle->pI2Cx->DR;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	691a      	ldr	r2, [r3, #16]
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	691b      	ldr	r3, [r3, #16]
 80010ba:	b2d2      	uxtb	r2, r2
 80010bc:	701a      	strb	r2, [r3, #0]

		if(pI2CHandle->Repeated_Start == REPEATED_START_DISABLE)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d104      	bne.n	80010d2 <I2C_InterruptHandling_RXNECallback+0x32>
		{
			I2C_StopCondition(pI2CHandle->pI2Cx);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4618      	mov	r0, r3
 80010ce:	f000 f8b4 	bl	800123a <I2C_StopCondition>
		}

		//Decrement the Length
		pI2CHandle->RxLen--;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	699b      	ldr	r3, [r3, #24]
 80010d6:	1e5a      	subs	r2, r3, #1
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	619a      	str	r2, [r3, #24]

	}

	//Size greater than 1 byte
	if(pI2CHandle->RxSize > 1)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	6a1b      	ldr	r3, [r3, #32]
 80010e0:	2b01      	cmp	r3, #1
 80010e2:	d928      	bls.n	8001136 <I2C_InterruptHandling_RXNECallback+0x96>
	{
		//printf("more: %d\t%d\n", pI2CHandle->pI2Cx->SR2,pI2CHandle->RxLen);

		if(pI2CHandle->RxLen == 1)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	699b      	ldr	r3, [r3, #24]
 80010e8:	2b01      	cmp	r3, #1
 80010ea:	d109      	bne.n	8001100 <I2C_InterruptHandling_RXNECallback+0x60>
		{
			if(pI2CHandle->Repeated_Start == REPEATED_START_DISABLE)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d104      	bne.n	8001100 <I2C_InterruptHandling_RXNECallback+0x60>
			{
				I2C_StopCondition(pI2CHandle->pI2Cx);
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	4618      	mov	r0, r3
 80010fc:	f000 f89d 	bl	800123a <I2C_StopCondition>
			}
		}
		//Last before 2nd byte
		if(pI2CHandle->RxLen == 2)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	699b      	ldr	r3, [r3, #24]
 8001104:	2b02      	cmp	r3, #2
 8001106:	d105      	bne.n	8001114 <I2C_InterruptHandling_RXNECallback+0x74>
		{
			//send the Nack bit
			I2C_ManageACK(pI2CHandle->pI2Cx, DISABLE);
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	2100      	movs	r1, #0
 800110e:	4618      	mov	r0, r3
 8001110:	f000 f913 	bl	800133a <I2C_ManageACK>
		}

		//read the Data byte from DR
		*(pI2CHandle->pRxBuffer) = pI2CHandle->pI2Cx->DR;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	691a      	ldr	r2, [r3, #16]
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	691b      	ldr	r3, [r3, #16]
 800111e:	b2d2      	uxtb	r2, r2
 8001120:	701a      	strb	r2, [r3, #0]

		//Decrement the Length
		pI2CHandle->RxLen--;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	699b      	ldr	r3, [r3, #24]
 8001126:	1e5a      	subs	r2, r3, #1
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	619a      	str	r2, [r3, #24]
		pI2CHandle->pRxBuffer++;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	691b      	ldr	r3, [r3, #16]
 8001130:	1c5a      	adds	r2, r3, #1
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	611a      	str	r2, [r3, #16]
	}//if end's here

	if(pI2CHandle->RxLen == 0)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	699b      	ldr	r3, [r3, #24]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d106      	bne.n	800114c <I2C_InterruptHandling_RXNECallback+0xac>
	{
		//Close the I2C reception
		I2C_CloseReception(pI2CHandle);
 800113e:	6878      	ldr	r0, [r7, #4]
 8001140:	f000 f82a 	bl	8001198 <I2C_CloseReception>

		I2C_ApplicationEventCallback(pI2CHandle, I2C_APP_EVT_RX_CMPLT);
 8001144:	2101      	movs	r1, #1
 8001146:	6878      	ldr	r0, [r7, #4]
 8001148:	f000 f854 	bl	80011f4 <I2C_ApplicationEventCallback>
	}

}
 800114c:	bf00      	nop
 800114e:	3708      	adds	r7, #8
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}

08001154 <I2C_CloseTranmission>:

#endif

void I2C_CloseTranmission(I2C_Handle_t *pI2CHandle)
{
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
	//Clear the TXE and RXNE interrupt
	pI2CHandle->pI2Cx->CR2 &= ~( 1 <<  I2C_CR2_ITBUFEN);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	685a      	ldr	r2, [r3, #4]
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800116a:	605a      	str	r2, [r3, #4]
	pI2CHandle->pI2Cx->CR2 &= ~( 1 <<  I2C_CR2_ITEVTEN);
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	685a      	ldr	r2, [r3, #4]
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800117a:	605a      	str	r2, [r3, #4]

	pI2CHandle->pTxBuffer = NULL;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	2200      	movs	r2, #0
 8001180:	60da      	str	r2, [r3, #12]
	pI2CHandle->TxLen = 0;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	2200      	movs	r2, #0
 8001186:	615a      	str	r2, [r3, #20]
	pI2CHandle->TxRxState = I2C_STATE_IDLE;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	2200      	movs	r2, #0
 800118c:	771a      	strb	r2, [r3, #28]
}
 800118e:	bf00      	nop
 8001190:	370c      	adds	r7, #12
 8001192:	46bd      	mov	sp, r7
 8001194:	bc80      	pop	{r7}
 8001196:	4770      	bx	lr

08001198 <I2C_CloseReception>:

void I2C_CloseReception(I2C_Handle_t *pI2CHandle)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
	pI2CHandle->pI2Cx->CR2 &= ~( 1 <<  I2C_CR2_ITBUFEN);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	685a      	ldr	r2, [r3, #4]
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80011ae:	605a      	str	r2, [r3, #4]
	pI2CHandle->pI2Cx->CR2 &= ~( 1 <<  I2C_CR2_ITEVTEN);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	685a      	ldr	r2, [r3, #4]
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80011be:	605a      	str	r2, [r3, #4]

	pI2CHandle->pRxBuffer = NULL;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	2200      	movs	r2, #0
 80011c4:	611a      	str	r2, [r3, #16]
	pI2CHandle->RxLen = 0;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	2200      	movs	r2, #0
 80011ca:	619a      	str	r2, [r3, #24]
	pI2CHandle->TxRxState = I2C_STATE_IDLE;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	2200      	movs	r2, #0
 80011d0:	771a      	strb	r2, [r3, #28]
	pI2CHandle->RxSize = 0;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	2200      	movs	r2, #0
 80011d6:	621a      	str	r2, [r3, #32]

	if(pI2CHandle->pI2C_Config.I2C_ACKCtrl == I2C_ACK_ENABLE)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	7a5b      	ldrb	r3, [r3, #9]
 80011dc:	2b01      	cmp	r3, #1
 80011de:	d105      	bne.n	80011ec <I2C_CloseReception+0x54>
	{
		//Re-enable the acking
		I2C_ManageACK(pI2CHandle->pI2Cx, ENABLE);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	2101      	movs	r1, #1
 80011e6:	4618      	mov	r0, r3
 80011e8:	f000 f8a7 	bl	800133a <I2C_ManageACK>
	}
//	if(pI2CHandle->Repeated_Start == REPEATED_START_DISABLE)
//	{
//		pI2CHandle->RxSize = 0;
//	}
}
 80011ec:	bf00      	nop
 80011ee:	3708      	adds	r7, #8
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}

080011f4 <I2C_ApplicationEventCallback>:

uint8_t RxCmplt = 0;
void I2C_ApplicationEventCallback(I2C_Handle_t *pI2CHandle, uint8_t AppEvent)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b083      	sub	sp, #12
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
 80011fc:	460b      	mov	r3, r1
 80011fe:	70fb      	strb	r3, [r7, #3]

	if(AppEvent == I2C_APP_EVT_RX_CMPLT)
 8001200:	78fb      	ldrb	r3, [r7, #3]
 8001202:	2b01      	cmp	r3, #1
 8001204:	d102      	bne.n	800120c <I2C_ApplicationEventCallback+0x18>
	{
		RxCmplt = 1;
 8001206:	4b04      	ldr	r3, [pc, #16]	; (8001218 <I2C_ApplicationEventCallback+0x24>)
 8001208:	2201      	movs	r2, #1
 800120a:	701a      	strb	r2, [r3, #0]
	}
}
 800120c:	bf00      	nop
 800120e:	370c      	adds	r7, #12
 8001210:	46bd      	mov	sp, r7
 8001212:	bc80      	pop	{r7}
 8001214:	4770      	bx	lr
 8001216:	bf00      	nop
 8001218:	200000a4 	.word	0x200000a4

0800121c <I2C_StartCondition>:


void I2C_StartCondition(I2C_RegDef_t *pI2Cx)
{
 800121c:	b480      	push	{r7}
 800121e:	b083      	sub	sp, #12
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= ( 1 << I2C_CR1_START);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	601a      	str	r2, [r3, #0]
}
 8001230:	bf00      	nop
 8001232:	370c      	adds	r7, #12
 8001234:	46bd      	mov	sp, r7
 8001236:	bc80      	pop	{r7}
 8001238:	4770      	bx	lr

0800123a <I2C_StopCondition>:


void I2C_StopCondition(I2C_RegDef_t *pI2Cx)
{
 800123a:	b480      	push	{r7}
 800123c:	b083      	sub	sp, #12
 800123e:	af00      	add	r7, sp, #0
 8001240:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= ( 1 << I2C_CR1_STOP);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	601a      	str	r2, [r3, #0]
}
 800124e:	bf00      	nop
 8001250:	370c      	adds	r7, #12
 8001252:	46bd      	mov	sp, r7
 8001254:	bc80      	pop	{r7}
 8001256:	4770      	bx	lr

08001258 <I2C_ExecuteAddressPhaseWrite>:
	return 0;
}


void I2C_ExecuteAddressPhaseWrite(I2C_RegDef_t *pI2Cx,uint8_t SlaveAddress)
{
 8001258:	b480      	push	{r7}
 800125a:	b085      	sub	sp, #20
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
 8001260:	460b      	mov	r3, r1
 8001262:	70fb      	strb	r3, [r7, #3]
	uint8_t tempreg = 0;
 8001264:	2300      	movs	r3, #0
 8001266:	73fb      	strb	r3, [r7, #15]
	tempreg |= ( SlaveAddress << 1);
 8001268:	78fb      	ldrb	r3, [r7, #3]
 800126a:	005b      	lsls	r3, r3, #1
 800126c:	b25a      	sxtb	r2, r3
 800126e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001272:	4313      	orrs	r3, r2
 8001274:	b25b      	sxtb	r3, r3
 8001276:	73fb      	strb	r3, [r7, #15]
	tempreg &= ~(1);	// Write operation bit is set in I2C slave address
 8001278:	7bfb      	ldrb	r3, [r7, #15]
 800127a:	f023 0301 	bic.w	r3, r3, #1
 800127e:	73fb      	strb	r3, [r7, #15]
	pI2Cx->DR = tempreg;
 8001280:	7bfa      	ldrb	r2, [r7, #15]
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	611a      	str	r2, [r3, #16]
}
 8001286:	bf00      	nop
 8001288:	3714      	adds	r7, #20
 800128a:	46bd      	mov	sp, r7
 800128c:	bc80      	pop	{r7}
 800128e:	4770      	bx	lr

08001290 <I2C_ExecuteAddressPhaseRead>:

void I2C_ExecuteAddressPhaseRead(I2C_RegDef_t *pI2Cx,uint8_t SlaveAddress)
{
 8001290:	b480      	push	{r7}
 8001292:	b085      	sub	sp, #20
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
 8001298:	460b      	mov	r3, r1
 800129a:	70fb      	strb	r3, [r7, #3]
	uint8_t tempreg = 0;
 800129c:	2300      	movs	r3, #0
 800129e:	73fb      	strb	r3, [r7, #15]
	tempreg |= ( SlaveAddress << 1);
 80012a0:	78fb      	ldrb	r3, [r7, #3]
 80012a2:	005b      	lsls	r3, r3, #1
 80012a4:	b25a      	sxtb	r2, r3
 80012a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012aa:	4313      	orrs	r3, r2
 80012ac:	b25b      	sxtb	r3, r3
 80012ae:	73fb      	strb	r3, [r7, #15]
	tempreg |= (1 << 0);// Read bit is set in slave address
 80012b0:	7bfb      	ldrb	r3, [r7, #15]
 80012b2:	f043 0301 	orr.w	r3, r3, #1
 80012b6:	73fb      	strb	r3, [r7, #15]
	pI2Cx->DR = tempreg;
 80012b8:	7bfa      	ldrb	r2, [r7, #15]
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	611a      	str	r2, [r3, #16]
}
 80012be:	bf00      	nop
 80012c0:	3714      	adds	r7, #20
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bc80      	pop	{r7}
 80012c6:	4770      	bx	lr

080012c8 <I2C_ClearAddressPhase>:


void I2C_ClearAddressPhase(I2C_Handle_t *pI2CHandle)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b084      	sub	sp, #16
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
	uint8_t tempreg = 0;
 80012d0:	2300      	movs	r3, #0
 80012d2:	73fb      	strb	r3, [r7, #15]
	//I2C is in Master Mode
	if(pI2CHandle->pI2Cx->SR2 & (1 << I2C_SR2_MSL))
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	699b      	ldr	r3, [r3, #24]
 80012da:	f003 0301 	and.w	r3, r3, #1
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d01f      	beq.n	8001322 <I2C_ClearAddressPhase+0x5a>
	{
		if(pI2CHandle->TxRxState ==I2C_STATE_BUSY_IN_RX)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	7f1b      	ldrb	r3, [r3, #28]
 80012e6:	2b02      	cmp	r3, #2
 80012e8:	d112      	bne.n	8001310 <I2C_ClearAddressPhase+0x48>
		{
			if(pI2CHandle->RxSize == 1 )
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	6a1b      	ldr	r3, [r3, #32]
 80012ee:	2b01      	cmp	r3, #1
 80012f0:	d11f      	bne.n	8001332 <I2C_ClearAddressPhase+0x6a>
			{
				//Disable the Acking so master wont send ACk bit to slave
				I2C_ManageACK(pI2CHandle->pI2Cx, DISABLE);
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	2100      	movs	r1, #0
 80012f8:	4618      	mov	r0, r3
 80012fa:	f000 f81e 	bl	800133a <I2C_ManageACK>

				tempreg = pI2CHandle->pI2Cx->SR1;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	695b      	ldr	r3, [r3, #20]
 8001304:	73fb      	strb	r3, [r7, #15]
				tempreg = pI2CHandle->pI2Cx->SR2;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	699b      	ldr	r3, [r3, #24]
 800130c:	73fb      	strb	r3, [r7, #15]
	{
		tempreg = pI2CHandle->pI2Cx->SR1;
		tempreg = pI2CHandle->pI2Cx->SR2;
		(void)tempreg;
	}
}
 800130e:	e010      	b.n	8001332 <I2C_ClearAddressPhase+0x6a>
			tempreg = pI2CHandle->pI2Cx->SR1;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	695b      	ldr	r3, [r3, #20]
 8001316:	73fb      	strb	r3, [r7, #15]
			tempreg = pI2CHandle->pI2Cx->SR2;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	699b      	ldr	r3, [r3, #24]
 800131e:	73fb      	strb	r3, [r7, #15]
}
 8001320:	e007      	b.n	8001332 <I2C_ClearAddressPhase+0x6a>
		tempreg = pI2CHandle->pI2Cx->SR1;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	695b      	ldr	r3, [r3, #20]
 8001328:	73fb      	strb	r3, [r7, #15]
		tempreg = pI2CHandle->pI2Cx->SR2;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	699b      	ldr	r3, [r3, #24]
 8001330:	73fb      	strb	r3, [r7, #15]
}
 8001332:	bf00      	nop
 8001334:	3710      	adds	r7, #16
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}

0800133a <I2C_ManageACK>:

void I2C_ManageACK(I2C_RegDef_t *pI2Cx,uint8_t EnorDi)
{
 800133a:	b480      	push	{r7}
 800133c:	b083      	sub	sp, #12
 800133e:	af00      	add	r7, sp, #0
 8001340:	6078      	str	r0, [r7, #4]
 8001342:	460b      	mov	r3, r1
 8001344:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8001346:	78fb      	ldrb	r3, [r7, #3]
 8001348:	2b01      	cmp	r3, #1
 800134a:	d106      	bne.n	800135a <I2C_ManageACK+0x20>
	{
		pI2Cx->CR1 |= (1 << I2C_CR1_ACK);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	601a      	str	r2, [r3, #0]
	}
	else
	{
		pI2Cx->CR1 &= ~(1 << I2C_CR1_ACK);
	}
}
 8001358:	e005      	b.n	8001366 <I2C_ManageACK+0x2c>
		pI2Cx->CR1 &= ~(1 << I2C_CR1_ACK);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	601a      	str	r2, [r3, #0]
}
 8001366:	bf00      	nop
 8001368:	370c      	adds	r7, #12
 800136a:	46bd      	mov	sp, r7
 800136c:	bc80      	pop	{r7}
 800136e:	4770      	bx	lr

08001370 <I2C_PeripheralControl>:
	}
}


void I2C_PeripheralControl(I2C_RegDef_t *pI2Cx,uint8_t EnorDi)
{
 8001370:	b480      	push	{r7}
 8001372:	b083      	sub	sp, #12
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
 8001378:	460b      	mov	r3, r1
 800137a:	70fb      	strb	r3, [r7, #3]
	if(EnorDi ==  ENABLE)
 800137c:	78fb      	ldrb	r3, [r7, #3]
 800137e:	2b01      	cmp	r3, #1
 8001380:	d106      	bne.n	8001390 <I2C_PeripheralControl+0x20>
	{
		pI2Cx->CR1 |= (1 << I2C_CR1_PE);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f043 0201 	orr.w	r2, r3, #1
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		pI2Cx->CR1 &= ~(1 << I2C_CR1_PE);
	}
}
 800138e:	e005      	b.n	800139c <I2C_PeripheralControl+0x2c>
		pI2Cx->CR1 &= ~(1 << I2C_CR1_PE);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f023 0201 	bic.w	r2, r3, #1
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	601a      	str	r2, [r3, #0]
}
 800139c:	bf00      	nop
 800139e:	370c      	adds	r7, #12
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bc80      	pop	{r7}
 80013a4:	4770      	bx	lr
	...

080013a8 <I2C_IRQConfig>:

/*
 * SPI IRQ Configuration
 */
void I2C_IRQConfig(uint8_t IRQNumber,uint8_t EnorDi)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b083      	sub	sp, #12
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	4603      	mov	r3, r0
 80013b0:	460a      	mov	r2, r1
 80013b2:	71fb      	strb	r3, [r7, #7]
 80013b4:	4613      	mov	r3, r2
 80013b6:	71bb      	strb	r3, [r7, #6]
	if(EnorDi == ENABLE)
 80013b8:	79bb      	ldrb	r3, [r7, #6]
 80013ba:	2b01      	cmp	r3, #1
 80013bc:	d133      	bne.n	8001426 <I2C_IRQConfig+0x7e>
	{
		if(IRQNumber <= 31)
 80013be:	79fb      	ldrb	r3, [r7, #7]
 80013c0:	2b1f      	cmp	r3, #31
 80013c2:	d80a      	bhi.n	80013da <I2C_IRQConfig+0x32>
		{
			*NVIC_ISER0 |= (1 << IRQNumber);
 80013c4:	4b34      	ldr	r3, [pc, #208]	; (8001498 <I2C_IRQConfig+0xf0>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	79fa      	ldrb	r2, [r7, #7]
 80013ca:	2101      	movs	r1, #1
 80013cc:	fa01 f202 	lsl.w	r2, r1, r2
 80013d0:	4611      	mov	r1, r2
 80013d2:	4a31      	ldr	r2, [pc, #196]	; (8001498 <I2C_IRQConfig+0xf0>)
 80013d4:	430b      	orrs	r3, r1
 80013d6:	6013      	str	r3, [r2, #0]
		else if((IRQNumber >= 64) && (IRQNumber < 96))
		{
			*NVIC_ICER2 |= (1 << (IRQNumber % 64));
		}
	}
}
 80013d8:	e059      	b.n	800148e <I2C_IRQConfig+0xe6>
		else if((IRQNumber > 31) && (IRQNumber < 64))
 80013da:	79fb      	ldrb	r3, [r7, #7]
 80013dc:	2b1f      	cmp	r3, #31
 80013de:	d90f      	bls.n	8001400 <I2C_IRQConfig+0x58>
 80013e0:	79fb      	ldrb	r3, [r7, #7]
 80013e2:	2b3f      	cmp	r3, #63	; 0x3f
 80013e4:	d80c      	bhi.n	8001400 <I2C_IRQConfig+0x58>
			*NVIC_ISER1 |= (1 << (IRQNumber % 32));
 80013e6:	4b2d      	ldr	r3, [pc, #180]	; (800149c <I2C_IRQConfig+0xf4>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	79fa      	ldrb	r2, [r7, #7]
 80013ec:	f002 021f 	and.w	r2, r2, #31
 80013f0:	2101      	movs	r1, #1
 80013f2:	fa01 f202 	lsl.w	r2, r1, r2
 80013f6:	4611      	mov	r1, r2
 80013f8:	4a28      	ldr	r2, [pc, #160]	; (800149c <I2C_IRQConfig+0xf4>)
 80013fa:	430b      	orrs	r3, r1
 80013fc:	6013      	str	r3, [r2, #0]
 80013fe:	e046      	b.n	800148e <I2C_IRQConfig+0xe6>
		else if((IRQNumber >= 64) && (IRQNumber < 96))
 8001400:	79fb      	ldrb	r3, [r7, #7]
 8001402:	2b3f      	cmp	r3, #63	; 0x3f
 8001404:	d943      	bls.n	800148e <I2C_IRQConfig+0xe6>
 8001406:	79fb      	ldrb	r3, [r7, #7]
 8001408:	2b5f      	cmp	r3, #95	; 0x5f
 800140a:	d840      	bhi.n	800148e <I2C_IRQConfig+0xe6>
			*NVIC_ISER2 |= (1 << (IRQNumber % 64));
 800140c:	4b24      	ldr	r3, [pc, #144]	; (80014a0 <I2C_IRQConfig+0xf8>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	79fa      	ldrb	r2, [r7, #7]
 8001412:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8001416:	2101      	movs	r1, #1
 8001418:	fa01 f202 	lsl.w	r2, r1, r2
 800141c:	4611      	mov	r1, r2
 800141e:	4a20      	ldr	r2, [pc, #128]	; (80014a0 <I2C_IRQConfig+0xf8>)
 8001420:	430b      	orrs	r3, r1
 8001422:	6013      	str	r3, [r2, #0]
}
 8001424:	e033      	b.n	800148e <I2C_IRQConfig+0xe6>
		if(IRQNumber <= 31)
 8001426:	79fb      	ldrb	r3, [r7, #7]
 8001428:	2b1f      	cmp	r3, #31
 800142a:	d80a      	bhi.n	8001442 <I2C_IRQConfig+0x9a>
			*NVIC_ICER0 |= (1 << IRQNumber);
 800142c:	4b1d      	ldr	r3, [pc, #116]	; (80014a4 <I2C_IRQConfig+0xfc>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	79fa      	ldrb	r2, [r7, #7]
 8001432:	2101      	movs	r1, #1
 8001434:	fa01 f202 	lsl.w	r2, r1, r2
 8001438:	4611      	mov	r1, r2
 800143a:	4a1a      	ldr	r2, [pc, #104]	; (80014a4 <I2C_IRQConfig+0xfc>)
 800143c:	430b      	orrs	r3, r1
 800143e:	6013      	str	r3, [r2, #0]
}
 8001440:	e025      	b.n	800148e <I2C_IRQConfig+0xe6>
		else if((IRQNumber > 31) && (IRQNumber < 64))
 8001442:	79fb      	ldrb	r3, [r7, #7]
 8001444:	2b1f      	cmp	r3, #31
 8001446:	d90f      	bls.n	8001468 <I2C_IRQConfig+0xc0>
 8001448:	79fb      	ldrb	r3, [r7, #7]
 800144a:	2b3f      	cmp	r3, #63	; 0x3f
 800144c:	d80c      	bhi.n	8001468 <I2C_IRQConfig+0xc0>
			*NVIC_ICER1 |= (1 << (IRQNumber % 32));
 800144e:	4b16      	ldr	r3, [pc, #88]	; (80014a8 <I2C_IRQConfig+0x100>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	79fa      	ldrb	r2, [r7, #7]
 8001454:	f002 021f 	and.w	r2, r2, #31
 8001458:	2101      	movs	r1, #1
 800145a:	fa01 f202 	lsl.w	r2, r1, r2
 800145e:	4611      	mov	r1, r2
 8001460:	4a11      	ldr	r2, [pc, #68]	; (80014a8 <I2C_IRQConfig+0x100>)
 8001462:	430b      	orrs	r3, r1
 8001464:	6013      	str	r3, [r2, #0]
 8001466:	e012      	b.n	800148e <I2C_IRQConfig+0xe6>
		else if((IRQNumber >= 64) && (IRQNumber < 96))
 8001468:	79fb      	ldrb	r3, [r7, #7]
 800146a:	2b3f      	cmp	r3, #63	; 0x3f
 800146c:	d90f      	bls.n	800148e <I2C_IRQConfig+0xe6>
 800146e:	79fb      	ldrb	r3, [r7, #7]
 8001470:	2b5f      	cmp	r3, #95	; 0x5f
 8001472:	d80c      	bhi.n	800148e <I2C_IRQConfig+0xe6>
			*NVIC_ICER2 |= (1 << (IRQNumber % 64));
 8001474:	4b0d      	ldr	r3, [pc, #52]	; (80014ac <I2C_IRQConfig+0x104>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	79fa      	ldrb	r2, [r7, #7]
 800147a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800147e:	2101      	movs	r1, #1
 8001480:	fa01 f202 	lsl.w	r2, r1, r2
 8001484:	4611      	mov	r1, r2
 8001486:	4a09      	ldr	r2, [pc, #36]	; (80014ac <I2C_IRQConfig+0x104>)
 8001488:	430b      	orrs	r3, r1
 800148a:	6013      	str	r3, [r2, #0]
}
 800148c:	e7ff      	b.n	800148e <I2C_IRQConfig+0xe6>
 800148e:	bf00      	nop
 8001490:	370c      	adds	r7, #12
 8001492:	46bd      	mov	sp, r7
 8001494:	bc80      	pop	{r7}
 8001496:	4770      	bx	lr
 8001498:	e000e100 	.word	0xe000e100
 800149c:	e000e104 	.word	0xe000e104
 80014a0:	e000e108 	.word	0xe000e108
 80014a4:	e000e180 	.word	0xe000e180
 80014a8:	e000e184 	.word	0xe000e184
 80014ac:	e000e188 	.word	0xe000e188

080014b0 <__errno>:
 80014b0:	4b01      	ldr	r3, [pc, #4]	; (80014b8 <__errno+0x8>)
 80014b2:	6818      	ldr	r0, [r3, #0]
 80014b4:	4770      	bx	lr
 80014b6:	bf00      	nop
 80014b8:	20000018 	.word	0x20000018

080014bc <__libc_init_array>:
 80014bc:	b570      	push	{r4, r5, r6, lr}
 80014be:	4d0d      	ldr	r5, [pc, #52]	; (80014f4 <__libc_init_array+0x38>)
 80014c0:	4c0d      	ldr	r4, [pc, #52]	; (80014f8 <__libc_init_array+0x3c>)
 80014c2:	1b64      	subs	r4, r4, r5
 80014c4:	10a4      	asrs	r4, r4, #2
 80014c6:	2600      	movs	r6, #0
 80014c8:	42a6      	cmp	r6, r4
 80014ca:	d109      	bne.n	80014e0 <__libc_init_array+0x24>
 80014cc:	4d0b      	ldr	r5, [pc, #44]	; (80014fc <__libc_init_array+0x40>)
 80014ce:	4c0c      	ldr	r4, [pc, #48]	; (8001500 <__libc_init_array+0x44>)
 80014d0:	f000 ff8a 	bl	80023e8 <_init>
 80014d4:	1b64      	subs	r4, r4, r5
 80014d6:	10a4      	asrs	r4, r4, #2
 80014d8:	2600      	movs	r6, #0
 80014da:	42a6      	cmp	r6, r4
 80014dc:	d105      	bne.n	80014ea <__libc_init_array+0x2e>
 80014de:	bd70      	pop	{r4, r5, r6, pc}
 80014e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80014e4:	4798      	blx	r3
 80014e6:	3601      	adds	r6, #1
 80014e8:	e7ee      	b.n	80014c8 <__libc_init_array+0xc>
 80014ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80014ee:	4798      	blx	r3
 80014f0:	3601      	adds	r6, #1
 80014f2:	e7f2      	b.n	80014da <__libc_init_array+0x1e>
 80014f4:	08002480 	.word	0x08002480
 80014f8:	08002480 	.word	0x08002480
 80014fc:	08002480 	.word	0x08002480
 8001500:	08002484 	.word	0x08002484

08001504 <memset>:
 8001504:	4402      	add	r2, r0
 8001506:	4603      	mov	r3, r0
 8001508:	4293      	cmp	r3, r2
 800150a:	d100      	bne.n	800150e <memset+0xa>
 800150c:	4770      	bx	lr
 800150e:	f803 1b01 	strb.w	r1, [r3], #1
 8001512:	e7f9      	b.n	8001508 <memset+0x4>

08001514 <_puts_r>:
 8001514:	b570      	push	{r4, r5, r6, lr}
 8001516:	460e      	mov	r6, r1
 8001518:	4605      	mov	r5, r0
 800151a:	b118      	cbz	r0, 8001524 <_puts_r+0x10>
 800151c:	6983      	ldr	r3, [r0, #24]
 800151e:	b90b      	cbnz	r3, 8001524 <_puts_r+0x10>
 8001520:	f000 fa48 	bl	80019b4 <__sinit>
 8001524:	69ab      	ldr	r3, [r5, #24]
 8001526:	68ac      	ldr	r4, [r5, #8]
 8001528:	b913      	cbnz	r3, 8001530 <_puts_r+0x1c>
 800152a:	4628      	mov	r0, r5
 800152c:	f000 fa42 	bl	80019b4 <__sinit>
 8001530:	4b2c      	ldr	r3, [pc, #176]	; (80015e4 <_puts_r+0xd0>)
 8001532:	429c      	cmp	r4, r3
 8001534:	d120      	bne.n	8001578 <_puts_r+0x64>
 8001536:	686c      	ldr	r4, [r5, #4]
 8001538:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800153a:	07db      	lsls	r3, r3, #31
 800153c:	d405      	bmi.n	800154a <_puts_r+0x36>
 800153e:	89a3      	ldrh	r3, [r4, #12]
 8001540:	0598      	lsls	r0, r3, #22
 8001542:	d402      	bmi.n	800154a <_puts_r+0x36>
 8001544:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001546:	f000 fad3 	bl	8001af0 <__retarget_lock_acquire_recursive>
 800154a:	89a3      	ldrh	r3, [r4, #12]
 800154c:	0719      	lsls	r1, r3, #28
 800154e:	d51d      	bpl.n	800158c <_puts_r+0x78>
 8001550:	6923      	ldr	r3, [r4, #16]
 8001552:	b1db      	cbz	r3, 800158c <_puts_r+0x78>
 8001554:	3e01      	subs	r6, #1
 8001556:	68a3      	ldr	r3, [r4, #8]
 8001558:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800155c:	3b01      	subs	r3, #1
 800155e:	60a3      	str	r3, [r4, #8]
 8001560:	bb39      	cbnz	r1, 80015b2 <_puts_r+0x9e>
 8001562:	2b00      	cmp	r3, #0
 8001564:	da38      	bge.n	80015d8 <_puts_r+0xc4>
 8001566:	4622      	mov	r2, r4
 8001568:	210a      	movs	r1, #10
 800156a:	4628      	mov	r0, r5
 800156c:	f000 f848 	bl	8001600 <__swbuf_r>
 8001570:	3001      	adds	r0, #1
 8001572:	d011      	beq.n	8001598 <_puts_r+0x84>
 8001574:	250a      	movs	r5, #10
 8001576:	e011      	b.n	800159c <_puts_r+0x88>
 8001578:	4b1b      	ldr	r3, [pc, #108]	; (80015e8 <_puts_r+0xd4>)
 800157a:	429c      	cmp	r4, r3
 800157c:	d101      	bne.n	8001582 <_puts_r+0x6e>
 800157e:	68ac      	ldr	r4, [r5, #8]
 8001580:	e7da      	b.n	8001538 <_puts_r+0x24>
 8001582:	4b1a      	ldr	r3, [pc, #104]	; (80015ec <_puts_r+0xd8>)
 8001584:	429c      	cmp	r4, r3
 8001586:	bf08      	it	eq
 8001588:	68ec      	ldreq	r4, [r5, #12]
 800158a:	e7d5      	b.n	8001538 <_puts_r+0x24>
 800158c:	4621      	mov	r1, r4
 800158e:	4628      	mov	r0, r5
 8001590:	f000 f888 	bl	80016a4 <__swsetup_r>
 8001594:	2800      	cmp	r0, #0
 8001596:	d0dd      	beq.n	8001554 <_puts_r+0x40>
 8001598:	f04f 35ff 	mov.w	r5, #4294967295
 800159c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800159e:	07da      	lsls	r2, r3, #31
 80015a0:	d405      	bmi.n	80015ae <_puts_r+0x9a>
 80015a2:	89a3      	ldrh	r3, [r4, #12]
 80015a4:	059b      	lsls	r3, r3, #22
 80015a6:	d402      	bmi.n	80015ae <_puts_r+0x9a>
 80015a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80015aa:	f000 faa2 	bl	8001af2 <__retarget_lock_release_recursive>
 80015ae:	4628      	mov	r0, r5
 80015b0:	bd70      	pop	{r4, r5, r6, pc}
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	da04      	bge.n	80015c0 <_puts_r+0xac>
 80015b6:	69a2      	ldr	r2, [r4, #24]
 80015b8:	429a      	cmp	r2, r3
 80015ba:	dc06      	bgt.n	80015ca <_puts_r+0xb6>
 80015bc:	290a      	cmp	r1, #10
 80015be:	d004      	beq.n	80015ca <_puts_r+0xb6>
 80015c0:	6823      	ldr	r3, [r4, #0]
 80015c2:	1c5a      	adds	r2, r3, #1
 80015c4:	6022      	str	r2, [r4, #0]
 80015c6:	7019      	strb	r1, [r3, #0]
 80015c8:	e7c5      	b.n	8001556 <_puts_r+0x42>
 80015ca:	4622      	mov	r2, r4
 80015cc:	4628      	mov	r0, r5
 80015ce:	f000 f817 	bl	8001600 <__swbuf_r>
 80015d2:	3001      	adds	r0, #1
 80015d4:	d1bf      	bne.n	8001556 <_puts_r+0x42>
 80015d6:	e7df      	b.n	8001598 <_puts_r+0x84>
 80015d8:	6823      	ldr	r3, [r4, #0]
 80015da:	250a      	movs	r5, #10
 80015dc:	1c5a      	adds	r2, r3, #1
 80015de:	6022      	str	r2, [r4, #0]
 80015e0:	701d      	strb	r5, [r3, #0]
 80015e2:	e7db      	b.n	800159c <_puts_r+0x88>
 80015e4:	08002424 	.word	0x08002424
 80015e8:	08002444 	.word	0x08002444
 80015ec:	08002404 	.word	0x08002404

080015f0 <puts>:
 80015f0:	4b02      	ldr	r3, [pc, #8]	; (80015fc <puts+0xc>)
 80015f2:	4601      	mov	r1, r0
 80015f4:	6818      	ldr	r0, [r3, #0]
 80015f6:	f7ff bf8d 	b.w	8001514 <_puts_r>
 80015fa:	bf00      	nop
 80015fc:	20000018 	.word	0x20000018

08001600 <__swbuf_r>:
 8001600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001602:	460e      	mov	r6, r1
 8001604:	4614      	mov	r4, r2
 8001606:	4605      	mov	r5, r0
 8001608:	b118      	cbz	r0, 8001612 <__swbuf_r+0x12>
 800160a:	6983      	ldr	r3, [r0, #24]
 800160c:	b90b      	cbnz	r3, 8001612 <__swbuf_r+0x12>
 800160e:	f000 f9d1 	bl	80019b4 <__sinit>
 8001612:	4b21      	ldr	r3, [pc, #132]	; (8001698 <__swbuf_r+0x98>)
 8001614:	429c      	cmp	r4, r3
 8001616:	d12b      	bne.n	8001670 <__swbuf_r+0x70>
 8001618:	686c      	ldr	r4, [r5, #4]
 800161a:	69a3      	ldr	r3, [r4, #24]
 800161c:	60a3      	str	r3, [r4, #8]
 800161e:	89a3      	ldrh	r3, [r4, #12]
 8001620:	071a      	lsls	r2, r3, #28
 8001622:	d52f      	bpl.n	8001684 <__swbuf_r+0x84>
 8001624:	6923      	ldr	r3, [r4, #16]
 8001626:	b36b      	cbz	r3, 8001684 <__swbuf_r+0x84>
 8001628:	6923      	ldr	r3, [r4, #16]
 800162a:	6820      	ldr	r0, [r4, #0]
 800162c:	1ac0      	subs	r0, r0, r3
 800162e:	6963      	ldr	r3, [r4, #20]
 8001630:	b2f6      	uxtb	r6, r6
 8001632:	4283      	cmp	r3, r0
 8001634:	4637      	mov	r7, r6
 8001636:	dc04      	bgt.n	8001642 <__swbuf_r+0x42>
 8001638:	4621      	mov	r1, r4
 800163a:	4628      	mov	r0, r5
 800163c:	f000 f926 	bl	800188c <_fflush_r>
 8001640:	bb30      	cbnz	r0, 8001690 <__swbuf_r+0x90>
 8001642:	68a3      	ldr	r3, [r4, #8]
 8001644:	3b01      	subs	r3, #1
 8001646:	60a3      	str	r3, [r4, #8]
 8001648:	6823      	ldr	r3, [r4, #0]
 800164a:	1c5a      	adds	r2, r3, #1
 800164c:	6022      	str	r2, [r4, #0]
 800164e:	701e      	strb	r6, [r3, #0]
 8001650:	6963      	ldr	r3, [r4, #20]
 8001652:	3001      	adds	r0, #1
 8001654:	4283      	cmp	r3, r0
 8001656:	d004      	beq.n	8001662 <__swbuf_r+0x62>
 8001658:	89a3      	ldrh	r3, [r4, #12]
 800165a:	07db      	lsls	r3, r3, #31
 800165c:	d506      	bpl.n	800166c <__swbuf_r+0x6c>
 800165e:	2e0a      	cmp	r6, #10
 8001660:	d104      	bne.n	800166c <__swbuf_r+0x6c>
 8001662:	4621      	mov	r1, r4
 8001664:	4628      	mov	r0, r5
 8001666:	f000 f911 	bl	800188c <_fflush_r>
 800166a:	b988      	cbnz	r0, 8001690 <__swbuf_r+0x90>
 800166c:	4638      	mov	r0, r7
 800166e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001670:	4b0a      	ldr	r3, [pc, #40]	; (800169c <__swbuf_r+0x9c>)
 8001672:	429c      	cmp	r4, r3
 8001674:	d101      	bne.n	800167a <__swbuf_r+0x7a>
 8001676:	68ac      	ldr	r4, [r5, #8]
 8001678:	e7cf      	b.n	800161a <__swbuf_r+0x1a>
 800167a:	4b09      	ldr	r3, [pc, #36]	; (80016a0 <__swbuf_r+0xa0>)
 800167c:	429c      	cmp	r4, r3
 800167e:	bf08      	it	eq
 8001680:	68ec      	ldreq	r4, [r5, #12]
 8001682:	e7ca      	b.n	800161a <__swbuf_r+0x1a>
 8001684:	4621      	mov	r1, r4
 8001686:	4628      	mov	r0, r5
 8001688:	f000 f80c 	bl	80016a4 <__swsetup_r>
 800168c:	2800      	cmp	r0, #0
 800168e:	d0cb      	beq.n	8001628 <__swbuf_r+0x28>
 8001690:	f04f 37ff 	mov.w	r7, #4294967295
 8001694:	e7ea      	b.n	800166c <__swbuf_r+0x6c>
 8001696:	bf00      	nop
 8001698:	08002424 	.word	0x08002424
 800169c:	08002444 	.word	0x08002444
 80016a0:	08002404 	.word	0x08002404

080016a4 <__swsetup_r>:
 80016a4:	4b32      	ldr	r3, [pc, #200]	; (8001770 <__swsetup_r+0xcc>)
 80016a6:	b570      	push	{r4, r5, r6, lr}
 80016a8:	681d      	ldr	r5, [r3, #0]
 80016aa:	4606      	mov	r6, r0
 80016ac:	460c      	mov	r4, r1
 80016ae:	b125      	cbz	r5, 80016ba <__swsetup_r+0x16>
 80016b0:	69ab      	ldr	r3, [r5, #24]
 80016b2:	b913      	cbnz	r3, 80016ba <__swsetup_r+0x16>
 80016b4:	4628      	mov	r0, r5
 80016b6:	f000 f97d 	bl	80019b4 <__sinit>
 80016ba:	4b2e      	ldr	r3, [pc, #184]	; (8001774 <__swsetup_r+0xd0>)
 80016bc:	429c      	cmp	r4, r3
 80016be:	d10f      	bne.n	80016e0 <__swsetup_r+0x3c>
 80016c0:	686c      	ldr	r4, [r5, #4]
 80016c2:	89a3      	ldrh	r3, [r4, #12]
 80016c4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80016c8:	0719      	lsls	r1, r3, #28
 80016ca:	d42c      	bmi.n	8001726 <__swsetup_r+0x82>
 80016cc:	06dd      	lsls	r5, r3, #27
 80016ce:	d411      	bmi.n	80016f4 <__swsetup_r+0x50>
 80016d0:	2309      	movs	r3, #9
 80016d2:	6033      	str	r3, [r6, #0]
 80016d4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80016d8:	81a3      	strh	r3, [r4, #12]
 80016da:	f04f 30ff 	mov.w	r0, #4294967295
 80016de:	e03e      	b.n	800175e <__swsetup_r+0xba>
 80016e0:	4b25      	ldr	r3, [pc, #148]	; (8001778 <__swsetup_r+0xd4>)
 80016e2:	429c      	cmp	r4, r3
 80016e4:	d101      	bne.n	80016ea <__swsetup_r+0x46>
 80016e6:	68ac      	ldr	r4, [r5, #8]
 80016e8:	e7eb      	b.n	80016c2 <__swsetup_r+0x1e>
 80016ea:	4b24      	ldr	r3, [pc, #144]	; (800177c <__swsetup_r+0xd8>)
 80016ec:	429c      	cmp	r4, r3
 80016ee:	bf08      	it	eq
 80016f0:	68ec      	ldreq	r4, [r5, #12]
 80016f2:	e7e6      	b.n	80016c2 <__swsetup_r+0x1e>
 80016f4:	0758      	lsls	r0, r3, #29
 80016f6:	d512      	bpl.n	800171e <__swsetup_r+0x7a>
 80016f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80016fa:	b141      	cbz	r1, 800170e <__swsetup_r+0x6a>
 80016fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001700:	4299      	cmp	r1, r3
 8001702:	d002      	beq.n	800170a <__swsetup_r+0x66>
 8001704:	4630      	mov	r0, r6
 8001706:	f000 fa59 	bl	8001bbc <_free_r>
 800170a:	2300      	movs	r3, #0
 800170c:	6363      	str	r3, [r4, #52]	; 0x34
 800170e:	89a3      	ldrh	r3, [r4, #12]
 8001710:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001714:	81a3      	strh	r3, [r4, #12]
 8001716:	2300      	movs	r3, #0
 8001718:	6063      	str	r3, [r4, #4]
 800171a:	6923      	ldr	r3, [r4, #16]
 800171c:	6023      	str	r3, [r4, #0]
 800171e:	89a3      	ldrh	r3, [r4, #12]
 8001720:	f043 0308 	orr.w	r3, r3, #8
 8001724:	81a3      	strh	r3, [r4, #12]
 8001726:	6923      	ldr	r3, [r4, #16]
 8001728:	b94b      	cbnz	r3, 800173e <__swsetup_r+0x9a>
 800172a:	89a3      	ldrh	r3, [r4, #12]
 800172c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001730:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001734:	d003      	beq.n	800173e <__swsetup_r+0x9a>
 8001736:	4621      	mov	r1, r4
 8001738:	4630      	mov	r0, r6
 800173a:	f000 f9ff 	bl	8001b3c <__smakebuf_r>
 800173e:	89a0      	ldrh	r0, [r4, #12]
 8001740:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001744:	f010 0301 	ands.w	r3, r0, #1
 8001748:	d00a      	beq.n	8001760 <__swsetup_r+0xbc>
 800174a:	2300      	movs	r3, #0
 800174c:	60a3      	str	r3, [r4, #8]
 800174e:	6963      	ldr	r3, [r4, #20]
 8001750:	425b      	negs	r3, r3
 8001752:	61a3      	str	r3, [r4, #24]
 8001754:	6923      	ldr	r3, [r4, #16]
 8001756:	b943      	cbnz	r3, 800176a <__swsetup_r+0xc6>
 8001758:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800175c:	d1ba      	bne.n	80016d4 <__swsetup_r+0x30>
 800175e:	bd70      	pop	{r4, r5, r6, pc}
 8001760:	0781      	lsls	r1, r0, #30
 8001762:	bf58      	it	pl
 8001764:	6963      	ldrpl	r3, [r4, #20]
 8001766:	60a3      	str	r3, [r4, #8]
 8001768:	e7f4      	b.n	8001754 <__swsetup_r+0xb0>
 800176a:	2000      	movs	r0, #0
 800176c:	e7f7      	b.n	800175e <__swsetup_r+0xba>
 800176e:	bf00      	nop
 8001770:	20000018 	.word	0x20000018
 8001774:	08002424 	.word	0x08002424
 8001778:	08002444 	.word	0x08002444
 800177c:	08002404 	.word	0x08002404

08001780 <__sflush_r>:
 8001780:	898a      	ldrh	r2, [r1, #12]
 8001782:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001786:	4605      	mov	r5, r0
 8001788:	0710      	lsls	r0, r2, #28
 800178a:	460c      	mov	r4, r1
 800178c:	d458      	bmi.n	8001840 <__sflush_r+0xc0>
 800178e:	684b      	ldr	r3, [r1, #4]
 8001790:	2b00      	cmp	r3, #0
 8001792:	dc05      	bgt.n	80017a0 <__sflush_r+0x20>
 8001794:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001796:	2b00      	cmp	r3, #0
 8001798:	dc02      	bgt.n	80017a0 <__sflush_r+0x20>
 800179a:	2000      	movs	r0, #0
 800179c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80017a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80017a2:	2e00      	cmp	r6, #0
 80017a4:	d0f9      	beq.n	800179a <__sflush_r+0x1a>
 80017a6:	2300      	movs	r3, #0
 80017a8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80017ac:	682f      	ldr	r7, [r5, #0]
 80017ae:	602b      	str	r3, [r5, #0]
 80017b0:	d032      	beq.n	8001818 <__sflush_r+0x98>
 80017b2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80017b4:	89a3      	ldrh	r3, [r4, #12]
 80017b6:	075a      	lsls	r2, r3, #29
 80017b8:	d505      	bpl.n	80017c6 <__sflush_r+0x46>
 80017ba:	6863      	ldr	r3, [r4, #4]
 80017bc:	1ac0      	subs	r0, r0, r3
 80017be:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80017c0:	b10b      	cbz	r3, 80017c6 <__sflush_r+0x46>
 80017c2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80017c4:	1ac0      	subs	r0, r0, r3
 80017c6:	2300      	movs	r3, #0
 80017c8:	4602      	mov	r2, r0
 80017ca:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80017cc:	6a21      	ldr	r1, [r4, #32]
 80017ce:	4628      	mov	r0, r5
 80017d0:	47b0      	blx	r6
 80017d2:	1c43      	adds	r3, r0, #1
 80017d4:	89a3      	ldrh	r3, [r4, #12]
 80017d6:	d106      	bne.n	80017e6 <__sflush_r+0x66>
 80017d8:	6829      	ldr	r1, [r5, #0]
 80017da:	291d      	cmp	r1, #29
 80017dc:	d82c      	bhi.n	8001838 <__sflush_r+0xb8>
 80017de:	4a2a      	ldr	r2, [pc, #168]	; (8001888 <__sflush_r+0x108>)
 80017e0:	40ca      	lsrs	r2, r1
 80017e2:	07d6      	lsls	r6, r2, #31
 80017e4:	d528      	bpl.n	8001838 <__sflush_r+0xb8>
 80017e6:	2200      	movs	r2, #0
 80017e8:	6062      	str	r2, [r4, #4]
 80017ea:	04d9      	lsls	r1, r3, #19
 80017ec:	6922      	ldr	r2, [r4, #16]
 80017ee:	6022      	str	r2, [r4, #0]
 80017f0:	d504      	bpl.n	80017fc <__sflush_r+0x7c>
 80017f2:	1c42      	adds	r2, r0, #1
 80017f4:	d101      	bne.n	80017fa <__sflush_r+0x7a>
 80017f6:	682b      	ldr	r3, [r5, #0]
 80017f8:	b903      	cbnz	r3, 80017fc <__sflush_r+0x7c>
 80017fa:	6560      	str	r0, [r4, #84]	; 0x54
 80017fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80017fe:	602f      	str	r7, [r5, #0]
 8001800:	2900      	cmp	r1, #0
 8001802:	d0ca      	beq.n	800179a <__sflush_r+0x1a>
 8001804:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001808:	4299      	cmp	r1, r3
 800180a:	d002      	beq.n	8001812 <__sflush_r+0x92>
 800180c:	4628      	mov	r0, r5
 800180e:	f000 f9d5 	bl	8001bbc <_free_r>
 8001812:	2000      	movs	r0, #0
 8001814:	6360      	str	r0, [r4, #52]	; 0x34
 8001816:	e7c1      	b.n	800179c <__sflush_r+0x1c>
 8001818:	6a21      	ldr	r1, [r4, #32]
 800181a:	2301      	movs	r3, #1
 800181c:	4628      	mov	r0, r5
 800181e:	47b0      	blx	r6
 8001820:	1c41      	adds	r1, r0, #1
 8001822:	d1c7      	bne.n	80017b4 <__sflush_r+0x34>
 8001824:	682b      	ldr	r3, [r5, #0]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d0c4      	beq.n	80017b4 <__sflush_r+0x34>
 800182a:	2b1d      	cmp	r3, #29
 800182c:	d001      	beq.n	8001832 <__sflush_r+0xb2>
 800182e:	2b16      	cmp	r3, #22
 8001830:	d101      	bne.n	8001836 <__sflush_r+0xb6>
 8001832:	602f      	str	r7, [r5, #0]
 8001834:	e7b1      	b.n	800179a <__sflush_r+0x1a>
 8001836:	89a3      	ldrh	r3, [r4, #12]
 8001838:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800183c:	81a3      	strh	r3, [r4, #12]
 800183e:	e7ad      	b.n	800179c <__sflush_r+0x1c>
 8001840:	690f      	ldr	r7, [r1, #16]
 8001842:	2f00      	cmp	r7, #0
 8001844:	d0a9      	beq.n	800179a <__sflush_r+0x1a>
 8001846:	0793      	lsls	r3, r2, #30
 8001848:	680e      	ldr	r6, [r1, #0]
 800184a:	bf08      	it	eq
 800184c:	694b      	ldreq	r3, [r1, #20]
 800184e:	600f      	str	r7, [r1, #0]
 8001850:	bf18      	it	ne
 8001852:	2300      	movne	r3, #0
 8001854:	eba6 0807 	sub.w	r8, r6, r7
 8001858:	608b      	str	r3, [r1, #8]
 800185a:	f1b8 0f00 	cmp.w	r8, #0
 800185e:	dd9c      	ble.n	800179a <__sflush_r+0x1a>
 8001860:	6a21      	ldr	r1, [r4, #32]
 8001862:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001864:	4643      	mov	r3, r8
 8001866:	463a      	mov	r2, r7
 8001868:	4628      	mov	r0, r5
 800186a:	47b0      	blx	r6
 800186c:	2800      	cmp	r0, #0
 800186e:	dc06      	bgt.n	800187e <__sflush_r+0xfe>
 8001870:	89a3      	ldrh	r3, [r4, #12]
 8001872:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001876:	81a3      	strh	r3, [r4, #12]
 8001878:	f04f 30ff 	mov.w	r0, #4294967295
 800187c:	e78e      	b.n	800179c <__sflush_r+0x1c>
 800187e:	4407      	add	r7, r0
 8001880:	eba8 0800 	sub.w	r8, r8, r0
 8001884:	e7e9      	b.n	800185a <__sflush_r+0xda>
 8001886:	bf00      	nop
 8001888:	20400001 	.word	0x20400001

0800188c <_fflush_r>:
 800188c:	b538      	push	{r3, r4, r5, lr}
 800188e:	690b      	ldr	r3, [r1, #16]
 8001890:	4605      	mov	r5, r0
 8001892:	460c      	mov	r4, r1
 8001894:	b913      	cbnz	r3, 800189c <_fflush_r+0x10>
 8001896:	2500      	movs	r5, #0
 8001898:	4628      	mov	r0, r5
 800189a:	bd38      	pop	{r3, r4, r5, pc}
 800189c:	b118      	cbz	r0, 80018a6 <_fflush_r+0x1a>
 800189e:	6983      	ldr	r3, [r0, #24]
 80018a0:	b90b      	cbnz	r3, 80018a6 <_fflush_r+0x1a>
 80018a2:	f000 f887 	bl	80019b4 <__sinit>
 80018a6:	4b14      	ldr	r3, [pc, #80]	; (80018f8 <_fflush_r+0x6c>)
 80018a8:	429c      	cmp	r4, r3
 80018aa:	d11b      	bne.n	80018e4 <_fflush_r+0x58>
 80018ac:	686c      	ldr	r4, [r5, #4]
 80018ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d0ef      	beq.n	8001896 <_fflush_r+0xa>
 80018b6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80018b8:	07d0      	lsls	r0, r2, #31
 80018ba:	d404      	bmi.n	80018c6 <_fflush_r+0x3a>
 80018bc:	0599      	lsls	r1, r3, #22
 80018be:	d402      	bmi.n	80018c6 <_fflush_r+0x3a>
 80018c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80018c2:	f000 f915 	bl	8001af0 <__retarget_lock_acquire_recursive>
 80018c6:	4628      	mov	r0, r5
 80018c8:	4621      	mov	r1, r4
 80018ca:	f7ff ff59 	bl	8001780 <__sflush_r>
 80018ce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80018d0:	07da      	lsls	r2, r3, #31
 80018d2:	4605      	mov	r5, r0
 80018d4:	d4e0      	bmi.n	8001898 <_fflush_r+0xc>
 80018d6:	89a3      	ldrh	r3, [r4, #12]
 80018d8:	059b      	lsls	r3, r3, #22
 80018da:	d4dd      	bmi.n	8001898 <_fflush_r+0xc>
 80018dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80018de:	f000 f908 	bl	8001af2 <__retarget_lock_release_recursive>
 80018e2:	e7d9      	b.n	8001898 <_fflush_r+0xc>
 80018e4:	4b05      	ldr	r3, [pc, #20]	; (80018fc <_fflush_r+0x70>)
 80018e6:	429c      	cmp	r4, r3
 80018e8:	d101      	bne.n	80018ee <_fflush_r+0x62>
 80018ea:	68ac      	ldr	r4, [r5, #8]
 80018ec:	e7df      	b.n	80018ae <_fflush_r+0x22>
 80018ee:	4b04      	ldr	r3, [pc, #16]	; (8001900 <_fflush_r+0x74>)
 80018f0:	429c      	cmp	r4, r3
 80018f2:	bf08      	it	eq
 80018f4:	68ec      	ldreq	r4, [r5, #12]
 80018f6:	e7da      	b.n	80018ae <_fflush_r+0x22>
 80018f8:	08002424 	.word	0x08002424
 80018fc:	08002444 	.word	0x08002444
 8001900:	08002404 	.word	0x08002404

08001904 <std>:
 8001904:	2300      	movs	r3, #0
 8001906:	b510      	push	{r4, lr}
 8001908:	4604      	mov	r4, r0
 800190a:	e9c0 3300 	strd	r3, r3, [r0]
 800190e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001912:	6083      	str	r3, [r0, #8]
 8001914:	8181      	strh	r1, [r0, #12]
 8001916:	6643      	str	r3, [r0, #100]	; 0x64
 8001918:	81c2      	strh	r2, [r0, #14]
 800191a:	6183      	str	r3, [r0, #24]
 800191c:	4619      	mov	r1, r3
 800191e:	2208      	movs	r2, #8
 8001920:	305c      	adds	r0, #92	; 0x5c
 8001922:	f7ff fdef 	bl	8001504 <memset>
 8001926:	4b05      	ldr	r3, [pc, #20]	; (800193c <std+0x38>)
 8001928:	6263      	str	r3, [r4, #36]	; 0x24
 800192a:	4b05      	ldr	r3, [pc, #20]	; (8001940 <std+0x3c>)
 800192c:	62a3      	str	r3, [r4, #40]	; 0x28
 800192e:	4b05      	ldr	r3, [pc, #20]	; (8001944 <std+0x40>)
 8001930:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001932:	4b05      	ldr	r3, [pc, #20]	; (8001948 <std+0x44>)
 8001934:	6224      	str	r4, [r4, #32]
 8001936:	6323      	str	r3, [r4, #48]	; 0x30
 8001938:	bd10      	pop	{r4, pc}
 800193a:	bf00      	nop
 800193c:	08001d2d 	.word	0x08001d2d
 8001940:	08001d4f 	.word	0x08001d4f
 8001944:	08001d87 	.word	0x08001d87
 8001948:	08001dab 	.word	0x08001dab

0800194c <_cleanup_r>:
 800194c:	4901      	ldr	r1, [pc, #4]	; (8001954 <_cleanup_r+0x8>)
 800194e:	f000 b8af 	b.w	8001ab0 <_fwalk_reent>
 8001952:	bf00      	nop
 8001954:	0800188d 	.word	0x0800188d

08001958 <__sfmoreglue>:
 8001958:	b570      	push	{r4, r5, r6, lr}
 800195a:	1e4a      	subs	r2, r1, #1
 800195c:	2568      	movs	r5, #104	; 0x68
 800195e:	4355      	muls	r5, r2
 8001960:	460e      	mov	r6, r1
 8001962:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001966:	f000 f977 	bl	8001c58 <_malloc_r>
 800196a:	4604      	mov	r4, r0
 800196c:	b140      	cbz	r0, 8001980 <__sfmoreglue+0x28>
 800196e:	2100      	movs	r1, #0
 8001970:	e9c0 1600 	strd	r1, r6, [r0]
 8001974:	300c      	adds	r0, #12
 8001976:	60a0      	str	r0, [r4, #8]
 8001978:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800197c:	f7ff fdc2 	bl	8001504 <memset>
 8001980:	4620      	mov	r0, r4
 8001982:	bd70      	pop	{r4, r5, r6, pc}

08001984 <__sfp_lock_acquire>:
 8001984:	4801      	ldr	r0, [pc, #4]	; (800198c <__sfp_lock_acquire+0x8>)
 8001986:	f000 b8b3 	b.w	8001af0 <__retarget_lock_acquire_recursive>
 800198a:	bf00      	nop
 800198c:	2000018c 	.word	0x2000018c

08001990 <__sfp_lock_release>:
 8001990:	4801      	ldr	r0, [pc, #4]	; (8001998 <__sfp_lock_release+0x8>)
 8001992:	f000 b8ae 	b.w	8001af2 <__retarget_lock_release_recursive>
 8001996:	bf00      	nop
 8001998:	2000018c 	.word	0x2000018c

0800199c <__sinit_lock_acquire>:
 800199c:	4801      	ldr	r0, [pc, #4]	; (80019a4 <__sinit_lock_acquire+0x8>)
 800199e:	f000 b8a7 	b.w	8001af0 <__retarget_lock_acquire_recursive>
 80019a2:	bf00      	nop
 80019a4:	20000187 	.word	0x20000187

080019a8 <__sinit_lock_release>:
 80019a8:	4801      	ldr	r0, [pc, #4]	; (80019b0 <__sinit_lock_release+0x8>)
 80019aa:	f000 b8a2 	b.w	8001af2 <__retarget_lock_release_recursive>
 80019ae:	bf00      	nop
 80019b0:	20000187 	.word	0x20000187

080019b4 <__sinit>:
 80019b4:	b510      	push	{r4, lr}
 80019b6:	4604      	mov	r4, r0
 80019b8:	f7ff fff0 	bl	800199c <__sinit_lock_acquire>
 80019bc:	69a3      	ldr	r3, [r4, #24]
 80019be:	b11b      	cbz	r3, 80019c8 <__sinit+0x14>
 80019c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80019c4:	f7ff bff0 	b.w	80019a8 <__sinit_lock_release>
 80019c8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80019cc:	6523      	str	r3, [r4, #80]	; 0x50
 80019ce:	4b13      	ldr	r3, [pc, #76]	; (8001a1c <__sinit+0x68>)
 80019d0:	4a13      	ldr	r2, [pc, #76]	; (8001a20 <__sinit+0x6c>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	62a2      	str	r2, [r4, #40]	; 0x28
 80019d6:	42a3      	cmp	r3, r4
 80019d8:	bf04      	itt	eq
 80019da:	2301      	moveq	r3, #1
 80019dc:	61a3      	streq	r3, [r4, #24]
 80019de:	4620      	mov	r0, r4
 80019e0:	f000 f820 	bl	8001a24 <__sfp>
 80019e4:	6060      	str	r0, [r4, #4]
 80019e6:	4620      	mov	r0, r4
 80019e8:	f000 f81c 	bl	8001a24 <__sfp>
 80019ec:	60a0      	str	r0, [r4, #8]
 80019ee:	4620      	mov	r0, r4
 80019f0:	f000 f818 	bl	8001a24 <__sfp>
 80019f4:	2200      	movs	r2, #0
 80019f6:	60e0      	str	r0, [r4, #12]
 80019f8:	2104      	movs	r1, #4
 80019fa:	6860      	ldr	r0, [r4, #4]
 80019fc:	f7ff ff82 	bl	8001904 <std>
 8001a00:	68a0      	ldr	r0, [r4, #8]
 8001a02:	2201      	movs	r2, #1
 8001a04:	2109      	movs	r1, #9
 8001a06:	f7ff ff7d 	bl	8001904 <std>
 8001a0a:	68e0      	ldr	r0, [r4, #12]
 8001a0c:	2202      	movs	r2, #2
 8001a0e:	2112      	movs	r1, #18
 8001a10:	f7ff ff78 	bl	8001904 <std>
 8001a14:	2301      	movs	r3, #1
 8001a16:	61a3      	str	r3, [r4, #24]
 8001a18:	e7d2      	b.n	80019c0 <__sinit+0xc>
 8001a1a:	bf00      	nop
 8001a1c:	08002400 	.word	0x08002400
 8001a20:	0800194d 	.word	0x0800194d

08001a24 <__sfp>:
 8001a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a26:	4607      	mov	r7, r0
 8001a28:	f7ff ffac 	bl	8001984 <__sfp_lock_acquire>
 8001a2c:	4b1e      	ldr	r3, [pc, #120]	; (8001aa8 <__sfp+0x84>)
 8001a2e:	681e      	ldr	r6, [r3, #0]
 8001a30:	69b3      	ldr	r3, [r6, #24]
 8001a32:	b913      	cbnz	r3, 8001a3a <__sfp+0x16>
 8001a34:	4630      	mov	r0, r6
 8001a36:	f7ff ffbd 	bl	80019b4 <__sinit>
 8001a3a:	3648      	adds	r6, #72	; 0x48
 8001a3c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001a40:	3b01      	subs	r3, #1
 8001a42:	d503      	bpl.n	8001a4c <__sfp+0x28>
 8001a44:	6833      	ldr	r3, [r6, #0]
 8001a46:	b30b      	cbz	r3, 8001a8c <__sfp+0x68>
 8001a48:	6836      	ldr	r6, [r6, #0]
 8001a4a:	e7f7      	b.n	8001a3c <__sfp+0x18>
 8001a4c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001a50:	b9d5      	cbnz	r5, 8001a88 <__sfp+0x64>
 8001a52:	4b16      	ldr	r3, [pc, #88]	; (8001aac <__sfp+0x88>)
 8001a54:	60e3      	str	r3, [r4, #12]
 8001a56:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8001a5a:	6665      	str	r5, [r4, #100]	; 0x64
 8001a5c:	f000 f847 	bl	8001aee <__retarget_lock_init_recursive>
 8001a60:	f7ff ff96 	bl	8001990 <__sfp_lock_release>
 8001a64:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8001a68:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8001a6c:	6025      	str	r5, [r4, #0]
 8001a6e:	61a5      	str	r5, [r4, #24]
 8001a70:	2208      	movs	r2, #8
 8001a72:	4629      	mov	r1, r5
 8001a74:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001a78:	f7ff fd44 	bl	8001504 <memset>
 8001a7c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001a80:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001a84:	4620      	mov	r0, r4
 8001a86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001a88:	3468      	adds	r4, #104	; 0x68
 8001a8a:	e7d9      	b.n	8001a40 <__sfp+0x1c>
 8001a8c:	2104      	movs	r1, #4
 8001a8e:	4638      	mov	r0, r7
 8001a90:	f7ff ff62 	bl	8001958 <__sfmoreglue>
 8001a94:	4604      	mov	r4, r0
 8001a96:	6030      	str	r0, [r6, #0]
 8001a98:	2800      	cmp	r0, #0
 8001a9a:	d1d5      	bne.n	8001a48 <__sfp+0x24>
 8001a9c:	f7ff ff78 	bl	8001990 <__sfp_lock_release>
 8001aa0:	230c      	movs	r3, #12
 8001aa2:	603b      	str	r3, [r7, #0]
 8001aa4:	e7ee      	b.n	8001a84 <__sfp+0x60>
 8001aa6:	bf00      	nop
 8001aa8:	08002400 	.word	0x08002400
 8001aac:	ffff0001 	.word	0xffff0001

08001ab0 <_fwalk_reent>:
 8001ab0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001ab4:	4606      	mov	r6, r0
 8001ab6:	4688      	mov	r8, r1
 8001ab8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001abc:	2700      	movs	r7, #0
 8001abe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001ac2:	f1b9 0901 	subs.w	r9, r9, #1
 8001ac6:	d505      	bpl.n	8001ad4 <_fwalk_reent+0x24>
 8001ac8:	6824      	ldr	r4, [r4, #0]
 8001aca:	2c00      	cmp	r4, #0
 8001acc:	d1f7      	bne.n	8001abe <_fwalk_reent+0xe>
 8001ace:	4638      	mov	r0, r7
 8001ad0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001ad4:	89ab      	ldrh	r3, [r5, #12]
 8001ad6:	2b01      	cmp	r3, #1
 8001ad8:	d907      	bls.n	8001aea <_fwalk_reent+0x3a>
 8001ada:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001ade:	3301      	adds	r3, #1
 8001ae0:	d003      	beq.n	8001aea <_fwalk_reent+0x3a>
 8001ae2:	4629      	mov	r1, r5
 8001ae4:	4630      	mov	r0, r6
 8001ae6:	47c0      	blx	r8
 8001ae8:	4307      	orrs	r7, r0
 8001aea:	3568      	adds	r5, #104	; 0x68
 8001aec:	e7e9      	b.n	8001ac2 <_fwalk_reent+0x12>

08001aee <__retarget_lock_init_recursive>:
 8001aee:	4770      	bx	lr

08001af0 <__retarget_lock_acquire_recursive>:
 8001af0:	4770      	bx	lr

08001af2 <__retarget_lock_release_recursive>:
 8001af2:	4770      	bx	lr

08001af4 <__swhatbuf_r>:
 8001af4:	b570      	push	{r4, r5, r6, lr}
 8001af6:	460e      	mov	r6, r1
 8001af8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001afc:	2900      	cmp	r1, #0
 8001afe:	b096      	sub	sp, #88	; 0x58
 8001b00:	4614      	mov	r4, r2
 8001b02:	461d      	mov	r5, r3
 8001b04:	da07      	bge.n	8001b16 <__swhatbuf_r+0x22>
 8001b06:	2300      	movs	r3, #0
 8001b08:	602b      	str	r3, [r5, #0]
 8001b0a:	89b3      	ldrh	r3, [r6, #12]
 8001b0c:	061a      	lsls	r2, r3, #24
 8001b0e:	d410      	bmi.n	8001b32 <__swhatbuf_r+0x3e>
 8001b10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b14:	e00e      	b.n	8001b34 <__swhatbuf_r+0x40>
 8001b16:	466a      	mov	r2, sp
 8001b18:	f000 f96e 	bl	8001df8 <_fstat_r>
 8001b1c:	2800      	cmp	r0, #0
 8001b1e:	dbf2      	blt.n	8001b06 <__swhatbuf_r+0x12>
 8001b20:	9a01      	ldr	r2, [sp, #4]
 8001b22:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8001b26:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8001b2a:	425a      	negs	r2, r3
 8001b2c:	415a      	adcs	r2, r3
 8001b2e:	602a      	str	r2, [r5, #0]
 8001b30:	e7ee      	b.n	8001b10 <__swhatbuf_r+0x1c>
 8001b32:	2340      	movs	r3, #64	; 0x40
 8001b34:	2000      	movs	r0, #0
 8001b36:	6023      	str	r3, [r4, #0]
 8001b38:	b016      	add	sp, #88	; 0x58
 8001b3a:	bd70      	pop	{r4, r5, r6, pc}

08001b3c <__smakebuf_r>:
 8001b3c:	898b      	ldrh	r3, [r1, #12]
 8001b3e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001b40:	079d      	lsls	r5, r3, #30
 8001b42:	4606      	mov	r6, r0
 8001b44:	460c      	mov	r4, r1
 8001b46:	d507      	bpl.n	8001b58 <__smakebuf_r+0x1c>
 8001b48:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001b4c:	6023      	str	r3, [r4, #0]
 8001b4e:	6123      	str	r3, [r4, #16]
 8001b50:	2301      	movs	r3, #1
 8001b52:	6163      	str	r3, [r4, #20]
 8001b54:	b002      	add	sp, #8
 8001b56:	bd70      	pop	{r4, r5, r6, pc}
 8001b58:	ab01      	add	r3, sp, #4
 8001b5a:	466a      	mov	r2, sp
 8001b5c:	f7ff ffca 	bl	8001af4 <__swhatbuf_r>
 8001b60:	9900      	ldr	r1, [sp, #0]
 8001b62:	4605      	mov	r5, r0
 8001b64:	4630      	mov	r0, r6
 8001b66:	f000 f877 	bl	8001c58 <_malloc_r>
 8001b6a:	b948      	cbnz	r0, 8001b80 <__smakebuf_r+0x44>
 8001b6c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001b70:	059a      	lsls	r2, r3, #22
 8001b72:	d4ef      	bmi.n	8001b54 <__smakebuf_r+0x18>
 8001b74:	f023 0303 	bic.w	r3, r3, #3
 8001b78:	f043 0302 	orr.w	r3, r3, #2
 8001b7c:	81a3      	strh	r3, [r4, #12]
 8001b7e:	e7e3      	b.n	8001b48 <__smakebuf_r+0xc>
 8001b80:	4b0d      	ldr	r3, [pc, #52]	; (8001bb8 <__smakebuf_r+0x7c>)
 8001b82:	62b3      	str	r3, [r6, #40]	; 0x28
 8001b84:	89a3      	ldrh	r3, [r4, #12]
 8001b86:	6020      	str	r0, [r4, #0]
 8001b88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b8c:	81a3      	strh	r3, [r4, #12]
 8001b8e:	9b00      	ldr	r3, [sp, #0]
 8001b90:	6163      	str	r3, [r4, #20]
 8001b92:	9b01      	ldr	r3, [sp, #4]
 8001b94:	6120      	str	r0, [r4, #16]
 8001b96:	b15b      	cbz	r3, 8001bb0 <__smakebuf_r+0x74>
 8001b98:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001b9c:	4630      	mov	r0, r6
 8001b9e:	f000 f93d 	bl	8001e1c <_isatty_r>
 8001ba2:	b128      	cbz	r0, 8001bb0 <__smakebuf_r+0x74>
 8001ba4:	89a3      	ldrh	r3, [r4, #12]
 8001ba6:	f023 0303 	bic.w	r3, r3, #3
 8001baa:	f043 0301 	orr.w	r3, r3, #1
 8001bae:	81a3      	strh	r3, [r4, #12]
 8001bb0:	89a0      	ldrh	r0, [r4, #12]
 8001bb2:	4305      	orrs	r5, r0
 8001bb4:	81a5      	strh	r5, [r4, #12]
 8001bb6:	e7cd      	b.n	8001b54 <__smakebuf_r+0x18>
 8001bb8:	0800194d 	.word	0x0800194d

08001bbc <_free_r>:
 8001bbc:	b538      	push	{r3, r4, r5, lr}
 8001bbe:	4605      	mov	r5, r0
 8001bc0:	2900      	cmp	r1, #0
 8001bc2:	d045      	beq.n	8001c50 <_free_r+0x94>
 8001bc4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001bc8:	1f0c      	subs	r4, r1, #4
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	bfb8      	it	lt
 8001bce:	18e4      	addlt	r4, r4, r3
 8001bd0:	f000 f946 	bl	8001e60 <__malloc_lock>
 8001bd4:	4a1f      	ldr	r2, [pc, #124]	; (8001c54 <_free_r+0x98>)
 8001bd6:	6813      	ldr	r3, [r2, #0]
 8001bd8:	4610      	mov	r0, r2
 8001bda:	b933      	cbnz	r3, 8001bea <_free_r+0x2e>
 8001bdc:	6063      	str	r3, [r4, #4]
 8001bde:	6014      	str	r4, [r2, #0]
 8001be0:	4628      	mov	r0, r5
 8001be2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001be6:	f000 b941 	b.w	8001e6c <__malloc_unlock>
 8001bea:	42a3      	cmp	r3, r4
 8001bec:	d90b      	bls.n	8001c06 <_free_r+0x4a>
 8001bee:	6821      	ldr	r1, [r4, #0]
 8001bf0:	1862      	adds	r2, r4, r1
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	bf04      	itt	eq
 8001bf6:	681a      	ldreq	r2, [r3, #0]
 8001bf8:	685b      	ldreq	r3, [r3, #4]
 8001bfa:	6063      	str	r3, [r4, #4]
 8001bfc:	bf04      	itt	eq
 8001bfe:	1852      	addeq	r2, r2, r1
 8001c00:	6022      	streq	r2, [r4, #0]
 8001c02:	6004      	str	r4, [r0, #0]
 8001c04:	e7ec      	b.n	8001be0 <_free_r+0x24>
 8001c06:	461a      	mov	r2, r3
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	b10b      	cbz	r3, 8001c10 <_free_r+0x54>
 8001c0c:	42a3      	cmp	r3, r4
 8001c0e:	d9fa      	bls.n	8001c06 <_free_r+0x4a>
 8001c10:	6811      	ldr	r1, [r2, #0]
 8001c12:	1850      	adds	r0, r2, r1
 8001c14:	42a0      	cmp	r0, r4
 8001c16:	d10b      	bne.n	8001c30 <_free_r+0x74>
 8001c18:	6820      	ldr	r0, [r4, #0]
 8001c1a:	4401      	add	r1, r0
 8001c1c:	1850      	adds	r0, r2, r1
 8001c1e:	4283      	cmp	r3, r0
 8001c20:	6011      	str	r1, [r2, #0]
 8001c22:	d1dd      	bne.n	8001be0 <_free_r+0x24>
 8001c24:	6818      	ldr	r0, [r3, #0]
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	6053      	str	r3, [r2, #4]
 8001c2a:	4401      	add	r1, r0
 8001c2c:	6011      	str	r1, [r2, #0]
 8001c2e:	e7d7      	b.n	8001be0 <_free_r+0x24>
 8001c30:	d902      	bls.n	8001c38 <_free_r+0x7c>
 8001c32:	230c      	movs	r3, #12
 8001c34:	602b      	str	r3, [r5, #0]
 8001c36:	e7d3      	b.n	8001be0 <_free_r+0x24>
 8001c38:	6820      	ldr	r0, [r4, #0]
 8001c3a:	1821      	adds	r1, r4, r0
 8001c3c:	428b      	cmp	r3, r1
 8001c3e:	bf04      	itt	eq
 8001c40:	6819      	ldreq	r1, [r3, #0]
 8001c42:	685b      	ldreq	r3, [r3, #4]
 8001c44:	6063      	str	r3, [r4, #4]
 8001c46:	bf04      	itt	eq
 8001c48:	1809      	addeq	r1, r1, r0
 8001c4a:	6021      	streq	r1, [r4, #0]
 8001c4c:	6054      	str	r4, [r2, #4]
 8001c4e:	e7c7      	b.n	8001be0 <_free_r+0x24>
 8001c50:	bd38      	pop	{r3, r4, r5, pc}
 8001c52:	bf00      	nop
 8001c54:	200000a8 	.word	0x200000a8

08001c58 <_malloc_r>:
 8001c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c5a:	1ccd      	adds	r5, r1, #3
 8001c5c:	f025 0503 	bic.w	r5, r5, #3
 8001c60:	3508      	adds	r5, #8
 8001c62:	2d0c      	cmp	r5, #12
 8001c64:	bf38      	it	cc
 8001c66:	250c      	movcc	r5, #12
 8001c68:	2d00      	cmp	r5, #0
 8001c6a:	4606      	mov	r6, r0
 8001c6c:	db01      	blt.n	8001c72 <_malloc_r+0x1a>
 8001c6e:	42a9      	cmp	r1, r5
 8001c70:	d903      	bls.n	8001c7a <_malloc_r+0x22>
 8001c72:	230c      	movs	r3, #12
 8001c74:	6033      	str	r3, [r6, #0]
 8001c76:	2000      	movs	r0, #0
 8001c78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001c7a:	f000 f8f1 	bl	8001e60 <__malloc_lock>
 8001c7e:	4921      	ldr	r1, [pc, #132]	; (8001d04 <_malloc_r+0xac>)
 8001c80:	680a      	ldr	r2, [r1, #0]
 8001c82:	4614      	mov	r4, r2
 8001c84:	b99c      	cbnz	r4, 8001cae <_malloc_r+0x56>
 8001c86:	4f20      	ldr	r7, [pc, #128]	; (8001d08 <_malloc_r+0xb0>)
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	b923      	cbnz	r3, 8001c96 <_malloc_r+0x3e>
 8001c8c:	4621      	mov	r1, r4
 8001c8e:	4630      	mov	r0, r6
 8001c90:	f000 f83c 	bl	8001d0c <_sbrk_r>
 8001c94:	6038      	str	r0, [r7, #0]
 8001c96:	4629      	mov	r1, r5
 8001c98:	4630      	mov	r0, r6
 8001c9a:	f000 f837 	bl	8001d0c <_sbrk_r>
 8001c9e:	1c43      	adds	r3, r0, #1
 8001ca0:	d123      	bne.n	8001cea <_malloc_r+0x92>
 8001ca2:	230c      	movs	r3, #12
 8001ca4:	6033      	str	r3, [r6, #0]
 8001ca6:	4630      	mov	r0, r6
 8001ca8:	f000 f8e0 	bl	8001e6c <__malloc_unlock>
 8001cac:	e7e3      	b.n	8001c76 <_malloc_r+0x1e>
 8001cae:	6823      	ldr	r3, [r4, #0]
 8001cb0:	1b5b      	subs	r3, r3, r5
 8001cb2:	d417      	bmi.n	8001ce4 <_malloc_r+0x8c>
 8001cb4:	2b0b      	cmp	r3, #11
 8001cb6:	d903      	bls.n	8001cc0 <_malloc_r+0x68>
 8001cb8:	6023      	str	r3, [r4, #0]
 8001cba:	441c      	add	r4, r3
 8001cbc:	6025      	str	r5, [r4, #0]
 8001cbe:	e004      	b.n	8001cca <_malloc_r+0x72>
 8001cc0:	6863      	ldr	r3, [r4, #4]
 8001cc2:	42a2      	cmp	r2, r4
 8001cc4:	bf0c      	ite	eq
 8001cc6:	600b      	streq	r3, [r1, #0]
 8001cc8:	6053      	strne	r3, [r2, #4]
 8001cca:	4630      	mov	r0, r6
 8001ccc:	f000 f8ce 	bl	8001e6c <__malloc_unlock>
 8001cd0:	f104 000b 	add.w	r0, r4, #11
 8001cd4:	1d23      	adds	r3, r4, #4
 8001cd6:	f020 0007 	bic.w	r0, r0, #7
 8001cda:	1ac2      	subs	r2, r0, r3
 8001cdc:	d0cc      	beq.n	8001c78 <_malloc_r+0x20>
 8001cde:	1a1b      	subs	r3, r3, r0
 8001ce0:	50a3      	str	r3, [r4, r2]
 8001ce2:	e7c9      	b.n	8001c78 <_malloc_r+0x20>
 8001ce4:	4622      	mov	r2, r4
 8001ce6:	6864      	ldr	r4, [r4, #4]
 8001ce8:	e7cc      	b.n	8001c84 <_malloc_r+0x2c>
 8001cea:	1cc4      	adds	r4, r0, #3
 8001cec:	f024 0403 	bic.w	r4, r4, #3
 8001cf0:	42a0      	cmp	r0, r4
 8001cf2:	d0e3      	beq.n	8001cbc <_malloc_r+0x64>
 8001cf4:	1a21      	subs	r1, r4, r0
 8001cf6:	4630      	mov	r0, r6
 8001cf8:	f000 f808 	bl	8001d0c <_sbrk_r>
 8001cfc:	3001      	adds	r0, #1
 8001cfe:	d1dd      	bne.n	8001cbc <_malloc_r+0x64>
 8001d00:	e7cf      	b.n	8001ca2 <_malloc_r+0x4a>
 8001d02:	bf00      	nop
 8001d04:	200000a8 	.word	0x200000a8
 8001d08:	200000ac 	.word	0x200000ac

08001d0c <_sbrk_r>:
 8001d0c:	b538      	push	{r3, r4, r5, lr}
 8001d0e:	4d06      	ldr	r5, [pc, #24]	; (8001d28 <_sbrk_r+0x1c>)
 8001d10:	2300      	movs	r3, #0
 8001d12:	4604      	mov	r4, r0
 8001d14:	4608      	mov	r0, r1
 8001d16:	602b      	str	r3, [r5, #0]
 8001d18:	f7fe fb74 	bl	8000404 <_sbrk>
 8001d1c:	1c43      	adds	r3, r0, #1
 8001d1e:	d102      	bne.n	8001d26 <_sbrk_r+0x1a>
 8001d20:	682b      	ldr	r3, [r5, #0]
 8001d22:	b103      	cbz	r3, 8001d26 <_sbrk_r+0x1a>
 8001d24:	6023      	str	r3, [r4, #0]
 8001d26:	bd38      	pop	{r3, r4, r5, pc}
 8001d28:	20000190 	.word	0x20000190

08001d2c <__sread>:
 8001d2c:	b510      	push	{r4, lr}
 8001d2e:	460c      	mov	r4, r1
 8001d30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001d34:	f000 f8a0 	bl	8001e78 <_read_r>
 8001d38:	2800      	cmp	r0, #0
 8001d3a:	bfab      	itete	ge
 8001d3c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001d3e:	89a3      	ldrhlt	r3, [r4, #12]
 8001d40:	181b      	addge	r3, r3, r0
 8001d42:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001d46:	bfac      	ite	ge
 8001d48:	6563      	strge	r3, [r4, #84]	; 0x54
 8001d4a:	81a3      	strhlt	r3, [r4, #12]
 8001d4c:	bd10      	pop	{r4, pc}

08001d4e <__swrite>:
 8001d4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001d52:	461f      	mov	r7, r3
 8001d54:	898b      	ldrh	r3, [r1, #12]
 8001d56:	05db      	lsls	r3, r3, #23
 8001d58:	4605      	mov	r5, r0
 8001d5a:	460c      	mov	r4, r1
 8001d5c:	4616      	mov	r6, r2
 8001d5e:	d505      	bpl.n	8001d6c <__swrite+0x1e>
 8001d60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001d64:	2302      	movs	r3, #2
 8001d66:	2200      	movs	r2, #0
 8001d68:	f000 f868 	bl	8001e3c <_lseek_r>
 8001d6c:	89a3      	ldrh	r3, [r4, #12]
 8001d6e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001d72:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001d76:	81a3      	strh	r3, [r4, #12]
 8001d78:	4632      	mov	r2, r6
 8001d7a:	463b      	mov	r3, r7
 8001d7c:	4628      	mov	r0, r5
 8001d7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001d82:	f000 b817 	b.w	8001db4 <_write_r>

08001d86 <__sseek>:
 8001d86:	b510      	push	{r4, lr}
 8001d88:	460c      	mov	r4, r1
 8001d8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001d8e:	f000 f855 	bl	8001e3c <_lseek_r>
 8001d92:	1c43      	adds	r3, r0, #1
 8001d94:	89a3      	ldrh	r3, [r4, #12]
 8001d96:	bf15      	itete	ne
 8001d98:	6560      	strne	r0, [r4, #84]	; 0x54
 8001d9a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001d9e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001da2:	81a3      	strheq	r3, [r4, #12]
 8001da4:	bf18      	it	ne
 8001da6:	81a3      	strhne	r3, [r4, #12]
 8001da8:	bd10      	pop	{r4, pc}

08001daa <__sclose>:
 8001daa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001dae:	f000 b813 	b.w	8001dd8 <_close_r>
	...

08001db4 <_write_r>:
 8001db4:	b538      	push	{r3, r4, r5, lr}
 8001db6:	4d07      	ldr	r5, [pc, #28]	; (8001dd4 <_write_r+0x20>)
 8001db8:	4604      	mov	r4, r0
 8001dba:	4608      	mov	r0, r1
 8001dbc:	4611      	mov	r1, r2
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	602a      	str	r2, [r5, #0]
 8001dc2:	461a      	mov	r2, r3
 8001dc4:	f000 f91a 	bl	8001ffc <_write>
 8001dc8:	1c43      	adds	r3, r0, #1
 8001dca:	d102      	bne.n	8001dd2 <_write_r+0x1e>
 8001dcc:	682b      	ldr	r3, [r5, #0]
 8001dce:	b103      	cbz	r3, 8001dd2 <_write_r+0x1e>
 8001dd0:	6023      	str	r3, [r4, #0]
 8001dd2:	bd38      	pop	{r3, r4, r5, pc}
 8001dd4:	20000190 	.word	0x20000190

08001dd8 <_close_r>:
 8001dd8:	b538      	push	{r3, r4, r5, lr}
 8001dda:	4d06      	ldr	r5, [pc, #24]	; (8001df4 <_close_r+0x1c>)
 8001ddc:	2300      	movs	r3, #0
 8001dde:	4604      	mov	r4, r0
 8001de0:	4608      	mov	r0, r1
 8001de2:	602b      	str	r3, [r5, #0]
 8001de4:	f000 f938 	bl	8002058 <_close>
 8001de8:	1c43      	adds	r3, r0, #1
 8001dea:	d102      	bne.n	8001df2 <_close_r+0x1a>
 8001dec:	682b      	ldr	r3, [r5, #0]
 8001dee:	b103      	cbz	r3, 8001df2 <_close_r+0x1a>
 8001df0:	6023      	str	r3, [r4, #0]
 8001df2:	bd38      	pop	{r3, r4, r5, pc}
 8001df4:	20000190 	.word	0x20000190

08001df8 <_fstat_r>:
 8001df8:	b538      	push	{r3, r4, r5, lr}
 8001dfa:	4d07      	ldr	r5, [pc, #28]	; (8001e18 <_fstat_r+0x20>)
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	4604      	mov	r4, r0
 8001e00:	4608      	mov	r0, r1
 8001e02:	4611      	mov	r1, r2
 8001e04:	602b      	str	r3, [r5, #0]
 8001e06:	f000 f96e 	bl	80020e6 <_fstat>
 8001e0a:	1c43      	adds	r3, r0, #1
 8001e0c:	d102      	bne.n	8001e14 <_fstat_r+0x1c>
 8001e0e:	682b      	ldr	r3, [r5, #0]
 8001e10:	b103      	cbz	r3, 8001e14 <_fstat_r+0x1c>
 8001e12:	6023      	str	r3, [r4, #0]
 8001e14:	bd38      	pop	{r3, r4, r5, pc}
 8001e16:	bf00      	nop
 8001e18:	20000190 	.word	0x20000190

08001e1c <_isatty_r>:
 8001e1c:	b538      	push	{r3, r4, r5, lr}
 8001e1e:	4d06      	ldr	r5, [pc, #24]	; (8001e38 <_isatty_r+0x1c>)
 8001e20:	2300      	movs	r3, #0
 8001e22:	4604      	mov	r4, r0
 8001e24:	4608      	mov	r0, r1
 8001e26:	602b      	str	r3, [r5, #0]
 8001e28:	f000 fac2 	bl	80023b0 <_isatty>
 8001e2c:	1c43      	adds	r3, r0, #1
 8001e2e:	d102      	bne.n	8001e36 <_isatty_r+0x1a>
 8001e30:	682b      	ldr	r3, [r5, #0]
 8001e32:	b103      	cbz	r3, 8001e36 <_isatty_r+0x1a>
 8001e34:	6023      	str	r3, [r4, #0]
 8001e36:	bd38      	pop	{r3, r4, r5, pc}
 8001e38:	20000190 	.word	0x20000190

08001e3c <_lseek_r>:
 8001e3c:	b538      	push	{r3, r4, r5, lr}
 8001e3e:	4d07      	ldr	r5, [pc, #28]	; (8001e5c <_lseek_r+0x20>)
 8001e40:	4604      	mov	r4, r0
 8001e42:	4608      	mov	r0, r1
 8001e44:	4611      	mov	r1, r2
 8001e46:	2200      	movs	r2, #0
 8001e48:	602a      	str	r2, [r5, #0]
 8001e4a:	461a      	mov	r2, r3
 8001e4c:	f000 f8c4 	bl	8001fd8 <_lseek>
 8001e50:	1c43      	adds	r3, r0, #1
 8001e52:	d102      	bne.n	8001e5a <_lseek_r+0x1e>
 8001e54:	682b      	ldr	r3, [r5, #0]
 8001e56:	b103      	cbz	r3, 8001e5a <_lseek_r+0x1e>
 8001e58:	6023      	str	r3, [r4, #0]
 8001e5a:	bd38      	pop	{r3, r4, r5, pc}
 8001e5c:	20000190 	.word	0x20000190

08001e60 <__malloc_lock>:
 8001e60:	4801      	ldr	r0, [pc, #4]	; (8001e68 <__malloc_lock+0x8>)
 8001e62:	f7ff be45 	b.w	8001af0 <__retarget_lock_acquire_recursive>
 8001e66:	bf00      	nop
 8001e68:	20000188 	.word	0x20000188

08001e6c <__malloc_unlock>:
 8001e6c:	4801      	ldr	r0, [pc, #4]	; (8001e74 <__malloc_unlock+0x8>)
 8001e6e:	f7ff be40 	b.w	8001af2 <__retarget_lock_release_recursive>
 8001e72:	bf00      	nop
 8001e74:	20000188 	.word	0x20000188

08001e78 <_read_r>:
 8001e78:	b538      	push	{r3, r4, r5, lr}
 8001e7a:	4d07      	ldr	r5, [pc, #28]	; (8001e98 <_read_r+0x20>)
 8001e7c:	4604      	mov	r4, r0
 8001e7e:	4608      	mov	r0, r1
 8001e80:	4611      	mov	r1, r2
 8001e82:	2200      	movs	r2, #0
 8001e84:	602a      	str	r2, [r5, #0]
 8001e86:	461a      	mov	r2, r3
 8001e88:	f000 f850 	bl	8001f2c <_read>
 8001e8c:	1c43      	adds	r3, r0, #1
 8001e8e:	d102      	bne.n	8001e96 <_read_r+0x1e>
 8001e90:	682b      	ldr	r3, [r5, #0]
 8001e92:	b103      	cbz	r3, 8001e96 <_read_r+0x1e>
 8001e94:	6023      	str	r3, [r4, #0]
 8001e96:	bd38      	pop	{r3, r4, r5, pc}
 8001e98:	20000190 	.word	0x20000190

08001e9c <findslot>:
 8001e9c:	4b0a      	ldr	r3, [pc, #40]	; (8001ec8 <findslot+0x2c>)
 8001e9e:	b510      	push	{r4, lr}
 8001ea0:	4604      	mov	r4, r0
 8001ea2:	6818      	ldr	r0, [r3, #0]
 8001ea4:	b118      	cbz	r0, 8001eae <findslot+0x12>
 8001ea6:	6983      	ldr	r3, [r0, #24]
 8001ea8:	b90b      	cbnz	r3, 8001eae <findslot+0x12>
 8001eaa:	f7ff fd83 	bl	80019b4 <__sinit>
 8001eae:	2c13      	cmp	r4, #19
 8001eb0:	d807      	bhi.n	8001ec2 <findslot+0x26>
 8001eb2:	4806      	ldr	r0, [pc, #24]	; (8001ecc <findslot+0x30>)
 8001eb4:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 8001eb8:	3201      	adds	r2, #1
 8001eba:	d002      	beq.n	8001ec2 <findslot+0x26>
 8001ebc:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8001ec0:	bd10      	pop	{r4, pc}
 8001ec2:	2000      	movs	r0, #0
 8001ec4:	e7fc      	b.n	8001ec0 <findslot+0x24>
 8001ec6:	bf00      	nop
 8001ec8:	20000018 	.word	0x20000018
 8001ecc:	200000bc 	.word	0x200000bc

08001ed0 <checkerror>:
 8001ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ed2:	1c43      	adds	r3, r0, #1
 8001ed4:	4604      	mov	r4, r0
 8001ed6:	d109      	bne.n	8001eec <checkerror+0x1c>
 8001ed8:	f7ff faea 	bl	80014b0 <__errno>
 8001edc:	2613      	movs	r6, #19
 8001ede:	4605      	mov	r5, r0
 8001ee0:	2700      	movs	r7, #0
 8001ee2:	4630      	mov	r0, r6
 8001ee4:	4639      	mov	r1, r7
 8001ee6:	beab      	bkpt	0x00ab
 8001ee8:	4606      	mov	r6, r0
 8001eea:	602e      	str	r6, [r5, #0]
 8001eec:	4620      	mov	r0, r4
 8001eee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001ef0 <error>:
 8001ef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ef2:	4604      	mov	r4, r0
 8001ef4:	f7ff fadc 	bl	80014b0 <__errno>
 8001ef8:	2613      	movs	r6, #19
 8001efa:	4605      	mov	r5, r0
 8001efc:	2700      	movs	r7, #0
 8001efe:	4630      	mov	r0, r6
 8001f00:	4639      	mov	r1, r7
 8001f02:	beab      	bkpt	0x00ab
 8001f04:	4606      	mov	r6, r0
 8001f06:	602e      	str	r6, [r5, #0]
 8001f08:	4620      	mov	r0, r4
 8001f0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001f0c <_swiread>:
 8001f0c:	b530      	push	{r4, r5, lr}
 8001f0e:	b085      	sub	sp, #20
 8001f10:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8001f14:	9203      	str	r2, [sp, #12]
 8001f16:	2406      	movs	r4, #6
 8001f18:	ad01      	add	r5, sp, #4
 8001f1a:	4620      	mov	r0, r4
 8001f1c:	4629      	mov	r1, r5
 8001f1e:	beab      	bkpt	0x00ab
 8001f20:	4604      	mov	r4, r0
 8001f22:	4620      	mov	r0, r4
 8001f24:	f7ff ffd4 	bl	8001ed0 <checkerror>
 8001f28:	b005      	add	sp, #20
 8001f2a:	bd30      	pop	{r4, r5, pc}

08001f2c <_read>:
 8001f2c:	b570      	push	{r4, r5, r6, lr}
 8001f2e:	460e      	mov	r6, r1
 8001f30:	4615      	mov	r5, r2
 8001f32:	f7ff ffb3 	bl	8001e9c <findslot>
 8001f36:	4604      	mov	r4, r0
 8001f38:	b930      	cbnz	r0, 8001f48 <_read+0x1c>
 8001f3a:	f7ff fab9 	bl	80014b0 <__errno>
 8001f3e:	2309      	movs	r3, #9
 8001f40:	6003      	str	r3, [r0, #0]
 8001f42:	f04f 30ff 	mov.w	r0, #4294967295
 8001f46:	bd70      	pop	{r4, r5, r6, pc}
 8001f48:	6800      	ldr	r0, [r0, #0]
 8001f4a:	462a      	mov	r2, r5
 8001f4c:	4631      	mov	r1, r6
 8001f4e:	f7ff ffdd 	bl	8001f0c <_swiread>
 8001f52:	1c43      	adds	r3, r0, #1
 8001f54:	bf1f      	itttt	ne
 8001f56:	6863      	ldrne	r3, [r4, #4]
 8001f58:	1a28      	subne	r0, r5, r0
 8001f5a:	181b      	addne	r3, r3, r0
 8001f5c:	6063      	strne	r3, [r4, #4]
 8001f5e:	e7f2      	b.n	8001f46 <_read+0x1a>

08001f60 <_swilseek>:
 8001f60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001f62:	460c      	mov	r4, r1
 8001f64:	4616      	mov	r6, r2
 8001f66:	f7ff ff99 	bl	8001e9c <findslot>
 8001f6a:	4605      	mov	r5, r0
 8001f6c:	b940      	cbnz	r0, 8001f80 <_swilseek+0x20>
 8001f6e:	f7ff fa9f 	bl	80014b0 <__errno>
 8001f72:	2309      	movs	r3, #9
 8001f74:	6003      	str	r3, [r0, #0]
 8001f76:	f04f 34ff 	mov.w	r4, #4294967295
 8001f7a:	4620      	mov	r0, r4
 8001f7c:	b003      	add	sp, #12
 8001f7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f80:	2e02      	cmp	r6, #2
 8001f82:	d903      	bls.n	8001f8c <_swilseek+0x2c>
 8001f84:	f7ff fa94 	bl	80014b0 <__errno>
 8001f88:	2316      	movs	r3, #22
 8001f8a:	e7f3      	b.n	8001f74 <_swilseek+0x14>
 8001f8c:	2e01      	cmp	r6, #1
 8001f8e:	d112      	bne.n	8001fb6 <_swilseek+0x56>
 8001f90:	6843      	ldr	r3, [r0, #4]
 8001f92:	18e4      	adds	r4, r4, r3
 8001f94:	d4f6      	bmi.n	8001f84 <_swilseek+0x24>
 8001f96:	682b      	ldr	r3, [r5, #0]
 8001f98:	260a      	movs	r6, #10
 8001f9a:	e9cd 3400 	strd	r3, r4, [sp]
 8001f9e:	466f      	mov	r7, sp
 8001fa0:	4630      	mov	r0, r6
 8001fa2:	4639      	mov	r1, r7
 8001fa4:	beab      	bkpt	0x00ab
 8001fa6:	4606      	mov	r6, r0
 8001fa8:	4630      	mov	r0, r6
 8001faa:	f7ff ff91 	bl	8001ed0 <checkerror>
 8001fae:	2800      	cmp	r0, #0
 8001fb0:	dbe1      	blt.n	8001f76 <_swilseek+0x16>
 8001fb2:	606c      	str	r4, [r5, #4]
 8001fb4:	e7e1      	b.n	8001f7a <_swilseek+0x1a>
 8001fb6:	2e02      	cmp	r6, #2
 8001fb8:	d1ed      	bne.n	8001f96 <_swilseek+0x36>
 8001fba:	6803      	ldr	r3, [r0, #0]
 8001fbc:	9300      	str	r3, [sp, #0]
 8001fbe:	260c      	movs	r6, #12
 8001fc0:	466f      	mov	r7, sp
 8001fc2:	4630      	mov	r0, r6
 8001fc4:	4639      	mov	r1, r7
 8001fc6:	beab      	bkpt	0x00ab
 8001fc8:	4606      	mov	r6, r0
 8001fca:	4630      	mov	r0, r6
 8001fcc:	f7ff ff80 	bl	8001ed0 <checkerror>
 8001fd0:	1c43      	adds	r3, r0, #1
 8001fd2:	d0d0      	beq.n	8001f76 <_swilseek+0x16>
 8001fd4:	4404      	add	r4, r0
 8001fd6:	e7de      	b.n	8001f96 <_swilseek+0x36>

08001fd8 <_lseek>:
 8001fd8:	f7ff bfc2 	b.w	8001f60 <_swilseek>

08001fdc <_swiwrite>:
 8001fdc:	b530      	push	{r4, r5, lr}
 8001fde:	b085      	sub	sp, #20
 8001fe0:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8001fe4:	9203      	str	r2, [sp, #12]
 8001fe6:	2405      	movs	r4, #5
 8001fe8:	ad01      	add	r5, sp, #4
 8001fea:	4620      	mov	r0, r4
 8001fec:	4629      	mov	r1, r5
 8001fee:	beab      	bkpt	0x00ab
 8001ff0:	4604      	mov	r4, r0
 8001ff2:	4620      	mov	r0, r4
 8001ff4:	f7ff ff6c 	bl	8001ed0 <checkerror>
 8001ff8:	b005      	add	sp, #20
 8001ffa:	bd30      	pop	{r4, r5, pc}

08001ffc <_write>:
 8001ffc:	b570      	push	{r4, r5, r6, lr}
 8001ffe:	460e      	mov	r6, r1
 8002000:	4615      	mov	r5, r2
 8002002:	f7ff ff4b 	bl	8001e9c <findslot>
 8002006:	4604      	mov	r4, r0
 8002008:	b930      	cbnz	r0, 8002018 <_write+0x1c>
 800200a:	f7ff fa51 	bl	80014b0 <__errno>
 800200e:	2309      	movs	r3, #9
 8002010:	6003      	str	r3, [r0, #0]
 8002012:	f04f 30ff 	mov.w	r0, #4294967295
 8002016:	bd70      	pop	{r4, r5, r6, pc}
 8002018:	6800      	ldr	r0, [r0, #0]
 800201a:	462a      	mov	r2, r5
 800201c:	4631      	mov	r1, r6
 800201e:	f7ff ffdd 	bl	8001fdc <_swiwrite>
 8002022:	1e03      	subs	r3, r0, #0
 8002024:	dbf5      	blt.n	8002012 <_write+0x16>
 8002026:	6862      	ldr	r2, [r4, #4]
 8002028:	1ae8      	subs	r0, r5, r3
 800202a:	4402      	add	r2, r0
 800202c:	42ab      	cmp	r3, r5
 800202e:	6062      	str	r2, [r4, #4]
 8002030:	d1f1      	bne.n	8002016 <_write+0x1a>
 8002032:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8002036:	2000      	movs	r0, #0
 8002038:	f7ff bf5a 	b.w	8001ef0 <error>

0800203c <_swiclose>:
 800203c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800203e:	2402      	movs	r4, #2
 8002040:	9001      	str	r0, [sp, #4]
 8002042:	ad01      	add	r5, sp, #4
 8002044:	4620      	mov	r0, r4
 8002046:	4629      	mov	r1, r5
 8002048:	beab      	bkpt	0x00ab
 800204a:	4604      	mov	r4, r0
 800204c:	4620      	mov	r0, r4
 800204e:	f7ff ff3f 	bl	8001ed0 <checkerror>
 8002052:	b003      	add	sp, #12
 8002054:	bd30      	pop	{r4, r5, pc}
	...

08002058 <_close>:
 8002058:	b538      	push	{r3, r4, r5, lr}
 800205a:	4605      	mov	r5, r0
 800205c:	f7ff ff1e 	bl	8001e9c <findslot>
 8002060:	4604      	mov	r4, r0
 8002062:	b930      	cbnz	r0, 8002072 <_close+0x1a>
 8002064:	f7ff fa24 	bl	80014b0 <__errno>
 8002068:	2309      	movs	r3, #9
 800206a:	6003      	str	r3, [r0, #0]
 800206c:	f04f 30ff 	mov.w	r0, #4294967295
 8002070:	bd38      	pop	{r3, r4, r5, pc}
 8002072:	3d01      	subs	r5, #1
 8002074:	2d01      	cmp	r5, #1
 8002076:	d809      	bhi.n	800208c <_close+0x34>
 8002078:	4b09      	ldr	r3, [pc, #36]	; (80020a0 <_close+0x48>)
 800207a:	689a      	ldr	r2, [r3, #8]
 800207c:	691b      	ldr	r3, [r3, #16]
 800207e:	429a      	cmp	r2, r3
 8002080:	d104      	bne.n	800208c <_close+0x34>
 8002082:	f04f 33ff 	mov.w	r3, #4294967295
 8002086:	6003      	str	r3, [r0, #0]
 8002088:	2000      	movs	r0, #0
 800208a:	e7f1      	b.n	8002070 <_close+0x18>
 800208c:	6820      	ldr	r0, [r4, #0]
 800208e:	f7ff ffd5 	bl	800203c <_swiclose>
 8002092:	2800      	cmp	r0, #0
 8002094:	d1ec      	bne.n	8002070 <_close+0x18>
 8002096:	f04f 33ff 	mov.w	r3, #4294967295
 800209a:	6023      	str	r3, [r4, #0]
 800209c:	e7e8      	b.n	8002070 <_close+0x18>
 800209e:	bf00      	nop
 80020a0:	200000bc 	.word	0x200000bc

080020a4 <_swistat>:
 80020a4:	b570      	push	{r4, r5, r6, lr}
 80020a6:	460c      	mov	r4, r1
 80020a8:	f7ff fef8 	bl	8001e9c <findslot>
 80020ac:	4605      	mov	r5, r0
 80020ae:	b930      	cbnz	r0, 80020be <_swistat+0x1a>
 80020b0:	f7ff f9fe 	bl	80014b0 <__errno>
 80020b4:	2309      	movs	r3, #9
 80020b6:	6003      	str	r3, [r0, #0]
 80020b8:	f04f 30ff 	mov.w	r0, #4294967295
 80020bc:	bd70      	pop	{r4, r5, r6, pc}
 80020be:	6863      	ldr	r3, [r4, #4]
 80020c0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80020c4:	6063      	str	r3, [r4, #4]
 80020c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80020ca:	64a3      	str	r3, [r4, #72]	; 0x48
 80020cc:	260c      	movs	r6, #12
 80020ce:	4630      	mov	r0, r6
 80020d0:	4629      	mov	r1, r5
 80020d2:	beab      	bkpt	0x00ab
 80020d4:	4605      	mov	r5, r0
 80020d6:	4628      	mov	r0, r5
 80020d8:	f7ff fefa 	bl	8001ed0 <checkerror>
 80020dc:	1c43      	adds	r3, r0, #1
 80020de:	bf1c      	itt	ne
 80020e0:	6120      	strne	r0, [r4, #16]
 80020e2:	2000      	movne	r0, #0
 80020e4:	e7ea      	b.n	80020bc <_swistat+0x18>

080020e6 <_fstat>:
 80020e6:	460b      	mov	r3, r1
 80020e8:	b510      	push	{r4, lr}
 80020ea:	2100      	movs	r1, #0
 80020ec:	4604      	mov	r4, r0
 80020ee:	2258      	movs	r2, #88	; 0x58
 80020f0:	4618      	mov	r0, r3
 80020f2:	f7ff fa07 	bl	8001504 <memset>
 80020f6:	4601      	mov	r1, r0
 80020f8:	4620      	mov	r0, r4
 80020fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80020fe:	f7ff bfd1 	b.w	80020a4 <_swistat>

08002102 <_stat>:
 8002102:	b538      	push	{r3, r4, r5, lr}
 8002104:	460d      	mov	r5, r1
 8002106:	4604      	mov	r4, r0
 8002108:	2258      	movs	r2, #88	; 0x58
 800210a:	2100      	movs	r1, #0
 800210c:	4628      	mov	r0, r5
 800210e:	f7ff f9f9 	bl	8001504 <memset>
 8002112:	4620      	mov	r0, r4
 8002114:	2100      	movs	r1, #0
 8002116:	f000 f811 	bl	800213c <_swiopen>
 800211a:	1c43      	adds	r3, r0, #1
 800211c:	4604      	mov	r4, r0
 800211e:	d00b      	beq.n	8002138 <_stat+0x36>
 8002120:	686b      	ldr	r3, [r5, #4]
 8002122:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8002126:	606b      	str	r3, [r5, #4]
 8002128:	4629      	mov	r1, r5
 800212a:	f7ff ffbb 	bl	80020a4 <_swistat>
 800212e:	4605      	mov	r5, r0
 8002130:	4620      	mov	r0, r4
 8002132:	f7ff ff91 	bl	8002058 <_close>
 8002136:	462c      	mov	r4, r5
 8002138:	4620      	mov	r0, r4
 800213a:	bd38      	pop	{r3, r4, r5, pc}

0800213c <_swiopen>:
 800213c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002140:	4b2a      	ldr	r3, [pc, #168]	; (80021ec <_swiopen+0xb0>)
 8002142:	b097      	sub	sp, #92	; 0x5c
 8002144:	4681      	mov	r9, r0
 8002146:	460f      	mov	r7, r1
 8002148:	2500      	movs	r5, #0
 800214a:	461e      	mov	r6, r3
 800214c:	f853 4035 	ldr.w	r4, [r3, r5, lsl #3]
 8002150:	1c61      	adds	r1, r4, #1
 8002152:	d037      	beq.n	80021c4 <_swiopen+0x88>
 8002154:	3501      	adds	r5, #1
 8002156:	2d14      	cmp	r5, #20
 8002158:	d1f8      	bne.n	800214c <_swiopen+0x10>
 800215a:	f7ff f9a9 	bl	80014b0 <__errno>
 800215e:	2318      	movs	r3, #24
 8002160:	6003      	str	r3, [r0, #0]
 8002162:	f04f 34ff 	mov.w	r4, #4294967295
 8002166:	e03d      	b.n	80021e4 <_swiopen+0xa8>
 8002168:	f3c7 4400 	ubfx	r4, r7, #16, #1
 800216c:	f240 6301 	movw	r3, #1537	; 0x601
 8002170:	07ba      	lsls	r2, r7, #30
 8002172:	bf48      	it	mi
 8002174:	f044 0402 	orrmi.w	r4, r4, #2
 8002178:	421f      	tst	r7, r3
 800217a:	bf18      	it	ne
 800217c:	f044 0404 	orrne.w	r4, r4, #4
 8002180:	073b      	lsls	r3, r7, #28
 8002182:	bf48      	it	mi
 8002184:	f024 0404 	bicmi.w	r4, r4, #4
 8002188:	4648      	mov	r0, r9
 800218a:	bf48      	it	mi
 800218c:	f044 0408 	orrmi.w	r4, r4, #8
 8002190:	f8cd 9000 	str.w	r9, [sp]
 8002194:	f7fe f828 	bl	80001e8 <strlen>
 8002198:	e9cd 4001 	strd	r4, r0, [sp, #4]
 800219c:	2401      	movs	r4, #1
 800219e:	4620      	mov	r0, r4
 80021a0:	4641      	mov	r1, r8
 80021a2:	beab      	bkpt	0x00ab
 80021a4:	4604      	mov	r4, r0
 80021a6:	2c00      	cmp	r4, #0
 80021a8:	db07      	blt.n	80021ba <_swiopen+0x7e>
 80021aa:	f846 4035 	str.w	r4, [r6, r5, lsl #3]
 80021ae:	eb06 06c5 	add.w	r6, r6, r5, lsl #3
 80021b2:	2300      	movs	r3, #0
 80021b4:	6073      	str	r3, [r6, #4]
 80021b6:	462c      	mov	r4, r5
 80021b8:	e014      	b.n	80021e4 <_swiopen+0xa8>
 80021ba:	4620      	mov	r0, r4
 80021bc:	f7ff fe98 	bl	8001ef0 <error>
 80021c0:	4604      	mov	r4, r0
 80021c2:	e00f      	b.n	80021e4 <_swiopen+0xa8>
 80021c4:	f407 6320 	and.w	r3, r7, #2560	; 0xa00
 80021c8:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80021cc:	46e8      	mov	r8, sp
 80021ce:	d1cb      	bne.n	8002168 <_swiopen+0x2c>
 80021d0:	4641      	mov	r1, r8
 80021d2:	4648      	mov	r0, r9
 80021d4:	f7ff ff95 	bl	8002102 <_stat>
 80021d8:	3001      	adds	r0, #1
 80021da:	d0c5      	beq.n	8002168 <_swiopen+0x2c>
 80021dc:	f7ff f968 	bl	80014b0 <__errno>
 80021e0:	2311      	movs	r3, #17
 80021e2:	6003      	str	r3, [r0, #0]
 80021e4:	4620      	mov	r0, r4
 80021e6:	b017      	add	sp, #92	; 0x5c
 80021e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80021ec:	200000bc 	.word	0x200000bc

080021f0 <_get_semihosting_exts>:
 80021f0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80021f4:	4606      	mov	r6, r0
 80021f6:	460f      	mov	r7, r1
 80021f8:	482a      	ldr	r0, [pc, #168]	; (80022a4 <_get_semihosting_exts+0xb4>)
 80021fa:	2100      	movs	r1, #0
 80021fc:	4615      	mov	r5, r2
 80021fe:	f7ff ff9d 	bl	800213c <_swiopen>
 8002202:	462a      	mov	r2, r5
 8002204:	4604      	mov	r4, r0
 8002206:	2100      	movs	r1, #0
 8002208:	4630      	mov	r0, r6
 800220a:	f7ff f97b 	bl	8001504 <memset>
 800220e:	1c63      	adds	r3, r4, #1
 8002210:	d016      	beq.n	8002240 <_get_semihosting_exts+0x50>
 8002212:	4620      	mov	r0, r4
 8002214:	f7ff fe42 	bl	8001e9c <findslot>
 8002218:	f04f 080c 	mov.w	r8, #12
 800221c:	4681      	mov	r9, r0
 800221e:	4640      	mov	r0, r8
 8002220:	4649      	mov	r1, r9
 8002222:	beab      	bkpt	0x00ab
 8002224:	4680      	mov	r8, r0
 8002226:	4640      	mov	r0, r8
 8002228:	f7ff fe52 	bl	8001ed0 <checkerror>
 800222c:	2803      	cmp	r0, #3
 800222e:	dd02      	ble.n	8002236 <_get_semihosting_exts+0x46>
 8002230:	1ec3      	subs	r3, r0, #3
 8002232:	42ab      	cmp	r3, r5
 8002234:	dc08      	bgt.n	8002248 <_get_semihosting_exts+0x58>
 8002236:	4620      	mov	r0, r4
 8002238:	f7ff ff0e 	bl	8002058 <_close>
 800223c:	f04f 34ff 	mov.w	r4, #4294967295
 8002240:	4620      	mov	r0, r4
 8002242:	b003      	add	sp, #12
 8002244:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002248:	2204      	movs	r2, #4
 800224a:	eb0d 0102 	add.w	r1, sp, r2
 800224e:	4620      	mov	r0, r4
 8002250:	f7ff fe6c 	bl	8001f2c <_read>
 8002254:	2803      	cmp	r0, #3
 8002256:	ddee      	ble.n	8002236 <_get_semihosting_exts+0x46>
 8002258:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800225c:	2b53      	cmp	r3, #83	; 0x53
 800225e:	d1ea      	bne.n	8002236 <_get_semihosting_exts+0x46>
 8002260:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8002264:	2b48      	cmp	r3, #72	; 0x48
 8002266:	d1e6      	bne.n	8002236 <_get_semihosting_exts+0x46>
 8002268:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800226c:	2b46      	cmp	r3, #70	; 0x46
 800226e:	d1e2      	bne.n	8002236 <_get_semihosting_exts+0x46>
 8002270:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002274:	2b42      	cmp	r3, #66	; 0x42
 8002276:	d1de      	bne.n	8002236 <_get_semihosting_exts+0x46>
 8002278:	2201      	movs	r2, #1
 800227a:	4639      	mov	r1, r7
 800227c:	4620      	mov	r0, r4
 800227e:	f7ff fe6f 	bl	8001f60 <_swilseek>
 8002282:	2800      	cmp	r0, #0
 8002284:	dbd7      	blt.n	8002236 <_get_semihosting_exts+0x46>
 8002286:	462a      	mov	r2, r5
 8002288:	4631      	mov	r1, r6
 800228a:	4620      	mov	r0, r4
 800228c:	f7ff fe4e 	bl	8001f2c <_read>
 8002290:	4605      	mov	r5, r0
 8002292:	4620      	mov	r0, r4
 8002294:	f7ff fee0 	bl	8002058 <_close>
 8002298:	4628      	mov	r0, r5
 800229a:	f7ff fe19 	bl	8001ed0 <checkerror>
 800229e:	4604      	mov	r4, r0
 80022a0:	e7ce      	b.n	8002240 <_get_semihosting_exts+0x50>
 80022a2:	bf00      	nop
 80022a4:	08002464 	.word	0x08002464

080022a8 <initialise_semihosting_exts>:
 80022a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80022aa:	4d0a      	ldr	r5, [pc, #40]	; (80022d4 <initialise_semihosting_exts+0x2c>)
 80022ac:	4c0a      	ldr	r4, [pc, #40]	; (80022d8 <initialise_semihosting_exts+0x30>)
 80022ae:	2100      	movs	r1, #0
 80022b0:	2201      	movs	r2, #1
 80022b2:	a801      	add	r0, sp, #4
 80022b4:	6029      	str	r1, [r5, #0]
 80022b6:	6022      	str	r2, [r4, #0]
 80022b8:	f7ff ff9a 	bl	80021f0 <_get_semihosting_exts>
 80022bc:	2800      	cmp	r0, #0
 80022be:	dd07      	ble.n	80022d0 <initialise_semihosting_exts+0x28>
 80022c0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80022c4:	f003 0201 	and.w	r2, r3, #1
 80022c8:	f003 0302 	and.w	r3, r3, #2
 80022cc:	602a      	str	r2, [r5, #0]
 80022ce:	6023      	str	r3, [r4, #0]
 80022d0:	b003      	add	sp, #12
 80022d2:	bd30      	pop	{r4, r5, pc}
 80022d4:	2000007c 	.word	0x2000007c
 80022d8:	20000080 	.word	0x20000080

080022dc <_has_ext_stdout_stderr>:
 80022dc:	b510      	push	{r4, lr}
 80022de:	4c04      	ldr	r4, [pc, #16]	; (80022f0 <_has_ext_stdout_stderr+0x14>)
 80022e0:	6822      	ldr	r2, [r4, #0]
 80022e2:	2a00      	cmp	r2, #0
 80022e4:	da01      	bge.n	80022ea <_has_ext_stdout_stderr+0xe>
 80022e6:	f7ff ffdf 	bl	80022a8 <initialise_semihosting_exts>
 80022ea:	6820      	ldr	r0, [r4, #0]
 80022ec:	bd10      	pop	{r4, pc}
 80022ee:	bf00      	nop
 80022f0:	20000080 	.word	0x20000080

080022f4 <initialise_monitor_handles>:
 80022f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80022f8:	b085      	sub	sp, #20
 80022fa:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 80023ac <initialise_monitor_handles+0xb8>
 80022fe:	f8cd 9004 	str.w	r9, [sp, #4]
 8002302:	2303      	movs	r3, #3
 8002304:	2400      	movs	r4, #0
 8002306:	9303      	str	r3, [sp, #12]
 8002308:	f10d 0804 	add.w	r8, sp, #4
 800230c:	9402      	str	r4, [sp, #8]
 800230e:	2501      	movs	r5, #1
 8002310:	4628      	mov	r0, r5
 8002312:	4641      	mov	r1, r8
 8002314:	beab      	bkpt	0x00ab
 8002316:	4605      	mov	r5, r0
 8002318:	4e20      	ldr	r6, [pc, #128]	; (800239c <initialise_monitor_handles+0xa8>)
 800231a:	4a21      	ldr	r2, [pc, #132]	; (80023a0 <initialise_monitor_handles+0xac>)
 800231c:	6035      	str	r5, [r6, #0]
 800231e:	4623      	mov	r3, r4
 8002320:	f04f 31ff 	mov.w	r1, #4294967295
 8002324:	4614      	mov	r4, r2
 8002326:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
 800232a:	3301      	adds	r3, #1
 800232c:	2b14      	cmp	r3, #20
 800232e:	d1fa      	bne.n	8002326 <initialise_monitor_handles+0x32>
 8002330:	f7ff ffd4 	bl	80022dc <_has_ext_stdout_stderr>
 8002334:	4d1b      	ldr	r5, [pc, #108]	; (80023a4 <initialise_monitor_handles+0xb0>)
 8002336:	b1d0      	cbz	r0, 800236e <initialise_monitor_handles+0x7a>
 8002338:	f04f 0a03 	mov.w	sl, #3
 800233c:	2304      	movs	r3, #4
 800233e:	f8cd 9004 	str.w	r9, [sp, #4]
 8002342:	2701      	movs	r7, #1
 8002344:	f8cd a00c 	str.w	sl, [sp, #12]
 8002348:	9302      	str	r3, [sp, #8]
 800234a:	4638      	mov	r0, r7
 800234c:	4641      	mov	r1, r8
 800234e:	beab      	bkpt	0x00ab
 8002350:	4683      	mov	fp, r0
 8002352:	4b15      	ldr	r3, [pc, #84]	; (80023a8 <initialise_monitor_handles+0xb4>)
 8002354:	f8cd 9004 	str.w	r9, [sp, #4]
 8002358:	f8c3 b000 	str.w	fp, [r3]
 800235c:	2308      	movs	r3, #8
 800235e:	f8cd a00c 	str.w	sl, [sp, #12]
 8002362:	9302      	str	r3, [sp, #8]
 8002364:	4638      	mov	r0, r7
 8002366:	4641      	mov	r1, r8
 8002368:	beab      	bkpt	0x00ab
 800236a:	4607      	mov	r7, r0
 800236c:	602f      	str	r7, [r5, #0]
 800236e:	682b      	ldr	r3, [r5, #0]
 8002370:	3301      	adds	r3, #1
 8002372:	bf02      	ittt	eq
 8002374:	4b0c      	ldreq	r3, [pc, #48]	; (80023a8 <initialise_monitor_handles+0xb4>)
 8002376:	681b      	ldreq	r3, [r3, #0]
 8002378:	602b      	streq	r3, [r5, #0]
 800237a:	6833      	ldr	r3, [r6, #0]
 800237c:	6023      	str	r3, [r4, #0]
 800237e:	2600      	movs	r6, #0
 8002380:	6066      	str	r6, [r4, #4]
 8002382:	f7ff ffab 	bl	80022dc <_has_ext_stdout_stderr>
 8002386:	b130      	cbz	r0, 8002396 <initialise_monitor_handles+0xa2>
 8002388:	4b07      	ldr	r3, [pc, #28]	; (80023a8 <initialise_monitor_handles+0xb4>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	e9c4 3602 	strd	r3, r6, [r4, #8]
 8002390:	682b      	ldr	r3, [r5, #0]
 8002392:	e9c4 3604 	strd	r3, r6, [r4, #16]
 8002396:	b005      	add	sp, #20
 8002398:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800239c:	200000b4 	.word	0x200000b4
 80023a0:	200000bc 	.word	0x200000bc
 80023a4:	200000b0 	.word	0x200000b0
 80023a8:	200000b8 	.word	0x200000b8
 80023ac:	0800247a 	.word	0x0800247a

080023b0 <_isatty>:
 80023b0:	b570      	push	{r4, r5, r6, lr}
 80023b2:	f7ff fd73 	bl	8001e9c <findslot>
 80023b6:	2509      	movs	r5, #9
 80023b8:	4604      	mov	r4, r0
 80023ba:	b920      	cbnz	r0, 80023c6 <_isatty+0x16>
 80023bc:	f7ff f878 	bl	80014b0 <__errno>
 80023c0:	6005      	str	r5, [r0, #0]
 80023c2:	4620      	mov	r0, r4
 80023c4:	bd70      	pop	{r4, r5, r6, pc}
 80023c6:	4628      	mov	r0, r5
 80023c8:	4621      	mov	r1, r4
 80023ca:	beab      	bkpt	0x00ab
 80023cc:	4604      	mov	r4, r0
 80023ce:	2c01      	cmp	r4, #1
 80023d0:	d0f7      	beq.n	80023c2 <_isatty+0x12>
 80023d2:	f7ff f86d 	bl	80014b0 <__errno>
 80023d6:	2400      	movs	r4, #0
 80023d8:	4605      	mov	r5, r0
 80023da:	2613      	movs	r6, #19
 80023dc:	4630      	mov	r0, r6
 80023de:	4621      	mov	r1, r4
 80023e0:	beab      	bkpt	0x00ab
 80023e2:	4606      	mov	r6, r0
 80023e4:	602e      	str	r6, [r5, #0]
 80023e6:	e7ec      	b.n	80023c2 <_isatty+0x12>

080023e8 <_init>:
 80023e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023ea:	bf00      	nop
 80023ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80023ee:	bc08      	pop	{r3}
 80023f0:	469e      	mov	lr, r3
 80023f2:	4770      	bx	lr

080023f4 <_fini>:
 80023f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023f6:	bf00      	nop
 80023f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80023fa:	bc08      	pop	{r3}
 80023fc:	469e      	mov	lr, r3
 80023fe:	4770      	bx	lr
