
stm32f4xx_driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001224  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080013cc  080013cc  000113cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080013e4  080013e4  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  080013e4  080013e4  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  080013e4  080013e4  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080013e4  080013e4  000113e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080013e8  080013e8  000113e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  080013ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020018  2**0
                  CONTENTS
 10 .bss          00000048  20000018  20000018  00020018  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000060  20000060  00020018  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000320a  00000000  00000000  00020042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000007f1  00000000  00000000  0002324c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001e8  00000000  00000000  00023a40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000001b0  00000000  00000000  00023c28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002b1c  00000000  00000000  00023dd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000023db  00000000  00000000  000268f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000ae28  00000000  00000000  00028ccf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00033af7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000748  00000000  00000000  00033b4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000018 	.word	0x20000018
 80001c4:	00000000 	.word	0x00000000
 80001c8:	080013b4 	.word	0x080013b4

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	2000001c 	.word	0x2000001c
 80001e4:	080013b4 	.word	0x080013b4

080001e8 <strlen>:
 80001e8:	4603      	mov	r3, r0
 80001ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ee:	2a00      	cmp	r2, #0
 80001f0:	d1fb      	bne.n	80001ea <strlen+0x2>
 80001f2:	1a18      	subs	r0, r3, r0
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr

080001f8 <main>:
	for (uint32_t i = 0;i < 500000 ;i++);
}


int main(void)
{
 80001f8:	b580      	push	{r7, lr}
 80001fa:	af00      	add	r7, sp, #0

	//initialise_monitor_handles();

	//printf("i2c Slave program executes\n");
	//Initialize and configure the GPIO pin as input for button
	GPIO_ButtonInit();
 80001fc:	f000 f864 	bl	80002c8 <GPIO_ButtonInit>

	I2C1_GpioInit();
 8000200:	f000 f820 	bl	8000244 <I2C1_GpioInit>

	I2C1_Init();
 8000204:	f000 f844 	bl	8000290 <I2C1_Init>

	//enable the I2C NVIC interrupt
	I2C_IRQConfig(IRQ_NO_I2C1_EV, ENABLE);
 8000208:	2101      	movs	r1, #1
 800020a:	201f      	movs	r0, #31
 800020c:	f000 fff6 	bl	80011fc <I2C_IRQConfig>
	I2C_IRQConfig(IRQ_NO_I2C1_ER, ENABLE);
 8000210:	2101      	movs	r1, #1
 8000212:	2020      	movs	r0, #32
 8000214:	f000 fff2 	bl	80011fc <I2C_IRQConfig>

	//Enable the interrupt
	I2C_SlavePeripheralInterrupt(I2C_Config.pI2Cx, ENABLE);
 8000218:	4b08      	ldr	r3, [pc, #32]	; (800023c <main+0x44>)
 800021a:	681b      	ldr	r3, [r3, #0]
 800021c:	2101      	movs	r1, #1
 800021e:	4618      	mov	r0, r3
 8000220:	f001 f870 	bl	8001304 <I2C_SlavePeripheralInterrupt>

	I2C_PeripheralControl(I2C1, ENABLE);
 8000224:	2101      	movs	r1, #1
 8000226:	4806      	ldr	r0, [pc, #24]	; (8000240 <main+0x48>)
 8000228:	f000 ffcd 	bl	80011c6 <I2C_PeripheralControl>

	//This bit is set and cleared by software and cleared by hardware when PE=0. so after PE=1 in above statement
	I2C_ManageACK(I2C_Config.pI2Cx, ENABLE);
 800022c:	4b03      	ldr	r3, [pc, #12]	; (800023c <main+0x44>)
 800022e:	681b      	ldr	r3, [r3, #0]
 8000230:	2101      	movs	r1, #1
 8000232:	4618      	mov	r0, r3
 8000234:	f000 ffac 	bl	8001190 <I2C_ManageACK>

	while(1);
 8000238:	e7fe      	b.n	8000238 <main+0x40>
 800023a:	bf00      	nop
 800023c:	20000038 	.word	0x20000038
 8000240:	40005400 	.word	0x40005400

08000244 <I2C1_GpioInit>:
 * PB6 -> I2C1_SCL
 * PB7 -> I2C1_SDA
 * Alternate functionality 4
 */
void I2C1_GpioInit(void)
{
 8000244:	b580      	push	{r7, lr}
 8000246:	b084      	sub	sp, #16
 8000248:	af00      	add	r7, sp, #0
	GPIO_Handle_t I2Cpins = {0};
 800024a:	1d3b      	adds	r3, r7, #4
 800024c:	2200      	movs	r2, #0
 800024e:	601a      	str	r2, [r3, #0]
 8000250:	605a      	str	r2, [r3, #4]
 8000252:	609a      	str	r2, [r3, #8]

	I2Cpins.pGPIOx = GPIOB;
 8000254:	4b0d      	ldr	r3, [pc, #52]	; (800028c <I2C1_GpioInit+0x48>)
 8000256:	607b      	str	r3, [r7, #4]
	I2Cpins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000258:	2302      	movs	r3, #2
 800025a:	727b      	strb	r3, [r7, #9]
	I2Cpins.GPIO_PinConfig.GPIO_PinOPType = GPIO_PIN_OUT_OD;
 800025c:	2301      	movs	r3, #1
 800025e:	733b      	strb	r3, [r7, #12]
	I2Cpins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPD_PU;
 8000260:	2301      	movs	r3, #1
 8000262:	72fb      	strb	r3, [r7, #11]
	I2Cpins.GPIO_PinConfig.GPIO_PinAltFunMode = 4;
 8000264:	2304      	movs	r3, #4
 8000266:	737b      	strb	r3, [r7, #13]
	I2Cpins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_HIGH;
 8000268:	2302      	movs	r3, #2
 800026a:	72bb      	strb	r3, [r7, #10]

	//scl
	I2Cpins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_6;
 800026c:	2306      	movs	r3, #6
 800026e:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&I2Cpins);
 8000270:	1d3b      	adds	r3, r7, #4
 8000272:	4618      	mov	r0, r3
 8000274:	f000 f968 	bl	8000548 <GPIO_Init>

	//sda
	I2Cpins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_7;
 8000278:	2307      	movs	r3, #7
 800027a:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&I2Cpins);
 800027c:	1d3b      	adds	r3, r7, #4
 800027e:	4618      	mov	r0, r3
 8000280:	f000 f962 	bl	8000548 <GPIO_Init>

}
 8000284:	bf00      	nop
 8000286:	3710      	adds	r7, #16
 8000288:	46bd      	mov	sp, r7
 800028a:	bd80      	pop	{r7, pc}
 800028c:	40020400 	.word	0x40020400

08000290 <I2C1_Init>:


void I2C1_Init(void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	af00      	add	r7, sp, #0


	I2C_Config.pI2Cx =  I2C1;
 8000294:	4b09      	ldr	r3, [pc, #36]	; (80002bc <I2C1_Init+0x2c>)
 8000296:	4a0a      	ldr	r2, [pc, #40]	; (80002c0 <I2C1_Init+0x30>)
 8000298:	601a      	str	r2, [r3, #0]
	I2C_Config.pI2C_Config.I2C_ACKCtrl = I2C_ACK_ENABLE;
 800029a:	4b08      	ldr	r3, [pc, #32]	; (80002bc <I2C1_Init+0x2c>)
 800029c:	2201      	movs	r2, #1
 800029e:	725a      	strb	r2, [r3, #9]
	I2C_Config.pI2C_Config.I2C_DeviceAddr = MY_ADDR;
 80002a0:	4b06      	ldr	r3, [pc, #24]	; (80002bc <I2C1_Init+0x2c>)
 80002a2:	2269      	movs	r2, #105	; 0x69
 80002a4:	721a      	strb	r2, [r3, #8]
	I2C_Config.pI2C_Config.I2C_FMDutyCycle = I2C_FM_DUTY_2;
 80002a6:	4b05      	ldr	r3, [pc, #20]	; (80002bc <I2C1_Init+0x2c>)
 80002a8:	2200      	movs	r2, #0
 80002aa:	815a      	strh	r2, [r3, #10]
	I2C_Config.pI2C_Config.I2C_SCLSpeed = I2C_SPEED_STD_MODE;
 80002ac:	4b03      	ldr	r3, [pc, #12]	; (80002bc <I2C1_Init+0x2c>)
 80002ae:	4a05      	ldr	r2, [pc, #20]	; (80002c4 <I2C1_Init+0x34>)
 80002b0:	605a      	str	r2, [r3, #4]

	I2C_Init(&I2C_Config);
 80002b2:	4802      	ldr	r0, [pc, #8]	; (80002bc <I2C1_Init+0x2c>)
 80002b4:	f000 fb6c 	bl	8000990 <I2C_Init>
}
 80002b8:	bf00      	nop
 80002ba:	bd80      	pop	{r7, pc}
 80002bc:	20000038 	.word	0x20000038
 80002c0:	40005400 	.word	0x40005400
 80002c4:	000186a0 	.word	0x000186a0

080002c8 <GPIO_ButtonInit>:

void GPIO_ButtonInit(void)
{
 80002c8:	b580      	push	{r7, lr}
 80002ca:	b084      	sub	sp, #16
 80002cc:	af00      	add	r7, sp, #0

	GPIO_Handle_t GpioBtn;

	GpioBtn.pGPIOx = GPIOA;
 80002ce:	4b0a      	ldr	r3, [pc, #40]	; (80002f8 <GPIO_ButtonInit+0x30>)
 80002d0:	607b      	str	r3, [r7, #4]
	GpioBtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_0;
 80002d2:	2300      	movs	r3, #0
 80002d4:	723b      	strb	r3, [r7, #8]
	GpioBtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 80002d6:	2300      	movs	r3, #0
 80002d8:	727b      	strb	r3, [r7, #9]
	GpioBtn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPD_NOPUPD;
 80002da:	2300      	movs	r3, #0
 80002dc:	72fb      	strb	r3, [r7, #11]

	//Enable the peripheral clock
	GPIO_PeriClock_Control(GPIOA, ENABLE);
 80002de:	2101      	movs	r1, #1
 80002e0:	4805      	ldr	r0, [pc, #20]	; (80002f8 <GPIO_ButtonInit+0x30>)
 80002e2:	f000 f849 	bl	8000378 <GPIO_PeriClock_Control>

	//Init the GPIO
	GPIO_Init(&GpioBtn);
 80002e6:	1d3b      	adds	r3, r7, #4
 80002e8:	4618      	mov	r0, r3
 80002ea:	f000 f92d 	bl	8000548 <GPIO_Init>
}
 80002ee:	bf00      	nop
 80002f0:	3710      	adds	r7, #16
 80002f2:	46bd      	mov	sp, r7
 80002f4:	bd80      	pop	{r7, pc}
 80002f6:	bf00      	nop
 80002f8:	40020000 	.word	0x40020000

080002fc <I2C1_EV_IRQHandler>:


void I2C1_EV_IRQHandler(void)
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	af00      	add	r7, sp, #0
	I2C_Event_IRQHandling(&I2C_Config);
 8000300:	4802      	ldr	r0, [pc, #8]	; (800030c <I2C1_EV_IRQHandler+0x10>)
 8000302:	f000 fc0b 	bl	8000b1c <I2C_Event_IRQHandling>
}
 8000306:	bf00      	nop
 8000308:	bd80      	pop	{r7, pc}
 800030a:	bf00      	nop
 800030c:	20000038 	.word	0x20000038

08000310 <I2C1_ER_IRQHandler>:

void I2C1_ER_IRQHandler(void)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	af00      	add	r7, sp, #0
	I2C_Error_IRQHandling(&I2C_Config);
 8000314:	4802      	ldr	r0, [pc, #8]	; (8000320 <I2C1_ER_IRQHandler+0x10>)
 8000316:	f000 fcdb 	bl	8000cd0 <I2C_Error_IRQHandling>
}
 800031a:	bf00      	nop
 800031c:	bd80      	pop	{r7, pc}
 800031e:	bf00      	nop
 8000320:	20000038 	.word	0x20000038

08000324 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000324:	480d      	ldr	r0, [pc, #52]	; (800035c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000326:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000328:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800032c:	480c      	ldr	r0, [pc, #48]	; (8000360 <LoopForever+0x6>)
  ldr r1, =_edata
 800032e:	490d      	ldr	r1, [pc, #52]	; (8000364 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000330:	4a0d      	ldr	r2, [pc, #52]	; (8000368 <LoopForever+0xe>)
  movs r3, #0
 8000332:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000334:	e002      	b.n	800033c <LoopCopyDataInit>

08000336 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000336:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000338:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800033a:	3304      	adds	r3, #4

0800033c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800033c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800033e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000340:	d3f9      	bcc.n	8000336 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000342:	4a0a      	ldr	r2, [pc, #40]	; (800036c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000344:	4c0a      	ldr	r4, [pc, #40]	; (8000370 <LoopForever+0x16>)
  movs r3, #0
 8000346:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000348:	e001      	b.n	800034e <LoopFillZerobss>

0800034a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800034a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800034c:	3204      	adds	r2, #4

0800034e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800034e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000350:	d3fb      	bcc.n	800034a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000352:	f001 f80b 	bl	800136c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000356:	f7ff ff4f 	bl	80001f8 <main>

0800035a <LoopForever>:

LoopForever:
    b LoopForever
 800035a:	e7fe      	b.n	800035a <LoopForever>
  ldr   r0, =_estack
 800035c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000360:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000364:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8000368:	080013ec 	.word	0x080013ec
  ldr r2, =_sbss
 800036c:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8000370:	20000060 	.word	0x20000060

08000374 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000374:	e7fe      	b.n	8000374 <ADC_IRQHandler>
	...

08000378 <GPIO_PeriClock_Control>:
 *
 * @Note              -  none

 */
void GPIO_PeriClock_Control(GPIOx_RegDef_t *pGPIOx,uint8_t EnorDi)
{
 8000378:	b480      	push	{r7}
 800037a:	b083      	sub	sp, #12
 800037c:	af00      	add	r7, sp, #0
 800037e:	6078      	str	r0, [r7, #4]
 8000380:	460b      	mov	r3, r1
 8000382:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000384:	78fb      	ldrb	r3, [r7, #3]
 8000386:	2b01      	cmp	r3, #1
 8000388:	d162      	bne.n	8000450 <GPIO_PeriClock_Control+0xd8>
	{
		if(pGPIOx == GPIOA)
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	4a64      	ldr	r2, [pc, #400]	; (8000520 <GPIO_PeriClock_Control+0x1a8>)
 800038e:	4293      	cmp	r3, r2
 8000390:	d106      	bne.n	80003a0 <GPIO_PeriClock_Control+0x28>
		{
			GPIOA_PCLK_EN();
 8000392:	4b64      	ldr	r3, [pc, #400]	; (8000524 <GPIO_PeriClock_Control+0x1ac>)
 8000394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000396:	4a63      	ldr	r2, [pc, #396]	; (8000524 <GPIO_PeriClock_Control+0x1ac>)
 8000398:	f043 0301 	orr.w	r3, r3, #1
 800039c:	6313      	str	r3, [r2, #48]	; 0x30
		else if(pGPIOx == GPIOI)
		{
			GPIOI_PCLK_DI();
		}
	}
}
 800039e:	e0b9      	b.n	8000514 <GPIO_PeriClock_Control+0x19c>
		else if(pGPIOx == GPIOB)
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	4a61      	ldr	r2, [pc, #388]	; (8000528 <GPIO_PeriClock_Control+0x1b0>)
 80003a4:	4293      	cmp	r3, r2
 80003a6:	d106      	bne.n	80003b6 <GPIO_PeriClock_Control+0x3e>
			GPIOB_PCLK_EN();
 80003a8:	4b5e      	ldr	r3, [pc, #376]	; (8000524 <GPIO_PeriClock_Control+0x1ac>)
 80003aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003ac:	4a5d      	ldr	r2, [pc, #372]	; (8000524 <GPIO_PeriClock_Control+0x1ac>)
 80003ae:	f043 0302 	orr.w	r3, r3, #2
 80003b2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003b4:	e0ae      	b.n	8000514 <GPIO_PeriClock_Control+0x19c>
		else if(pGPIOx == GPIOC)
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	4a5c      	ldr	r2, [pc, #368]	; (800052c <GPIO_PeriClock_Control+0x1b4>)
 80003ba:	4293      	cmp	r3, r2
 80003bc:	d106      	bne.n	80003cc <GPIO_PeriClock_Control+0x54>
			GPIOC_PCLK_EN();
 80003be:	4b59      	ldr	r3, [pc, #356]	; (8000524 <GPIO_PeriClock_Control+0x1ac>)
 80003c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003c2:	4a58      	ldr	r2, [pc, #352]	; (8000524 <GPIO_PeriClock_Control+0x1ac>)
 80003c4:	f043 0304 	orr.w	r3, r3, #4
 80003c8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003ca:	e0a3      	b.n	8000514 <GPIO_PeriClock_Control+0x19c>
		else if(pGPIOx == GPIOD)
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	4a58      	ldr	r2, [pc, #352]	; (8000530 <GPIO_PeriClock_Control+0x1b8>)
 80003d0:	4293      	cmp	r3, r2
 80003d2:	d106      	bne.n	80003e2 <GPIO_PeriClock_Control+0x6a>
			GPIOD_PCLK_EN();
 80003d4:	4b53      	ldr	r3, [pc, #332]	; (8000524 <GPIO_PeriClock_Control+0x1ac>)
 80003d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003d8:	4a52      	ldr	r2, [pc, #328]	; (8000524 <GPIO_PeriClock_Control+0x1ac>)
 80003da:	f043 0308 	orr.w	r3, r3, #8
 80003de:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003e0:	e098      	b.n	8000514 <GPIO_PeriClock_Control+0x19c>
		else if(pGPIOx == GPIOE)
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	4a53      	ldr	r2, [pc, #332]	; (8000534 <GPIO_PeriClock_Control+0x1bc>)
 80003e6:	4293      	cmp	r3, r2
 80003e8:	d106      	bne.n	80003f8 <GPIO_PeriClock_Control+0x80>
			GPIOE_PCLK_EN();
 80003ea:	4b4e      	ldr	r3, [pc, #312]	; (8000524 <GPIO_PeriClock_Control+0x1ac>)
 80003ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003ee:	4a4d      	ldr	r2, [pc, #308]	; (8000524 <GPIO_PeriClock_Control+0x1ac>)
 80003f0:	f043 0310 	orr.w	r3, r3, #16
 80003f4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003f6:	e08d      	b.n	8000514 <GPIO_PeriClock_Control+0x19c>
		else if(pGPIOx == GPIOF)
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	4a4f      	ldr	r2, [pc, #316]	; (8000538 <GPIO_PeriClock_Control+0x1c0>)
 80003fc:	4293      	cmp	r3, r2
 80003fe:	d106      	bne.n	800040e <GPIO_PeriClock_Control+0x96>
			GPIOF_PCLK_EN();
 8000400:	4b48      	ldr	r3, [pc, #288]	; (8000524 <GPIO_PeriClock_Control+0x1ac>)
 8000402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000404:	4a47      	ldr	r2, [pc, #284]	; (8000524 <GPIO_PeriClock_Control+0x1ac>)
 8000406:	f043 0320 	orr.w	r3, r3, #32
 800040a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800040c:	e082      	b.n	8000514 <GPIO_PeriClock_Control+0x19c>
		else if(pGPIOx == GPIOG)
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	4a4a      	ldr	r2, [pc, #296]	; (800053c <GPIO_PeriClock_Control+0x1c4>)
 8000412:	4293      	cmp	r3, r2
 8000414:	d106      	bne.n	8000424 <GPIO_PeriClock_Control+0xac>
			GPIOG_PCLK_EN();
 8000416:	4b43      	ldr	r3, [pc, #268]	; (8000524 <GPIO_PeriClock_Control+0x1ac>)
 8000418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800041a:	4a42      	ldr	r2, [pc, #264]	; (8000524 <GPIO_PeriClock_Control+0x1ac>)
 800041c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000420:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000422:	e077      	b.n	8000514 <GPIO_PeriClock_Control+0x19c>
		else if(pGPIOx == GPIOH)
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	4a46      	ldr	r2, [pc, #280]	; (8000540 <GPIO_PeriClock_Control+0x1c8>)
 8000428:	4293      	cmp	r3, r2
 800042a:	d106      	bne.n	800043a <GPIO_PeriClock_Control+0xc2>
			GPIOH_PCLK_EN();
 800042c:	4b3d      	ldr	r3, [pc, #244]	; (8000524 <GPIO_PeriClock_Control+0x1ac>)
 800042e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000430:	4a3c      	ldr	r2, [pc, #240]	; (8000524 <GPIO_PeriClock_Control+0x1ac>)
 8000432:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000436:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000438:	e06c      	b.n	8000514 <GPIO_PeriClock_Control+0x19c>
		else if(pGPIOx == GPIOI)
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	4a41      	ldr	r2, [pc, #260]	; (8000544 <GPIO_PeriClock_Control+0x1cc>)
 800043e:	4293      	cmp	r3, r2
 8000440:	d168      	bne.n	8000514 <GPIO_PeriClock_Control+0x19c>
			GPIOI_PCLK_EN();
 8000442:	4b38      	ldr	r3, [pc, #224]	; (8000524 <GPIO_PeriClock_Control+0x1ac>)
 8000444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000446:	4a37      	ldr	r2, [pc, #220]	; (8000524 <GPIO_PeriClock_Control+0x1ac>)
 8000448:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800044c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800044e:	e061      	b.n	8000514 <GPIO_PeriClock_Control+0x19c>
		if(pGPIOx == GPIOA)
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	4a33      	ldr	r2, [pc, #204]	; (8000520 <GPIO_PeriClock_Control+0x1a8>)
 8000454:	4293      	cmp	r3, r2
 8000456:	d106      	bne.n	8000466 <GPIO_PeriClock_Control+0xee>
			GPIOA_PCLK_DI();
 8000458:	4b32      	ldr	r3, [pc, #200]	; (8000524 <GPIO_PeriClock_Control+0x1ac>)
 800045a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800045c:	4a31      	ldr	r2, [pc, #196]	; (8000524 <GPIO_PeriClock_Control+0x1ac>)
 800045e:	f023 0301 	bic.w	r3, r3, #1
 8000462:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000464:	e056      	b.n	8000514 <GPIO_PeriClock_Control+0x19c>
		else if(pGPIOx == GPIOB)
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	4a2f      	ldr	r2, [pc, #188]	; (8000528 <GPIO_PeriClock_Control+0x1b0>)
 800046a:	4293      	cmp	r3, r2
 800046c:	d106      	bne.n	800047c <GPIO_PeriClock_Control+0x104>
			GPIOB_PCLK_DI();
 800046e:	4b2d      	ldr	r3, [pc, #180]	; (8000524 <GPIO_PeriClock_Control+0x1ac>)
 8000470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000472:	4a2c      	ldr	r2, [pc, #176]	; (8000524 <GPIO_PeriClock_Control+0x1ac>)
 8000474:	f023 0302 	bic.w	r3, r3, #2
 8000478:	6313      	str	r3, [r2, #48]	; 0x30
}
 800047a:	e04b      	b.n	8000514 <GPIO_PeriClock_Control+0x19c>
		else if(pGPIOx == GPIOC)
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	4a2b      	ldr	r2, [pc, #172]	; (800052c <GPIO_PeriClock_Control+0x1b4>)
 8000480:	4293      	cmp	r3, r2
 8000482:	d106      	bne.n	8000492 <GPIO_PeriClock_Control+0x11a>
			GPIOC_PCLK_DI();
 8000484:	4b27      	ldr	r3, [pc, #156]	; (8000524 <GPIO_PeriClock_Control+0x1ac>)
 8000486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000488:	4a26      	ldr	r2, [pc, #152]	; (8000524 <GPIO_PeriClock_Control+0x1ac>)
 800048a:	f023 0304 	bic.w	r3, r3, #4
 800048e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000490:	e040      	b.n	8000514 <GPIO_PeriClock_Control+0x19c>
		else if(pGPIOx == GPIOD)
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	4a26      	ldr	r2, [pc, #152]	; (8000530 <GPIO_PeriClock_Control+0x1b8>)
 8000496:	4293      	cmp	r3, r2
 8000498:	d106      	bne.n	80004a8 <GPIO_PeriClock_Control+0x130>
			GPIOD_PCLK_DI();
 800049a:	4b22      	ldr	r3, [pc, #136]	; (8000524 <GPIO_PeriClock_Control+0x1ac>)
 800049c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800049e:	4a21      	ldr	r2, [pc, #132]	; (8000524 <GPIO_PeriClock_Control+0x1ac>)
 80004a0:	f023 0308 	bic.w	r3, r3, #8
 80004a4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004a6:	e035      	b.n	8000514 <GPIO_PeriClock_Control+0x19c>
		else if(pGPIOx == GPIOE)
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	4a22      	ldr	r2, [pc, #136]	; (8000534 <GPIO_PeriClock_Control+0x1bc>)
 80004ac:	4293      	cmp	r3, r2
 80004ae:	d106      	bne.n	80004be <GPIO_PeriClock_Control+0x146>
			GPIOE_PCLK_DI();
 80004b0:	4b1c      	ldr	r3, [pc, #112]	; (8000524 <GPIO_PeriClock_Control+0x1ac>)
 80004b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004b4:	4a1b      	ldr	r2, [pc, #108]	; (8000524 <GPIO_PeriClock_Control+0x1ac>)
 80004b6:	f023 0310 	bic.w	r3, r3, #16
 80004ba:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004bc:	e02a      	b.n	8000514 <GPIO_PeriClock_Control+0x19c>
		else if(pGPIOx == GPIOF)
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	4a1d      	ldr	r2, [pc, #116]	; (8000538 <GPIO_PeriClock_Control+0x1c0>)
 80004c2:	4293      	cmp	r3, r2
 80004c4:	d106      	bne.n	80004d4 <GPIO_PeriClock_Control+0x15c>
			GPIOF_PCLK_DI();
 80004c6:	4b17      	ldr	r3, [pc, #92]	; (8000524 <GPIO_PeriClock_Control+0x1ac>)
 80004c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004ca:	4a16      	ldr	r2, [pc, #88]	; (8000524 <GPIO_PeriClock_Control+0x1ac>)
 80004cc:	f023 0320 	bic.w	r3, r3, #32
 80004d0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004d2:	e01f      	b.n	8000514 <GPIO_PeriClock_Control+0x19c>
		else if(pGPIOx == GPIOG)
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	4a19      	ldr	r2, [pc, #100]	; (800053c <GPIO_PeriClock_Control+0x1c4>)
 80004d8:	4293      	cmp	r3, r2
 80004da:	d106      	bne.n	80004ea <GPIO_PeriClock_Control+0x172>
			GPIOG_PCLK_DI();
 80004dc:	4b11      	ldr	r3, [pc, #68]	; (8000524 <GPIO_PeriClock_Control+0x1ac>)
 80004de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004e0:	4a10      	ldr	r2, [pc, #64]	; (8000524 <GPIO_PeriClock_Control+0x1ac>)
 80004e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80004e6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004e8:	e014      	b.n	8000514 <GPIO_PeriClock_Control+0x19c>
		else if(pGPIOx == GPIOH)
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	4a14      	ldr	r2, [pc, #80]	; (8000540 <GPIO_PeriClock_Control+0x1c8>)
 80004ee:	4293      	cmp	r3, r2
 80004f0:	d106      	bne.n	8000500 <GPIO_PeriClock_Control+0x188>
			GPIOH_PCLK_DI();
 80004f2:	4b0c      	ldr	r3, [pc, #48]	; (8000524 <GPIO_PeriClock_Control+0x1ac>)
 80004f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004f6:	4a0b      	ldr	r2, [pc, #44]	; (8000524 <GPIO_PeriClock_Control+0x1ac>)
 80004f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80004fc:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004fe:	e009      	b.n	8000514 <GPIO_PeriClock_Control+0x19c>
		else if(pGPIOx == GPIOI)
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	4a10      	ldr	r2, [pc, #64]	; (8000544 <GPIO_PeriClock_Control+0x1cc>)
 8000504:	4293      	cmp	r3, r2
 8000506:	d105      	bne.n	8000514 <GPIO_PeriClock_Control+0x19c>
			GPIOI_PCLK_DI();
 8000508:	4b06      	ldr	r3, [pc, #24]	; (8000524 <GPIO_PeriClock_Control+0x1ac>)
 800050a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800050c:	4a05      	ldr	r2, [pc, #20]	; (8000524 <GPIO_PeriClock_Control+0x1ac>)
 800050e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000512:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000514:	bf00      	nop
 8000516:	370c      	adds	r7, #12
 8000518:	46bd      	mov	sp, r7
 800051a:	bc80      	pop	{r7}
 800051c:	4770      	bx	lr
 800051e:	bf00      	nop
 8000520:	40020000 	.word	0x40020000
 8000524:	40023800 	.word	0x40023800
 8000528:	40020400 	.word	0x40020400
 800052c:	40020800 	.word	0x40020800
 8000530:	40020c00 	.word	0x40020c00
 8000534:	40021000 	.word	0x40021000
 8000538:	40021400 	.word	0x40021400
 800053c:	40021800 	.word	0x40021800
 8000540:	40021c00 	.word	0x40021c00
 8000544:	40022000 	.word	0x40022000

08000548 <GPIO_Init>:

/*
 * GPIO init and De-init function
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b086      	sub	sp, #24
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
	uint32_t temp = 0 ;
 8000550:	2300      	movs	r3, #0
 8000552:	617b      	str	r3, [r7, #20]

	//Enable the GPIO peripheral clock
	GPIO_PeriClock_Control(pGPIOHandle->pGPIOx, ENABLE);
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	2101      	movs	r1, #1
 800055a:	4618      	mov	r0, r3
 800055c:	f7ff ff0c 	bl	8000378 <GPIO_PeriClock_Control>

	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ALTFN)
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	795b      	ldrb	r3, [r3, #5]
 8000564:	2b02      	cmp	r3, #2
 8000566:	d813      	bhi.n	8000590 <GPIO_Init+0x48>
	{
		//Non-interrupt functionality
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 *pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	795b      	ldrb	r3, [r3, #5]
 800056c:	461a      	mov	r2, r3
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	791b      	ldrb	r3, [r3, #4]
 8000572:	005b      	lsls	r3, r3, #1
 8000574:	fa02 f303 	lsl.w	r3, r2, r3
 8000578:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER |= temp;
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	6819      	ldr	r1, [r3, #0]
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	697a      	ldr	r2, [r7, #20]
 8000586:	430a      	orrs	r2, r1
 8000588:	601a      	str	r2, [r3, #0]
		temp = 0;
 800058a:	2300      	movs	r3, #0
 800058c:	617b      	str	r3, [r7, #20]
 800058e:	e0c1      	b.n	8000714 <GPIO_Init+0x1cc>
	}
	else
	{
		//Alternate functionality
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	795b      	ldrb	r3, [r3, #5]
 8000594:	2b05      	cmp	r3, #5
 8000596:	d117      	bne.n	80005c8 <GPIO_Init+0x80>
		{
			//Enable the Falling edge interrupt and clear the rising edge interrupt
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000598:	4b8e      	ldr	r3, [pc, #568]	; (80007d4 <GPIO_Init+0x28c>)
 800059a:	68db      	ldr	r3, [r3, #12]
 800059c:	687a      	ldr	r2, [r7, #4]
 800059e:	7912      	ldrb	r2, [r2, #4]
 80005a0:	4611      	mov	r1, r2
 80005a2:	2201      	movs	r2, #1
 80005a4:	408a      	lsls	r2, r1
 80005a6:	4611      	mov	r1, r2
 80005a8:	4a8a      	ldr	r2, [pc, #552]	; (80007d4 <GPIO_Init+0x28c>)
 80005aa:	430b      	orrs	r3, r1
 80005ac:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005ae:	4b89      	ldr	r3, [pc, #548]	; (80007d4 <GPIO_Init+0x28c>)
 80005b0:	689b      	ldr	r3, [r3, #8]
 80005b2:	687a      	ldr	r2, [r7, #4]
 80005b4:	7912      	ldrb	r2, [r2, #4]
 80005b6:	4611      	mov	r1, r2
 80005b8:	2201      	movs	r2, #1
 80005ba:	408a      	lsls	r2, r1
 80005bc:	43d2      	mvns	r2, r2
 80005be:	4611      	mov	r1, r2
 80005c0:	4a84      	ldr	r2, [pc, #528]	; (80007d4 <GPIO_Init+0x28c>)
 80005c2:	400b      	ands	r3, r1
 80005c4:	6093      	str	r3, [r2, #8]
 80005c6:	e035      	b.n	8000634 <GPIO_Init+0xec>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	795b      	ldrb	r3, [r3, #5]
 80005cc:	2b04      	cmp	r3, #4
 80005ce:	d117      	bne.n	8000600 <GPIO_Init+0xb8>
		{
			//Enable the Rising edge interrupt and clear the falling edge interrupt
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005d0:	4b80      	ldr	r3, [pc, #512]	; (80007d4 <GPIO_Init+0x28c>)
 80005d2:	68db      	ldr	r3, [r3, #12]
 80005d4:	687a      	ldr	r2, [r7, #4]
 80005d6:	7912      	ldrb	r2, [r2, #4]
 80005d8:	4611      	mov	r1, r2
 80005da:	2201      	movs	r2, #1
 80005dc:	408a      	lsls	r2, r1
 80005de:	43d2      	mvns	r2, r2
 80005e0:	4611      	mov	r1, r2
 80005e2:	4a7c      	ldr	r2, [pc, #496]	; (80007d4 <GPIO_Init+0x28c>)
 80005e4:	400b      	ands	r3, r1
 80005e6:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005e8:	4b7a      	ldr	r3, [pc, #488]	; (80007d4 <GPIO_Init+0x28c>)
 80005ea:	689b      	ldr	r3, [r3, #8]
 80005ec:	687a      	ldr	r2, [r7, #4]
 80005ee:	7912      	ldrb	r2, [r2, #4]
 80005f0:	4611      	mov	r1, r2
 80005f2:	2201      	movs	r2, #1
 80005f4:	408a      	lsls	r2, r1
 80005f6:	4611      	mov	r1, r2
 80005f8:	4a76      	ldr	r2, [pc, #472]	; (80007d4 <GPIO_Init+0x28c>)
 80005fa:	430b      	orrs	r3, r1
 80005fc:	6093      	str	r3, [r2, #8]
 80005fe:	e019      	b.n	8000634 <GPIO_Init+0xec>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT)
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	795b      	ldrb	r3, [r3, #5]
 8000604:	2b06      	cmp	r3, #6
 8000606:	d115      	bne.n	8000634 <GPIO_Init+0xec>
		{
			//Enable the Rising edge interrupt and falling edge interrupt
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000608:	4b72      	ldr	r3, [pc, #456]	; (80007d4 <GPIO_Init+0x28c>)
 800060a:	68db      	ldr	r3, [r3, #12]
 800060c:	687a      	ldr	r2, [r7, #4]
 800060e:	7912      	ldrb	r2, [r2, #4]
 8000610:	4611      	mov	r1, r2
 8000612:	2201      	movs	r2, #1
 8000614:	408a      	lsls	r2, r1
 8000616:	4611      	mov	r1, r2
 8000618:	4a6e      	ldr	r2, [pc, #440]	; (80007d4 <GPIO_Init+0x28c>)
 800061a:	430b      	orrs	r3, r1
 800061c:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800061e:	4b6d      	ldr	r3, [pc, #436]	; (80007d4 <GPIO_Init+0x28c>)
 8000620:	689b      	ldr	r3, [r3, #8]
 8000622:	687a      	ldr	r2, [r7, #4]
 8000624:	7912      	ldrb	r2, [r2, #4]
 8000626:	4611      	mov	r1, r2
 8000628:	2201      	movs	r2, #1
 800062a:	408a      	lsls	r2, r1
 800062c:	4611      	mov	r1, r2
 800062e:	4a69      	ldr	r2, [pc, #420]	; (80007d4 <GPIO_Init+0x28c>)
 8000630:	430b      	orrs	r3, r1
 8000632:	6093      	str	r3, [r2, #8]
		}

		//Enable the respective port for the pin number to NVIC
		SYSCFG_PCLK_EN();
 8000634:	4b68      	ldr	r3, [pc, #416]	; (80007d8 <GPIO_Init+0x290>)
 8000636:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000638:	4a67      	ldr	r2, [pc, #412]	; (80007d8 <GPIO_Init+0x290>)
 800063a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800063e:	6453      	str	r3, [r2, #68]	; 0x44
		uint8_t index = 0;
 8000640:	2300      	movs	r3, #0
 8000642:	74fb      	strb	r3, [r7, #19]
		uint8_t pos	= 0 ;
 8000644:	2300      	movs	r3, #0
 8000646:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = PORTCODE_FROM_GPIO_PORTREG(pGPIOHandle->pGPIOx);
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	4a63      	ldr	r2, [pc, #396]	; (80007dc <GPIO_Init+0x294>)
 800064e:	4293      	cmp	r3, r2
 8000650:	d039      	beq.n	80006c6 <GPIO_Init+0x17e>
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	4a62      	ldr	r2, [pc, #392]	; (80007e0 <GPIO_Init+0x298>)
 8000658:	4293      	cmp	r3, r2
 800065a:	d032      	beq.n	80006c2 <GPIO_Init+0x17a>
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	4a60      	ldr	r2, [pc, #384]	; (80007e4 <GPIO_Init+0x29c>)
 8000662:	4293      	cmp	r3, r2
 8000664:	d02b      	beq.n	80006be <GPIO_Init+0x176>
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	4a5f      	ldr	r2, [pc, #380]	; (80007e8 <GPIO_Init+0x2a0>)
 800066c:	4293      	cmp	r3, r2
 800066e:	d024      	beq.n	80006ba <GPIO_Init+0x172>
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	4a5d      	ldr	r2, [pc, #372]	; (80007ec <GPIO_Init+0x2a4>)
 8000676:	4293      	cmp	r3, r2
 8000678:	d01d      	beq.n	80006b6 <GPIO_Init+0x16e>
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	4a5c      	ldr	r2, [pc, #368]	; (80007f0 <GPIO_Init+0x2a8>)
 8000680:	4293      	cmp	r3, r2
 8000682:	d016      	beq.n	80006b2 <GPIO_Init+0x16a>
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	4a5a      	ldr	r2, [pc, #360]	; (80007f4 <GPIO_Init+0x2ac>)
 800068a:	4293      	cmp	r3, r2
 800068c:	d00f      	beq.n	80006ae <GPIO_Init+0x166>
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	4a59      	ldr	r2, [pc, #356]	; (80007f8 <GPIO_Init+0x2b0>)
 8000694:	4293      	cmp	r3, r2
 8000696:	d008      	beq.n	80006aa <GPIO_Init+0x162>
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	4a57      	ldr	r2, [pc, #348]	; (80007fc <GPIO_Init+0x2b4>)
 800069e:	4293      	cmp	r3, r2
 80006a0:	d101      	bne.n	80006a6 <GPIO_Init+0x15e>
 80006a2:	2308      	movs	r3, #8
 80006a4:	e010      	b.n	80006c8 <GPIO_Init+0x180>
 80006a6:	2300      	movs	r3, #0
 80006a8:	e00e      	b.n	80006c8 <GPIO_Init+0x180>
 80006aa:	2307      	movs	r3, #7
 80006ac:	e00c      	b.n	80006c8 <GPIO_Init+0x180>
 80006ae:	2306      	movs	r3, #6
 80006b0:	e00a      	b.n	80006c8 <GPIO_Init+0x180>
 80006b2:	2305      	movs	r3, #5
 80006b4:	e008      	b.n	80006c8 <GPIO_Init+0x180>
 80006b6:	2304      	movs	r3, #4
 80006b8:	e006      	b.n	80006c8 <GPIO_Init+0x180>
 80006ba:	2303      	movs	r3, #3
 80006bc:	e004      	b.n	80006c8 <GPIO_Init+0x180>
 80006be:	2302      	movs	r3, #2
 80006c0:	e002      	b.n	80006c8 <GPIO_Init+0x180>
 80006c2:	2301      	movs	r3, #1
 80006c4:	e000      	b.n	80006c8 <GPIO_Init+0x180>
 80006c6:	2300      	movs	r3, #0
 80006c8:	747b      	strb	r3, [r7, #17]
		index = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	791b      	ldrb	r3, [r3, #4]
 80006ce:	089b      	lsrs	r3, r3, #2
 80006d0:	74fb      	strb	r3, [r7, #19]
		pos = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	791b      	ldrb	r3, [r3, #4]
 80006d6:	f003 0303 	and.w	r3, r3, #3
 80006da:	74bb      	strb	r3, [r7, #18]

		SYSCFG->EXTICR[index] |= (portcode << (4 * pos));
 80006dc:	4a48      	ldr	r2, [pc, #288]	; (8000800 <GPIO_Init+0x2b8>)
 80006de:	7cfb      	ldrb	r3, [r7, #19]
 80006e0:	3302      	adds	r3, #2
 80006e2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80006e6:	7c79      	ldrb	r1, [r7, #17]
 80006e8:	7cbb      	ldrb	r3, [r7, #18]
 80006ea:	009b      	lsls	r3, r3, #2
 80006ec:	fa01 f303 	lsl.w	r3, r1, r3
 80006f0:	4618      	mov	r0, r3
 80006f2:	4943      	ldr	r1, [pc, #268]	; (8000800 <GPIO_Init+0x2b8>)
 80006f4:	7cfb      	ldrb	r3, [r7, #19]
 80006f6:	4302      	orrs	r2, r0
 80006f8:	3302      	adds	r3, #2
 80006fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


		//Enable the GPIO peripheral interrupt
		EXTI->IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80006fe:	4b35      	ldr	r3, [pc, #212]	; (80007d4 <GPIO_Init+0x28c>)
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	687a      	ldr	r2, [r7, #4]
 8000704:	7912      	ldrb	r2, [r2, #4]
 8000706:	4611      	mov	r1, r2
 8000708:	2201      	movs	r2, #1
 800070a:	408a      	lsls	r2, r1
 800070c:	4611      	mov	r1, r2
 800070e:	4a31      	ldr	r2, [pc, #196]	; (80007d4 <GPIO_Init+0x28c>)
 8000710:	430b      	orrs	r3, r1
 8000712:	6013      	str	r3, [r2, #0]
	}

	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 *pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	799b      	ldrb	r3, [r3, #6]
 8000718:	461a      	mov	r2, r3
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	791b      	ldrb	r3, [r3, #4]
 800071e:	005b      	lsls	r3, r3, #1
 8000720:	fa02 f303 	lsl.w	r3, r2, r3
 8000724:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	6899      	ldr	r1, [r3, #8]
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	697a      	ldr	r2, [r7, #20]
 8000732:	430a      	orrs	r2, r1
 8000734:	609a      	str	r2, [r3, #8]
	temp = 0;
 8000736:	2300      	movs	r3, #0
 8000738:	617b      	str	r3, [r7, #20]

	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	7a1b      	ldrb	r3, [r3, #8]
 800073e:	461a      	mov	r2, r3
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	791b      	ldrb	r3, [r3, #4]
 8000744:	fa02 f303 	lsl.w	r3, r2, r3
 8000748:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	6859      	ldr	r1, [r3, #4]
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	697a      	ldr	r2, [r7, #20]
 8000756:	430a      	orrs	r2, r1
 8000758:	605a      	str	r2, [r3, #4]
	temp = 0;
 800075a:	2300      	movs	r3, #0
 800075c:	617b      	str	r3, [r7, #20]

	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 *pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	79db      	ldrb	r3, [r3, #7]
 8000762:	461a      	mov	r2, r3
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	791b      	ldrb	r3, [r3, #4]
 8000768:	005b      	lsls	r3, r3, #1
 800076a:	fa02 f303 	lsl.w	r3, r2, r3
 800076e:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	68d9      	ldr	r1, [r3, #12]
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	697a      	ldr	r2, [r7, #20]
 800077c:	430a      	orrs	r2, r1
 800077e:	60da      	str	r2, [r3, #12]
	temp = 0;
 8000780:	2300      	movs	r3, #0
 8000782:	617b      	str	r3, [r7, #20]

	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	795b      	ldrb	r3, [r3, #5]
 8000788:	2b02      	cmp	r3, #2
 800078a:	d11f      	bne.n	80007cc <GPIO_Init+0x284>
	{
		uint8_t Reg_index = (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) / 8;
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	791b      	ldrb	r3, [r3, #4]
 8000790:	08db      	lsrs	r3, r3, #3
 8000792:	743b      	strb	r3, [r7, #16]
		uint8_t Bit_pos	= (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) % 8;
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	791b      	ldrb	r3, [r3, #4]
 8000798:	f003 0307 	and.w	r3, r3, #7
 800079c:	73fb      	strb	r3, [r7, #15]

		temp = pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode;
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	7a5b      	ldrb	r3, [r3, #9]
 80007a2:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->AFR[Reg_index] |= (temp << (4 * Bit_pos) );
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	7c3a      	ldrb	r2, [r7, #16]
 80007aa:	3208      	adds	r2, #8
 80007ac:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80007b0:	7bfb      	ldrb	r3, [r7, #15]
 80007b2:	009b      	lsls	r3, r3, #2
 80007b4:	697a      	ldr	r2, [r7, #20]
 80007b6:	fa02 f103 	lsl.w	r1, r2, r3
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	7c3a      	ldrb	r2, [r7, #16]
 80007c0:	4301      	orrs	r1, r0
 80007c2:	3208      	adds	r2, #8
 80007c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		temp = 0;
 80007c8:	2300      	movs	r3, #0
 80007ca:	617b      	str	r3, [r7, #20]
	}

}
 80007cc:	bf00      	nop
 80007ce:	3718      	adds	r7, #24
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	40013c00 	.word	0x40013c00
 80007d8:	40023800 	.word	0x40023800
 80007dc:	40020000 	.word	0x40020000
 80007e0:	40020400 	.word	0x40020400
 80007e4:	40020800 	.word	0x40020800
 80007e8:	40020c00 	.word	0x40020c00
 80007ec:	40021000 	.word	0x40021000
 80007f0:	40021400 	.word	0x40021400
 80007f4:	40021800 	.word	0x40021800
 80007f8:	40021c00 	.word	0x40021c00
 80007fc:	40022000 	.word	0x40022000
 8000800:	40013800 	.word	0x40013800

08000804 <I2C_PeriClock_Control>:

/*
 * Peripheral clock enable or disable API
 */
void I2C_PeriClock_Control(I2C_RegDef_t *pI2Cx,uint8_t EnorDi)
{
 8000804:	b480      	push	{r7}
 8000806:	b083      	sub	sp, #12
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
 800080c:	460b      	mov	r3, r1
 800080e:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000810:	78fb      	ldrb	r3, [r7, #3]
 8000812:	2b01      	cmp	r3, #1
 8000814:	d120      	bne.n	8000858 <I2C_PeriClock_Control+0x54>
	{
		if(pI2Cx == I2C1)
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	4a22      	ldr	r2, [pc, #136]	; (80008a4 <I2C_PeriClock_Control+0xa0>)
 800081a:	4293      	cmp	r3, r2
 800081c:	d106      	bne.n	800082c <I2C_PeriClock_Control+0x28>
		{
			I2C1_PCLK_EN();
 800081e:	4b22      	ldr	r3, [pc, #136]	; (80008a8 <I2C_PeriClock_Control+0xa4>)
 8000820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000822:	4a21      	ldr	r2, [pc, #132]	; (80008a8 <I2C_PeriClock_Control+0xa4>)
 8000824:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000828:	6413      	str	r3, [r2, #64]	; 0x40
		else if(pI2Cx == I2C3)
		{
			I2C3_PCLK_DI();
		}
	}
}
 800082a:	e035      	b.n	8000898 <I2C_PeriClock_Control+0x94>
		else if(pI2Cx == I2C2)
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	4a1f      	ldr	r2, [pc, #124]	; (80008ac <I2C_PeriClock_Control+0xa8>)
 8000830:	4293      	cmp	r3, r2
 8000832:	d106      	bne.n	8000842 <I2C_PeriClock_Control+0x3e>
			I2C2_PCLK_EN();
 8000834:	4b1c      	ldr	r3, [pc, #112]	; (80008a8 <I2C_PeriClock_Control+0xa4>)
 8000836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000838:	4a1b      	ldr	r2, [pc, #108]	; (80008a8 <I2C_PeriClock_Control+0xa4>)
 800083a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800083e:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000840:	e02a      	b.n	8000898 <I2C_PeriClock_Control+0x94>
		else if(pI2Cx == I2C3)
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	4a1a      	ldr	r2, [pc, #104]	; (80008b0 <I2C_PeriClock_Control+0xac>)
 8000846:	4293      	cmp	r3, r2
 8000848:	d126      	bne.n	8000898 <I2C_PeriClock_Control+0x94>
			I2C3_PCLK_EN();
 800084a:	4b17      	ldr	r3, [pc, #92]	; (80008a8 <I2C_PeriClock_Control+0xa4>)
 800084c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800084e:	4a16      	ldr	r2, [pc, #88]	; (80008a8 <I2C_PeriClock_Control+0xa4>)
 8000850:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000854:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000856:	e01f      	b.n	8000898 <I2C_PeriClock_Control+0x94>
		if(pI2Cx == I2C1)
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	4a12      	ldr	r2, [pc, #72]	; (80008a4 <I2C_PeriClock_Control+0xa0>)
 800085c:	4293      	cmp	r3, r2
 800085e:	d106      	bne.n	800086e <I2C_PeriClock_Control+0x6a>
			I2C1_PCLK_DI();
 8000860:	4b11      	ldr	r3, [pc, #68]	; (80008a8 <I2C_PeriClock_Control+0xa4>)
 8000862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000864:	4a10      	ldr	r2, [pc, #64]	; (80008a8 <I2C_PeriClock_Control+0xa4>)
 8000866:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800086a:	6413      	str	r3, [r2, #64]	; 0x40
}
 800086c:	e014      	b.n	8000898 <I2C_PeriClock_Control+0x94>
		else if(pI2Cx == I2C2)
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	4a0e      	ldr	r2, [pc, #56]	; (80008ac <I2C_PeriClock_Control+0xa8>)
 8000872:	4293      	cmp	r3, r2
 8000874:	d106      	bne.n	8000884 <I2C_PeriClock_Control+0x80>
			I2C2_PCLK_DI();
 8000876:	4b0c      	ldr	r3, [pc, #48]	; (80008a8 <I2C_PeriClock_Control+0xa4>)
 8000878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800087a:	4a0b      	ldr	r2, [pc, #44]	; (80008a8 <I2C_PeriClock_Control+0xa4>)
 800087c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8000880:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000882:	e009      	b.n	8000898 <I2C_PeriClock_Control+0x94>
		else if(pI2Cx == I2C3)
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	4a0a      	ldr	r2, [pc, #40]	; (80008b0 <I2C_PeriClock_Control+0xac>)
 8000888:	4293      	cmp	r3, r2
 800088a:	d105      	bne.n	8000898 <I2C_PeriClock_Control+0x94>
			I2C3_PCLK_DI();
 800088c:	4b06      	ldr	r3, [pc, #24]	; (80008a8 <I2C_PeriClock_Control+0xa4>)
 800088e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000890:	4a05      	ldr	r2, [pc, #20]	; (80008a8 <I2C_PeriClock_Control+0xa4>)
 8000892:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000896:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000898:	bf00      	nop
 800089a:	370c      	adds	r7, #12
 800089c:	46bd      	mov	sp, r7
 800089e:	bc80      	pop	{r7}
 80008a0:	4770      	bx	lr
 80008a2:	bf00      	nop
 80008a4:	40005400 	.word	0x40005400
 80008a8:	40023800 	.word	0x40023800
 80008ac:	40005800 	.word	0x40005800
 80008b0:	40005c00 	.word	0x40005c00

080008b4 <GetPLLClockOutput>:

uint32_t GetPLLClockOutput(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0
	//TODO
}
 80008b8:	bf00      	nop
 80008ba:	4618      	mov	r0, r3
 80008bc:	46bd      	mov	sp, r7
 80008be:	bc80      	pop	{r7}
 80008c0:	4770      	bx	lr
	...

080008c4 <GetPCLKValue>:

uint16_t AHB_Prescalar[] = {2,4,8,16,32,64,128,256,512};
uint8_t APB1_Prescalar[] = {2,4,8,16};
uint32_t GetPCLKValue(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b084      	sub	sp, #16
 80008c8:	af00      	add	r7, sp, #0
	uint32_t SystemClock = 0;
 80008ca:	2300      	movs	r3, #0
 80008cc:	60fb      	str	r3, [r7, #12]
	uint32_t PCLK = 0;
 80008ce:	2300      	movs	r3, #0
 80008d0:	607b      	str	r3, [r7, #4]
	uint8_t ClockSource = 0;
 80008d2:	2300      	movs	r3, #0
 80008d4:	70fb      	strb	r3, [r7, #3]
	uint8_t AHBprescalarIndex = 0;
 80008d6:	2300      	movs	r3, #0
 80008d8:	70bb      	strb	r3, [r7, #2]
	uint8_t APB1prescalarIndex = 0;
 80008da:	2300      	movs	r3, #0
 80008dc:	707b      	strb	r3, [r7, #1]
	uint16_t AHBPrescValue = 0;
 80008de:	2300      	movs	r3, #0
 80008e0:	817b      	strh	r3, [r7, #10]
	uint8_t APB1PrescValue = 0;
 80008e2:	2300      	movs	r3, #0
 80008e4:	727b      	strb	r3, [r7, #9]

	ClockSource = (RCC->CFGR >> 2) & 0x03;
 80008e6:	4b25      	ldr	r3, [pc, #148]	; (800097c <GetPCLKValue+0xb8>)
 80008e8:	689b      	ldr	r3, [r3, #8]
 80008ea:	089b      	lsrs	r3, r3, #2
 80008ec:	b2db      	uxtb	r3, r3
 80008ee:	f003 0303 	and.w	r3, r3, #3
 80008f2:	70fb      	strb	r3, [r7, #3]

	if( ClockSource == 0)
 80008f4:	78fb      	ldrb	r3, [r7, #3]
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d102      	bne.n	8000900 <GetPCLKValue+0x3c>
	{
		//HSI
		SystemClock = 16000000;
 80008fa:	4b21      	ldr	r3, [pc, #132]	; (8000980 <GetPCLKValue+0xbc>)
 80008fc:	60fb      	str	r3, [r7, #12]
 80008fe:	e00b      	b.n	8000918 <GetPCLKValue+0x54>
	}
	else if( ClockSource == 1)
 8000900:	78fb      	ldrb	r3, [r7, #3]
 8000902:	2b01      	cmp	r3, #1
 8000904:	d102      	bne.n	800090c <GetPCLKValue+0x48>
	{
		//HSE
		SystemClock = 8000000;
 8000906:	4b1f      	ldr	r3, [pc, #124]	; (8000984 <GetPCLKValue+0xc0>)
 8000908:	60fb      	str	r3, [r7, #12]
 800090a:	e005      	b.n	8000918 <GetPCLKValue+0x54>
	}
	else if( ClockSource == 2)
 800090c:	78fb      	ldrb	r3, [r7, #3]
 800090e:	2b02      	cmp	r3, #2
 8000910:	d102      	bne.n	8000918 <GetPCLKValue+0x54>
	{
		//PLL
		SystemClock = GetPLLClockOutput();
 8000912:	f7ff ffcf 	bl	80008b4 <GetPLLClockOutput>
 8000916:	60f8      	str	r0, [r7, #12]
	}

	AHBprescalarIndex = (RCC->CFGR >> 4) & 0xF;
 8000918:	4b18      	ldr	r3, [pc, #96]	; (800097c <GetPCLKValue+0xb8>)
 800091a:	689b      	ldr	r3, [r3, #8]
 800091c:	091b      	lsrs	r3, r3, #4
 800091e:	b2db      	uxtb	r3, r3
 8000920:	f003 030f 	and.w	r3, r3, #15
 8000924:	70bb      	strb	r3, [r7, #2]
	if(AHBprescalarIndex == 0)
 8000926:	78bb      	ldrb	r3, [r7, #2]
 8000928:	2b00      	cmp	r3, #0
 800092a:	d102      	bne.n	8000932 <GetPCLKValue+0x6e>
	{
		AHBPrescValue = 1;
 800092c:	2301      	movs	r3, #1
 800092e:	817b      	strh	r3, [r7, #10]
 8000930:	e005      	b.n	800093e <GetPCLKValue+0x7a>
	}
	else
	{
		AHBPrescValue = AHB_Prescalar[AHBprescalarIndex - 8];
 8000932:	78bb      	ldrb	r3, [r7, #2]
 8000934:	3b08      	subs	r3, #8
 8000936:	4a14      	ldr	r2, [pc, #80]	; (8000988 <GetPCLKValue+0xc4>)
 8000938:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800093c:	817b      	strh	r3, [r7, #10]
	}

	APB1prescalarIndex = (RCC->CFGR >> 10) & 0x7;
 800093e:	4b0f      	ldr	r3, [pc, #60]	; (800097c <GetPCLKValue+0xb8>)
 8000940:	689b      	ldr	r3, [r3, #8]
 8000942:	0a9b      	lsrs	r3, r3, #10
 8000944:	b2db      	uxtb	r3, r3
 8000946:	f003 0307 	and.w	r3, r3, #7
 800094a:	707b      	strb	r3, [r7, #1]
	if(APB1prescalarIndex == 0)
 800094c:	787b      	ldrb	r3, [r7, #1]
 800094e:	2b00      	cmp	r3, #0
 8000950:	d102      	bne.n	8000958 <GetPCLKValue+0x94>
	{
		APB1PrescValue = 1;
 8000952:	2301      	movs	r3, #1
 8000954:	727b      	strb	r3, [r7, #9]
 8000956:	e004      	b.n	8000962 <GetPCLKValue+0x9e>
	}
	else
	{
		APB1PrescValue = APB1_Prescalar[APB1prescalarIndex - 4];
 8000958:	787b      	ldrb	r3, [r7, #1]
 800095a:	3b04      	subs	r3, #4
 800095c:	4a0b      	ldr	r2, [pc, #44]	; (800098c <GetPCLKValue+0xc8>)
 800095e:	5cd3      	ldrb	r3, [r2, r3]
 8000960:	727b      	strb	r3, [r7, #9]
	}

	PCLK = ((SystemClock / AHBPrescValue) / APB1PrescValue) ;
 8000962:	897b      	ldrh	r3, [r7, #10]
 8000964:	68fa      	ldr	r2, [r7, #12]
 8000966:	fbb2 f2f3 	udiv	r2, r2, r3
 800096a:	7a7b      	ldrb	r3, [r7, #9]
 800096c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000970:	607b      	str	r3, [r7, #4]

	return PCLK;
 8000972:	687b      	ldr	r3, [r7, #4]

}
 8000974:	4618      	mov	r0, r3
 8000976:	3710      	adds	r7, #16
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}
 800097c:	40023800 	.word	0x40023800
 8000980:	00f42400 	.word	0x00f42400
 8000984:	007a1200 	.word	0x007a1200
 8000988:	20000000 	.word	0x20000000
 800098c:	20000014 	.word	0x20000014

08000990 <I2C_Init>:

/*
 * I2Cx init and De-init function
 */
void I2C_Init(I2C_Handle_t *pI2CHandle)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b084      	sub	sp, #16
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
	uint32_t tempreg = 0;
 8000998:	2300      	movs	r3, #0
 800099a:	60fb      	str	r3, [r7, #12]
	uint32_t APBCLK = 0;
 800099c:	2300      	movs	r3, #0
 800099e:	60bb      	str	r3, [r7, #8]

	I2C_PeriClock_Control(pI2CHandle->pI2Cx, ENABLE);
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	2101      	movs	r1, #1
 80009a6:	4618      	mov	r0, r3
 80009a8:	f7ff ff2c 	bl	8000804 <I2C_PeriClock_Control>

	//Enable the automatic ACKing in I2C hardware
	tempreg |= (pI2CHandle->pI2C_Config.I2C_ACKCtrl << I2C_CR1_ACK);
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	7a5b      	ldrb	r3, [r3, #9]
 80009b0:	029b      	lsls	r3, r3, #10
 80009b2:	461a      	mov	r2, r3
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	4313      	orrs	r3, r2
 80009b8:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->CR1 |= tempreg;
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	6819      	ldr	r1, [r3, #0]
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	68fa      	ldr	r2, [r7, #12]
 80009c6:	430a      	orrs	r2, r1
 80009c8:	601a      	str	r2, [r3, #0]
	tempreg = 0;
 80009ca:	2300      	movs	r3, #0
 80009cc:	60fb      	str	r3, [r7, #12]

	//Configure the OWN address , this will be used when I2C act as slave
	tempreg |= (pI2CHandle->pI2C_Config.I2C_DeviceAddr << 1);
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	7a1b      	ldrb	r3, [r3, #8]
 80009d2:	005b      	lsls	r3, r3, #1
 80009d4:	461a      	mov	r2, r3
 80009d6:	68fb      	ldr	r3, [r7, #12]
 80009d8:	4313      	orrs	r3, r2
 80009da:	60fb      	str	r3, [r7, #12]
	tempreg |= (1 << 14);//this is reserved bit and set as per RM
 80009dc:	68fb      	ldr	r3, [r7, #12]
 80009de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009e2:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->OAR1 |= tempreg;
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	6899      	ldr	r1, [r3, #8]
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	68fa      	ldr	r2, [r7, #12]
 80009f0:	430a      	orrs	r2, r1
 80009f2:	609a      	str	r2, [r3, #8]
	tempreg = 0;
 80009f4:	2300      	movs	r3, #0
 80009f6:	60fb      	str	r3, [r7, #12]

	APBCLK = GetPCLKValue() / 1000000U; //16000000/1000000 =>16
 80009f8:	f7ff ff64 	bl	80008c4 <GetPCLKValue>
 80009fc:	4603      	mov	r3, r0
 80009fe:	4a44      	ldr	r2, [pc, #272]	; (8000b10 <I2C_Init+0x180>)
 8000a00:	fba2 2303 	umull	r2, r3, r2, r3
 8000a04:	0c9b      	lsrs	r3, r3, #18
 8000a06:	60bb      	str	r3, [r7, #8]

	if(APBCLK <= 1)
 8000a08:	68bb      	ldr	r3, [r7, #8]
 8000a0a:	2b01      	cmp	r3, #1
 8000a0c:	d801      	bhi.n	8000a12 <I2C_Init+0x82>
	{
		APBCLK = 2;
 8000a0e:	2302      	movs	r3, #2
 8000a10:	60bb      	str	r3, [r7, #8]
	}
	//Configure the I2C frequency
	pI2CHandle->pI2Cx->CR2 = (APBCLK & 0x3F);
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	68ba      	ldr	r2, [r7, #8]
 8000a18:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000a1c:	605a      	str	r2, [r3, #4]


	if(pI2CHandle->pI2C_Config.I2C_SCLSpeed <= I2C_SPEED_STD_MODE)
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	685b      	ldr	r3, [r3, #4]
 8000a22:	4a3c      	ldr	r2, [pc, #240]	; (8000b14 <I2C_Init+0x184>)
 8000a24:	4293      	cmp	r3, r2
 8000a26:	d80b      	bhi.n	8000a40 <I2C_Init+0xb0>

		//Sm mode or SMBus:
		//Thigh = CCR * TPCLK1
		//Tlow = CCR * TPCLK1

		tempreg |= (GetPCLKValue() / (2 * pI2CHandle->pI2C_Config.I2C_SCLSpeed));
 8000a28:	f7ff ff4c 	bl	80008c4 <GetPCLKValue>
 8000a2c:	4602      	mov	r2, r0
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	685b      	ldr	r3, [r3, #4]
 8000a32:	005b      	lsls	r3, r3, #1
 8000a34:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a38:	68fa      	ldr	r2, [r7, #12]
 8000a3a:	4313      	orrs	r3, r2
 8000a3c:	60fb      	str	r3, [r7, #12]
 8000a3e:	e02b      	b.n	8000a98 <I2C_Init+0x108>
	}
	else
	{
		//Fast mode
		tempreg |= (1 << I2C_CCR_FS);
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a46:	60fb      	str	r3, [r7, #12]
		//Configure duty cycle
		tempreg |= (pI2CHandle->pI2C_Config.I2C_FMDutyCycle << I2C_CCR_DUTY);
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	895b      	ldrh	r3, [r3, #10]
 8000a4c:	039b      	lsls	r3, r3, #14
 8000a4e:	461a      	mov	r2, r3
 8000a50:	68fb      	ldr	r3, [r7, #12]
 8000a52:	4313      	orrs	r3, r2
 8000a54:	60fb      	str	r3, [r7, #12]
		//Duty = 0
		if(pI2CHandle->pI2C_Config.I2C_FMDutyCycle == I2C_FM_DUTY_2)
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	895b      	ldrh	r3, [r3, #10]
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d10d      	bne.n	8000a7a <I2C_Init+0xea>
			//If DUTY = 0:
			//Thigh = CCR * TPCLK1
			//Tlow = 2 * CCR * TPCLK1
			//Tlow = 2 * Thigh

			tempreg |= (GetPCLKValue() / (3 * pI2CHandle->pI2C_Config.I2C_SCLSpeed));
 8000a5e:	f7ff ff31 	bl	80008c4 <GetPCLKValue>
 8000a62:	4601      	mov	r1, r0
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	685a      	ldr	r2, [r3, #4]
 8000a68:	4613      	mov	r3, r2
 8000a6a:	005b      	lsls	r3, r3, #1
 8000a6c:	4413      	add	r3, r2
 8000a6e:	fbb1 f3f3 	udiv	r3, r1, r3
 8000a72:	68fa      	ldr	r2, [r7, #12]
 8000a74:	4313      	orrs	r3, r2
 8000a76:	60fb      	str	r3, [r7, #12]
 8000a78:	e00e      	b.n	8000a98 <I2C_Init+0x108>
		{
			//Duty = 1
			//If DUTY = 1: (to reach 400 kHz)
			//Thigh = 9 * CCR * TPCLK1
			//Tlow = 16 * CCR * TPCLK1
			tempreg |= (GetPCLKValue() / (25 * pI2CHandle->pI2C_Config.I2C_SCLSpeed));
 8000a7a:	f7ff ff23 	bl	80008c4 <GetPCLKValue>
 8000a7e:	4601      	mov	r1, r0
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	685a      	ldr	r2, [r3, #4]
 8000a84:	4613      	mov	r3, r2
 8000a86:	009b      	lsls	r3, r3, #2
 8000a88:	4413      	add	r3, r2
 8000a8a:	009a      	lsls	r2, r3, #2
 8000a8c:	4413      	add	r3, r2
 8000a8e:	fbb1 f3f3 	udiv	r3, r1, r3
 8000a92:	68fa      	ldr	r2, [r7, #12]
 8000a94:	4313      	orrs	r3, r2
 8000a96:	60fb      	str	r3, [r7, #12]
		}
	}
	pI2CHandle->pI2Cx->CCR |= (tempreg & 0xFFF);
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	69d9      	ldr	r1, [r3, #28]
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	f3c3 020b 	ubfx	r2, r3, #0, #12
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	430a      	orrs	r2, r1
 8000aaa:	61da      	str	r2, [r3, #28]
	tempreg = 0;
 8000aac:	2300      	movs	r3, #0
 8000aae:	60fb      	str	r3, [r7, #12]

	//Configure the Trise value
	if(pI2CHandle->pI2C_Config.I2C_SCLSpeed <= I2C_SPEED_STD_MODE)
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	685b      	ldr	r3, [r3, #4]
 8000ab4:	4a17      	ldr	r2, [pc, #92]	; (8000b14 <I2C_Init+0x184>)
 8000ab6:	4293      	cmp	r3, r2
 8000ab8:	d80b      	bhi.n	8000ad2 <I2C_Init+0x142>
	{
		// Standard mode as per I2C spec trise for SM is 1000ns
		tempreg |= ((GetPCLKValue() * 1) / 1000000U)  + 1;
 8000aba:	f7ff ff03 	bl	80008c4 <GetPCLKValue>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	4a13      	ldr	r2, [pc, #76]	; (8000b10 <I2C_Init+0x180>)
 8000ac2:	fba2 2303 	umull	r2, r3, r2, r3
 8000ac6:	0c9b      	lsrs	r3, r3, #18
 8000ac8:	3301      	adds	r3, #1
 8000aca:	68fa      	ldr	r2, [r7, #12]
 8000acc:	4313      	orrs	r3, r2
 8000ace:	60fb      	str	r3, [r7, #12]
 8000ad0:	e00f      	b.n	8000af2 <I2C_Init+0x162>
	}
	else
	{
		//fast mode as per I2C spec trise is 300ns
		tempreg |= ((GetPCLKValue() * 300) / 1000000000U)  + 1;
 8000ad2:	f7ff fef7 	bl	80008c4 <GetPCLKValue>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000adc:	fb02 f303 	mul.w	r3, r2, r3
 8000ae0:	0a5b      	lsrs	r3, r3, #9
 8000ae2:	4a0d      	ldr	r2, [pc, #52]	; (8000b18 <I2C_Init+0x188>)
 8000ae4:	fba2 2303 	umull	r2, r3, r2, r3
 8000ae8:	09db      	lsrs	r3, r3, #7
 8000aea:	3301      	adds	r3, #1
 8000aec:	68fa      	ldr	r2, [r7, #12]
 8000aee:	4313      	orrs	r3, r2
 8000af0:	60fb      	str	r3, [r7, #12]
	}

	pI2CHandle->pI2Cx->TRISE |= (tempreg & 0x3F);
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	6a19      	ldr	r1, [r3, #32]
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	430a      	orrs	r2, r1
 8000b04:	621a      	str	r2, [r3, #32]
}
 8000b06:	bf00      	nop
 8000b08:	3710      	adds	r7, #16
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	431bde83 	.word	0x431bde83
 8000b14:	000186a0 	.word	0x000186a0
 8000b18:	00044b83 	.word	0x00044b83

08000b1c <I2C_Event_IRQHandling>:
}



void I2C_Event_IRQHandling(I2C_Handle_t *pI2CHandle)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b086      	sub	sp, #24
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
	uint32_t temp1, temp2 , temp3 = 0;
 8000b24:	2300      	movs	r3, #0
 8000b26:	617b      	str	r3, [r7, #20]

	//Read the I2C interrupt I2C_CR2_ITEVTEN for Start , stop , ADDR event
	temp1 = (pI2CHandle->pI2Cx->CR2 & (1 << I2C_CR2_ITEVTEN)) ;
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	685b      	ldr	r3, [r3, #4]
 8000b2e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000b32:	613b      	str	r3, [r7, #16]

	//Read the I2C interrupt I2C_CR2_ITBUFEN for TXE and RXNE
	temp2 = (pI2CHandle->pI2Cx->CR2   & (1 <<  I2C_CR2_ITBUFEN));
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	685b      	ldr	r3, [r3, #4]
 8000b3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000b3e:	60fb      	str	r3, [r7, #12]

	//Read the I2C status register for SB
	temp3 = (pI2CHandle->pI2Cx->SR1  & (1 <<  I2C_SR1_SB));
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	695b      	ldr	r3, [r3, #20]
 8000b46:	f003 0301 	and.w	r3, r3, #1
 8000b4a:	617b      	str	r3, [r7, #20]
	if(temp3 && temp1)
 8000b4c:	697b      	ldr	r3, [r7, #20]
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d01b      	beq.n	8000b8a <I2C_Event_IRQHandling+0x6e>
 8000b52:	693b      	ldr	r3, [r7, #16]
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d018      	beq.n	8000b8a <I2C_Event_IRQHandling+0x6e>
	{
		//Execute the Address phase and To clear the address phase need to read the  SR1 followed by SR2
		if(pI2CHandle->TxRxState == I2C_STATE_BUSY_IN_TX)
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	7f1b      	ldrb	r3, [r3, #28]
 8000b5c:	2b01      	cmp	r3, #1
 8000b5e:	d108      	bne.n	8000b72 <I2C_Event_IRQHandling+0x56>
		{
			I2C_ExecuteAddressPhaseWrite(pI2CHandle->pI2Cx, pI2CHandle->Device_Addr);
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	681a      	ldr	r2, [r3, #0]
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	7f5b      	ldrb	r3, [r3, #29]
 8000b68:	4619      	mov	r1, r3
 8000b6a:	4610      	mov	r0, r2
 8000b6c:	f000 fa9f 	bl	80010ae <I2C_ExecuteAddressPhaseWrite>
 8000b70:	e00b      	b.n	8000b8a <I2C_Event_IRQHandling+0x6e>
		}
		else if(pI2CHandle->TxRxState == I2C_STATE_BUSY_IN_RX)
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	7f1b      	ldrb	r3, [r3, #28]
 8000b76:	2b02      	cmp	r3, #2
 8000b78:	d107      	bne.n	8000b8a <I2C_Event_IRQHandling+0x6e>
		{
			I2C_ExecuteAddressPhaseRead(pI2CHandle->pI2Cx, pI2CHandle->Device_Addr);
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	681a      	ldr	r2, [r3, #0]
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	7f5b      	ldrb	r3, [r3, #29]
 8000b82:	4619      	mov	r1, r3
 8000b84:	4610      	mov	r0, r2
 8000b86:	f000 faae 	bl	80010e6 <I2C_ExecuteAddressPhaseRead>
		}
	}

	//Read the I2C status register for ADDR
	temp3 = (pI2CHandle->pI2Cx->SR1 & (1 <<  I2C_SR1_ADDR));
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	695b      	ldr	r3, [r3, #20]
 8000b90:	f003 0302 	and.w	r3, r3, #2
 8000b94:	617b      	str	r3, [r7, #20]
	if(temp3 && temp1)
 8000b96:	697b      	ldr	r3, [r7, #20]
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d005      	beq.n	8000ba8 <I2C_Event_IRQHandling+0x8c>
 8000b9c:	693b      	ldr	r3, [r7, #16]
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d002      	beq.n	8000ba8 <I2C_Event_IRQHandling+0x8c>
	{
		//Clear the Address phase
		I2C_ClearAddressPhase(pI2CHandle);
 8000ba2:	6878      	ldr	r0, [r7, #4]
 8000ba4:	f000 fabb 	bl	800111e <I2C_ClearAddressPhase>
	}


	//Read the I2C status register for BTF
	temp3 = (pI2CHandle->pI2Cx->SR1  & (1 <<  I2C_SR1_BTF));
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	695b      	ldr	r3, [r3, #20]
 8000bae:	f003 0304 	and.w	r3, r3, #4
 8000bb2:	617b      	str	r3, [r7, #20]
	if(temp3 && temp1)
 8000bb4:	697b      	ldr	r3, [r7, #20]
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d022      	beq.n	8000c00 <I2C_Event_IRQHandling+0xe4>
 8000bba:	693b      	ldr	r3, [r7, #16]
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d01f      	beq.n	8000c00 <I2C_Event_IRQHandling+0xe4>
	{
		//Check whether I2C is in master mode
		if( pI2CHandle->pI2Cx->SR2 & (1 << I2C_SR2_MSL))
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	699b      	ldr	r3, [r3, #24]
 8000bc6:	f003 0301 	and.w	r3, r3, #1
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d018      	beq.n	8000c00 <I2C_Event_IRQHandling+0xe4>
		{
			//BTF flag in TX ,Data register and Shift register is empty then BTF=1;
			if(pI2CHandle->TxRxState == I2C_STATE_BUSY_IN_TX)
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	7f1b      	ldrb	r3, [r3, #28]
 8000bd2:	2b01      	cmp	r3, #1
 8000bd4:	d114      	bne.n	8000c00 <I2C_Event_IRQHandling+0xe4>
			{
				if(pI2CHandle->TxLen == 0)
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	695b      	ldr	r3, [r3, #20]
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d110      	bne.n	8000c00 <I2C_Event_IRQHandling+0xe4>
				{

					if(pI2CHandle->Repeated_Start == REPEATED_START_DISABLE)
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d104      	bne.n	8000bf2 <I2C_Event_IRQHandling+0xd6>
						I2C_StopCondition(pI2CHandle->pI2Cx);
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	4618      	mov	r0, r3
 8000bee:	f000 fa4f 	bl	8001090 <I2C_StopCondition>

					//Close the I2C transmission
					I2C_CloseTranmission(pI2CHandle);
 8000bf2:	6878      	ldr	r0, [r7, #4]
 8000bf4:	f000 f986 	bl	8000f04 <I2C_CloseTranmission>

					I2C_ApplicationEventCallback(pI2CHandle, I2C_APP_EVT_TX_CMPLT);
 8000bf8:	2100      	movs	r1, #0
 8000bfa:	6878      	ldr	r0, [r7, #4]
 8000bfc:	f000 f9ec 	bl	8000fd8 <I2C_ApplicationEventCallback>
		}

	}

	//Read the I2C status register for STOPF
	temp3 = (pI2CHandle->pI2Cx->SR1  & (1 <<  I2C_SR1_STOPF));
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	695b      	ldr	r3, [r3, #20]
 8000c06:	f003 0310 	and.w	r3, r3, #16
 8000c0a:	617b      	str	r3, [r7, #20]
	if(temp3 && temp1)
 8000c0c:	697b      	ldr	r3, [r7, #20]
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d00c      	beq.n	8000c2c <I2C_Event_IRQHandling+0x110>
 8000c12:	693b      	ldr	r3, [r7, #16]
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d009      	beq.n	8000c2c <I2C_Event_IRQHandling+0x110>
		//Set by hardware when a Stop condition is detected on the bus by the slave after an
		//acknowledge (if ACK=1)

		//To clear the STOPF bit
		//read the SR1 followed by writing the CR1
		pI2CHandle->pI2Cx->CR1 |= 0x0000;
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681a      	ldr	r2, [r3, #0]
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	6812      	ldr	r2, [r2, #0]
 8000c22:	601a      	str	r2, [r3, #0]

		I2C_ApplicationEventCallback(pI2CHandle, I2C_APP_EVT_STOP);
 8000c24:	2102      	movs	r1, #2
 8000c26:	6878      	ldr	r0, [r7, #4]
 8000c28:	f000 f9d6 	bl	8000fd8 <I2C_ApplicationEventCallback>
	}

	//Read the I2C status register for TXE
	temp3 = (pI2CHandle->pI2Cx->SR1 & (1 <<  I2C_SR1_TXE));
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	695b      	ldr	r3, [r3, #20]
 8000c32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c36:	617b      	str	r3, [r7, #20]
	if(temp3 && temp1 && temp2)
 8000c38:	697b      	ldr	r3, [r7, #20]
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d01b      	beq.n	8000c76 <I2C_Event_IRQHandling+0x15a>
 8000c3e:	693b      	ldr	r3, [r7, #16]
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d018      	beq.n	8000c76 <I2C_Event_IRQHandling+0x15a>
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d015      	beq.n	8000c76 <I2C_Event_IRQHandling+0x15a>
	{
		//Handle the txe bit
		//Handle the BTF completed for end of Transmission and reception
		//Check whether I2C is in master mode
		if( pI2CHandle->pI2Cx->SR2 & (1 << I2C_SR2_MSL))
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	699b      	ldr	r3, [r3, #24]
 8000c50:	f003 0301 	and.w	r3, r3, #1
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d003      	beq.n	8000c60 <I2C_Event_IRQHandling+0x144>
		{
			I2C_InterruptHandling_TXECallback(pI2CHandle);
 8000c58:	6878      	ldr	r0, [r7, #4]
 8000c5a:	f000 f8d8 	bl	8000e0e <I2C_InterruptHandling_TXECallback>
 8000c5e:	e00a      	b.n	8000c76 <I2C_Event_IRQHandling+0x15a>
		}
		else //I2C is in slave mode
		{
			//Slave Transmitter
			if(pI2CHandle->pI2Cx->SR2  & ( 1 << I2C_SR2_TRA))
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	699b      	ldr	r3, [r3, #24]
 8000c66:	f003 0304 	and.w	r3, r3, #4
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d003      	beq.n	8000c76 <I2C_Event_IRQHandling+0x15a>
			{
				I2C_ApplicationEventCallback(pI2CHandle, I2C_SLAVE_REQ_DATA);
 8000c6e:	2108      	movs	r1, #8
 8000c70:	6878      	ldr	r0, [r7, #4]
 8000c72:	f000 f9b1 	bl	8000fd8 <I2C_ApplicationEventCallback>
			}
		}
	}

	//Read the I2C status register for RXNE
	temp3 = (pI2CHandle->pI2Cx->SR1  & (1 <<  I2C_SR1_RXNE));
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	695b      	ldr	r3, [r3, #20]
 8000c7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c80:	617b      	str	r3, [r7, #20]
	if(temp3 && temp1 && temp2)
 8000c82:	697b      	ldr	r3, [r7, #20]
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d01f      	beq.n	8000cc8 <I2C_Event_IRQHandling+0x1ac>
 8000c88:	693b      	ldr	r3, [r7, #16]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d01c      	beq.n	8000cc8 <I2C_Event_IRQHandling+0x1ac>
 8000c8e:	68fb      	ldr	r3, [r7, #12]
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d019      	beq.n	8000cc8 <I2C_Event_IRQHandling+0x1ac>
	{
		//Handle the RXNE bit
		//Check whether I2C is in master mode
		if( pI2CHandle->pI2Cx->SR2 & (1 << I2C_SR2_MSL))
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	699b      	ldr	r3, [r3, #24]
 8000c9a:	f003 0301 	and.w	r3, r3, #1
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d007      	beq.n	8000cb2 <I2C_Event_IRQHandling+0x196>
		{
			if(pI2CHandle->TxRxState ==I2C_STATE_BUSY_IN_RX)
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	7f1b      	ldrb	r3, [r3, #28]
 8000ca6:	2b02      	cmp	r3, #2
 8000ca8:	d10e      	bne.n	8000cc8 <I2C_Event_IRQHandling+0x1ac>
			{
//				printf("%d\t%d\n", pI2CHandle->pI2Cx->SR2,pI2CHandle->RxLen);
				I2C_InterruptHandling_RXNECallback(pI2CHandle);
 8000caa:	6878      	ldr	r0, [r7, #4]
 8000cac:	f000 f8d0 	bl	8000e50 <I2C_InterruptHandling_RXNECallback>
				I2C_ApplicationEventCallback(pI2CHandle, I2C_SLAVE_REC_DATA);
			}
		}
	}

}
 8000cb0:	e00a      	b.n	8000cc8 <I2C_Event_IRQHandling+0x1ac>
			if(! (pI2CHandle->pI2Cx->SR2  & ( 1 << I2C_SR2_TRA)))
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	699b      	ldr	r3, [r3, #24]
 8000cb8:	f003 0304 	and.w	r3, r3, #4
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d103      	bne.n	8000cc8 <I2C_Event_IRQHandling+0x1ac>
				I2C_ApplicationEventCallback(pI2CHandle, I2C_SLAVE_REC_DATA);
 8000cc0:	2109      	movs	r1, #9
 8000cc2:	6878      	ldr	r0, [r7, #4]
 8000cc4:	f000 f988 	bl	8000fd8 <I2C_ApplicationEventCallback>
}
 8000cc8:	bf00      	nop
 8000cca:	3718      	adds	r7, #24
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}

08000cd0 <I2C_Error_IRQHandling>:


void I2C_Error_IRQHandling(I2C_Handle_t *pI2CHandle)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b084      	sub	sp, #16
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
	uint32_t temp1,temp2;

    //Know the status of  ITERREN control bit in the CR2
	temp2 = (pI2CHandle->pI2Cx->CR2) & ( 1 << I2C_CR2_ITERREN);
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	685b      	ldr	r3, [r3, #4]
 8000cde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ce2:	60fb      	str	r3, [r7, #12]


/***********************Check for Bus error************************************/
	temp1 = (pI2CHandle->pI2Cx->SR1) & ( 1<< I2C_SR1_BERR);
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	695b      	ldr	r3, [r3, #20]
 8000cea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000cee:	60bb      	str	r3, [r7, #8]
	if(temp1  && temp2 )
 8000cf0:	68bb      	ldr	r3, [r7, #8]
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d00e      	beq.n	8000d14 <I2C_Error_IRQHandling+0x44>
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d00b      	beq.n	8000d14 <I2C_Error_IRQHandling+0x44>
	{
		//This is Bus error

		//clear the buss error flag
		pI2CHandle->pI2Cx->SR1 &= ~( 1 << I2C_SR1_BERR);
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	695a      	ldr	r2, [r3, #20]
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000d0a:	615a      	str	r2, [r3, #20]

		//Implement the code to notify the application about the error
	   I2C_ApplicationEventCallback(pI2CHandle,I2C_ERROR_BERR);
 8000d0c:	2103      	movs	r1, #3
 8000d0e:	6878      	ldr	r0, [r7, #4]
 8000d10:	f000 f962 	bl	8000fd8 <I2C_ApplicationEventCallback>
	}

/***********************Check for arbitration lost error************************************/
	temp1 = (pI2CHandle->pI2Cx->SR1) & ( 1 << I2C_SR1_ARLO );
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	695b      	ldr	r3, [r3, #20]
 8000d1a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000d1e:	60bb      	str	r3, [r7, #8]
	if(temp1  && temp2)
 8000d20:	68bb      	ldr	r3, [r7, #8]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d00e      	beq.n	8000d44 <I2C_Error_IRQHandling+0x74>
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d00b      	beq.n	8000d44 <I2C_Error_IRQHandling+0x74>
		//This is arbitration lost error

		//Implement the code to clear the arbitration lost error flag
		//After an ARLO event the interface switches back automatically to Slave mode (MSL=0).
		//clear the buss error flag
		pI2CHandle->pI2Cx->SR1 &= ~( 1 << I2C_SR1_ARLO);
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	695a      	ldr	r2, [r3, #20]
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000d3a:	615a      	str	r2, [r3, #20]

		//Implement the code to notify the application about the error
		I2C_ApplicationEventCallback(pI2CHandle,I2C_ERROR_ARLO);
 8000d3c:	2104      	movs	r1, #4
 8000d3e:	6878      	ldr	r0, [r7, #4]
 8000d40:	f000 f94a 	bl	8000fd8 <I2C_ApplicationEventCallback>

	}

/***********************Check for ACK failure  error************************************/

	temp1 = (pI2CHandle->pI2Cx->SR1) & ( 1 << I2C_SR1_AF);
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	695b      	ldr	r3, [r3, #20]
 8000d4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d4e:	60bb      	str	r3, [r7, #8]
	if(temp1  && temp2)
 8000d50:	68bb      	ldr	r3, [r7, #8]
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d01e      	beq.n	8000d94 <I2C_Error_IRQHandling+0xc4>
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d01b      	beq.n	8000d94 <I2C_Error_IRQHandling+0xc4>
	{
		//This is ACK failure error

	    //Implement the code to clear the ACK failure error flag
		pI2CHandle->pI2Cx->SR1 &= ~( 1 << I2C_SR1_AF);
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	695a      	ldr	r2, [r3, #20]
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000d6a:	615a      	str	r2, [r3, #20]

		//Implement the code to notify the application about the error
		I2C_ApplicationEventCallback(pI2CHandle,I2C_ERROR_AF);
 8000d6c:	2105      	movs	r1, #5
 8000d6e:	6878      	ldr	r0, [r7, #4]
 8000d70:	f000 f932 	bl	8000fd8 <I2C_ApplicationEventCallback>

		//if master then generate stop condition, this means release the bus
		if(pI2CHandle->pI2Cx->SR2 & ( 1 << I2C_SR2_MSL))
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	699b      	ldr	r3, [r3, #24]
 8000d7a:	f003 0301 	and.w	r3, r3, #1
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d008      	beq.n	8000d94 <I2C_Error_IRQHandling+0xc4>
		{
			//inside app event close the TX and generate STOP condition
			if(pI2CHandle->pI2C_Config.I2C_ACKCtrl == REPEATED_START_DISABLE)
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	7a5b      	ldrb	r3, [r3, #9]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d104      	bne.n	8000d94 <I2C_Error_IRQHandling+0xc4>
			{
				I2C_StopCondition(pI2CHandle->pI2Cx);
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f000 f97e 	bl	8001090 <I2C_StopCondition>

		}
	}

/***********************Check for Overrun/underrun error************************************/
	temp1 = (pI2CHandle->pI2Cx->SR1) & ( 1 << I2C_SR1_OVR);
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	695b      	ldr	r3, [r3, #20]
 8000d9a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000d9e:	60bb      	str	r3, [r7, #8]
	if(temp1  && temp2)
 8000da0:	68bb      	ldr	r3, [r7, #8]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d017      	beq.n	8000dd6 <I2C_Error_IRQHandling+0x106>
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d014      	beq.n	8000dd6 <I2C_Error_IRQHandling+0x106>
	{
		//This is Overrun/underrun

	    //Implement the code to clear the Overrun/underrun error flag
		pI2CHandle->pI2Cx->SR1 &= ~( 1 << I2C_SR1_OVR);
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	695a      	ldr	r2, [r3, #20]
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000dba:	615a      	str	r2, [r3, #20]

		//Implement the code to notify the application about the error
		I2C_ApplicationEventCallback(pI2CHandle,I2C_ERROR_OVR);
 8000dbc:	2106      	movs	r1, #6
 8000dbe:	6878      	ldr	r0, [r7, #4]
 8000dc0:	f000 f90a 	bl	8000fd8 <I2C_ApplicationEventCallback>

		//Re-trasmission or reception based on state
		//inside app event close the TX and generate STOP condition
		if(pI2CHandle->pI2C_Config.I2C_ACKCtrl == REPEATED_START_DISABLE)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	7a5b      	ldrb	r3, [r3, #9]
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d104      	bne.n	8000dd6 <I2C_Error_IRQHandling+0x106>
		{
			I2C_StopCondition(pI2CHandle->pI2Cx);
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f000 f95d 	bl	8001090 <I2C_StopCondition>
		}
	}

/***********************Check for Time out error************************************/
	temp1 = (pI2CHandle->pI2Cx->SR1) & ( 1 << I2C_SR1_TIMEOUT);
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	695b      	ldr	r3, [r3, #20]
 8000ddc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000de0:	60bb      	str	r3, [r7, #8]
	if(temp1  && temp2)
 8000de2:	68bb      	ldr	r3, [r7, #8]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d00e      	beq.n	8000e06 <I2C_Error_IRQHandling+0x136>
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d00b      	beq.n	8000e06 <I2C_Error_IRQHandling+0x136>
		//Master cumulative clock low extend time more than 10 ms (Tlow:mext)or
		//Slave cumulative clock low extend time more than 25 ms (Tlow:sext)

		//When set in slave mode: slave resets the communication and lines are released by hardware
		//When set in master mode: Stop condition sent by hardware
		pI2CHandle->pI2Cx->SR1 &= ~( 1 << I2C_SR1_TIMEOUT);
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	695a      	ldr	r2, [r3, #20]
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000dfc:	615a      	str	r2, [r3, #20]

		//Implement the code to notify the application about the error
		I2C_ApplicationEventCallback(pI2CHandle,I2C_ERROR_TIMEOUT);
 8000dfe:	2107      	movs	r1, #7
 8000e00:	6878      	ldr	r0, [r7, #4]
 8000e02:	f000 f8e9 	bl	8000fd8 <I2C_ApplicationEventCallback>
	}
}
 8000e06:	bf00      	nop
 8000e08:	3710      	adds	r7, #16
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}

08000e0e <I2C_InterruptHandling_TXECallback>:

void I2C_InterruptHandling_TXECallback(I2C_Handle_t *pI2CHandle)
{
 8000e0e:	b480      	push	{r7}
 8000e10:	b083      	sub	sp, #12
 8000e12:	af00      	add	r7, sp, #0
 8000e14:	6078      	str	r0, [r7, #4]
	if(pI2CHandle->TxRxState == I2C_STATE_BUSY_IN_TX)
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	7f1b      	ldrb	r3, [r3, #28]
 8000e1a:	2b01      	cmp	r3, #1
 8000e1c:	d113      	bne.n	8000e46 <I2C_InterruptHandling_TXECallback+0x38>
	{
		if(pI2CHandle->TxLen > 0)
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	695b      	ldr	r3, [r3, #20]
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d00f      	beq.n	8000e46 <I2C_InterruptHandling_TXECallback+0x38>
		{
			//send the data
			pI2CHandle->pI2Cx->DR = *(pI2CHandle->pTxBuffer);
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	68db      	ldr	r3, [r3, #12]
 8000e2a:	781a      	ldrb	r2, [r3, #0]
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	611a      	str	r2, [r3, #16]

			//decrement the length by one byte
			pI2CHandle->TxLen--;
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	695b      	ldr	r3, [r3, #20]
 8000e36:	1e5a      	subs	r2, r3, #1
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	615a      	str	r2, [r3, #20]

			//increment the buffer address
			pI2CHandle->pTxBuffer++;
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	68db      	ldr	r3, [r3, #12]
 8000e40:	1c5a      	adds	r2, r3, #1
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	60da      	str	r2, [r3, #12]
		}
	}
}
 8000e46:	bf00      	nop
 8000e48:	370c      	adds	r7, #12
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bc80      	pop	{r7}
 8000e4e:	4770      	bx	lr

08000e50 <I2C_InterruptHandling_RXNECallback>:


//as per my logic but last byte ACking in read with try here
#if 1 // Working fine
void I2C_InterruptHandling_RXNECallback(I2C_Handle_t *pI2CHandle)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
	if(pI2CHandle->RxSize == 1 )
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	6a1b      	ldr	r3, [r3, #32]
 8000e5c:	2b01      	cmp	r3, #1
 8000e5e:	d115      	bne.n	8000e8c <I2C_InterruptHandling_RXNECallback+0x3c>
	{
		//printf("sin :%d\t%d\n", pI2CHandle->pI2Cx->SR2,pI2CHandle->RxLen);
		//read the Data byte from DR
		*(pI2CHandle->pRxBuffer) = pI2CHandle->pI2Cx->DR;
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	691a      	ldr	r2, [r3, #16]
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	691b      	ldr	r3, [r3, #16]
 8000e6a:	b2d2      	uxtb	r2, r2
 8000e6c:	701a      	strb	r2, [r3, #0]

		if(pI2CHandle->Repeated_Start == REPEATED_START_DISABLE)
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d104      	bne.n	8000e82 <I2C_InterruptHandling_RXNECallback+0x32>
		{
			I2C_StopCondition(pI2CHandle->pI2Cx);
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f000 f907 	bl	8001090 <I2C_StopCondition>
		}

		//Decrement the Length
		pI2CHandle->RxLen--;
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	699b      	ldr	r3, [r3, #24]
 8000e86:	1e5a      	subs	r2, r3, #1
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	619a      	str	r2, [r3, #24]

	}

	//Size greater than 1 byte
	if(pI2CHandle->RxSize > 1)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	6a1b      	ldr	r3, [r3, #32]
 8000e90:	2b01      	cmp	r3, #1
 8000e92:	d928      	bls.n	8000ee6 <I2C_InterruptHandling_RXNECallback+0x96>
	{
		//printf("more: %d\t%d\n", pI2CHandle->pI2Cx->SR2,pI2CHandle->RxLen);

		if(pI2CHandle->RxLen == 1)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	699b      	ldr	r3, [r3, #24]
 8000e98:	2b01      	cmp	r3, #1
 8000e9a:	d109      	bne.n	8000eb0 <I2C_InterruptHandling_RXNECallback+0x60>
		{
			if(pI2CHandle->Repeated_Start == REPEATED_START_DISABLE)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d104      	bne.n	8000eb0 <I2C_InterruptHandling_RXNECallback+0x60>
			{
				I2C_StopCondition(pI2CHandle->pI2Cx);
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f000 f8f0 	bl	8001090 <I2C_StopCondition>
			}
		}
		//Last before 2nd byte
		if(pI2CHandle->RxLen == 2)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	699b      	ldr	r3, [r3, #24]
 8000eb4:	2b02      	cmp	r3, #2
 8000eb6:	d105      	bne.n	8000ec4 <I2C_InterruptHandling_RXNECallback+0x74>
		{
			//send the Nack bit
			I2C_ManageACK(pI2CHandle->pI2Cx, DISABLE);
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	2100      	movs	r1, #0
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f000 f966 	bl	8001190 <I2C_ManageACK>
		}

		//read the Data byte from DR
		*(pI2CHandle->pRxBuffer) = pI2CHandle->pI2Cx->DR;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	691a      	ldr	r2, [r3, #16]
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	691b      	ldr	r3, [r3, #16]
 8000ece:	b2d2      	uxtb	r2, r2
 8000ed0:	701a      	strb	r2, [r3, #0]

		//Decrement the Length
		pI2CHandle->RxLen--;
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	699b      	ldr	r3, [r3, #24]
 8000ed6:	1e5a      	subs	r2, r3, #1
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	619a      	str	r2, [r3, #24]
		pI2CHandle->pRxBuffer++;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	691b      	ldr	r3, [r3, #16]
 8000ee0:	1c5a      	adds	r2, r3, #1
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	611a      	str	r2, [r3, #16]
	}//if end's here

	if(pI2CHandle->RxLen == 0)
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	699b      	ldr	r3, [r3, #24]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d106      	bne.n	8000efc <I2C_InterruptHandling_RXNECallback+0xac>
	{
		//Close the I2C reception
		I2C_CloseReception(pI2CHandle);
 8000eee:	6878      	ldr	r0, [r7, #4]
 8000ef0:	f000 f82a 	bl	8000f48 <I2C_CloseReception>

		I2C_ApplicationEventCallback(pI2CHandle, I2C_APP_EVT_RX_CMPLT);
 8000ef4:	2101      	movs	r1, #1
 8000ef6:	6878      	ldr	r0, [r7, #4]
 8000ef8:	f000 f86e 	bl	8000fd8 <I2C_ApplicationEventCallback>
	}

}
 8000efc:	bf00      	nop
 8000efe:	3708      	adds	r7, #8
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}

08000f04 <I2C_CloseTranmission>:

#endif

void I2C_CloseTranmission(I2C_Handle_t *pI2CHandle)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b083      	sub	sp, #12
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
	//Clear the TXE and RXNE interrupt
	pI2CHandle->pI2Cx->CR2 &= ~( 1 <<  I2C_CR2_ITBUFEN);
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	685a      	ldr	r2, [r3, #4]
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000f1a:	605a      	str	r2, [r3, #4]
	pI2CHandle->pI2Cx->CR2 &= ~( 1 <<  I2C_CR2_ITEVTEN);
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	685a      	ldr	r2, [r3, #4]
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000f2a:	605a      	str	r2, [r3, #4]

	pI2CHandle->pTxBuffer = NULL;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	2200      	movs	r2, #0
 8000f30:	60da      	str	r2, [r3, #12]
	pI2CHandle->TxLen = 0;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	2200      	movs	r2, #0
 8000f36:	615a      	str	r2, [r3, #20]
	pI2CHandle->TxRxState = I2C_STATE_IDLE;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	771a      	strb	r2, [r3, #28]
}
 8000f3e:	bf00      	nop
 8000f40:	370c      	adds	r7, #12
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bc80      	pop	{r7}
 8000f46:	4770      	bx	lr

08000f48 <I2C_CloseReception>:

void I2C_CloseReception(I2C_Handle_t *pI2CHandle)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
	pI2CHandle->pI2Cx->CR2 &= ~( 1 <<  I2C_CR2_ITBUFEN);
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	685a      	ldr	r2, [r3, #4]
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000f5e:	605a      	str	r2, [r3, #4]
	pI2CHandle->pI2Cx->CR2 &= ~( 1 <<  I2C_CR2_ITEVTEN);
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	685a      	ldr	r2, [r3, #4]
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000f6e:	605a      	str	r2, [r3, #4]

	pI2CHandle->pRxBuffer = NULL;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	2200      	movs	r2, #0
 8000f74:	611a      	str	r2, [r3, #16]
	pI2CHandle->RxLen = 0;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	2200      	movs	r2, #0
 8000f7a:	619a      	str	r2, [r3, #24]
	pI2CHandle->TxRxState = I2C_STATE_IDLE;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	2200      	movs	r2, #0
 8000f80:	771a      	strb	r2, [r3, #28]
	pI2CHandle->RxSize = 0;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	2200      	movs	r2, #0
 8000f86:	621a      	str	r2, [r3, #32]

	if(pI2CHandle->pI2C_Config.I2C_ACKCtrl == I2C_ACK_ENABLE)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	7a5b      	ldrb	r3, [r3, #9]
 8000f8c:	2b01      	cmp	r3, #1
 8000f8e:	d105      	bne.n	8000f9c <I2C_CloseReception+0x54>
	{
		//Re-enable the acking
		I2C_ManageACK(pI2CHandle->pI2Cx, ENABLE);
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	2101      	movs	r1, #1
 8000f96:	4618      	mov	r0, r3
 8000f98:	f000 f8fa 	bl	8001190 <I2C_ManageACK>
	}
//	if(pI2CHandle->Repeated_Start == REPEATED_START_DISABLE)
//	{
//		pI2CHandle->RxSize = 0;
//	}
}
 8000f9c:	bf00      	nop
 8000f9e:	3708      	adds	r7, #8
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}

08000fa4 <I2C_SlaveSenddata>:
/*
 * I2C slave send and receive API
 */

void I2C_SlaveSenddata(I2C_RegDef_t *pI2C,uint8_t data)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b083      	sub	sp, #12
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
 8000fac:	460b      	mov	r3, r1
 8000fae:	70fb      	strb	r3, [r7, #3]
	pI2C->DR = data;
 8000fb0:	78fa      	ldrb	r2, [r7, #3]
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	611a      	str	r2, [r3, #16]
}
 8000fb6:	bf00      	nop
 8000fb8:	370c      	adds	r7, #12
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bc80      	pop	{r7}
 8000fbe:	4770      	bx	lr

08000fc0 <I2C_SlaveReceivedata>:


uint8_t I2C_SlaveReceivedata(I2C_RegDef_t *pI2C)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b083      	sub	sp, #12
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
	return (uint8_t)pI2C->DR;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	691b      	ldr	r3, [r3, #16]
 8000fcc:	b2db      	uxtb	r3, r3
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	370c      	adds	r7, #12
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bc80      	pop	{r7}
 8000fd6:	4770      	bx	lr

08000fd8 <I2C_ApplicationEventCallback>:


void I2C_ApplicationEventCallback(I2C_Handle_t *pI2CHandle, uint8_t AppEvent)
{
 8000fd8:	b5b0      	push	{r4, r5, r7, lr}
 8000fda:	b088      	sub	sp, #32
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
 8000fe0:	460b      	mov	r3, r1
 8000fe2:	70fb      	strb	r3, [r7, #3]
	uint8_t str_data[] = "This message from Anand";
 8000fe4:	4b27      	ldr	r3, [pc, #156]	; (8001084 <I2C_ApplicationEventCallback+0xac>)
 8000fe6:	f107 0408 	add.w	r4, r7, #8
 8000fea:	461d      	mov	r5, r3
 8000fec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ff0:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000ff4:	e884 0003 	stmia.w	r4, {r0, r1}
	static uint8_t command_code = 0;
	static uint8_t cnt = 0;

	if(AppEvent == I2C_SLAVE_REQ_DATA)
 8000ff8:	78fb      	ldrb	r3, [r7, #3]
 8000ffa:	2b08      	cmp	r3, #8
 8000ffc:	d127      	bne.n	800104e <I2C_ApplicationEventCallback+0x76>
	{
		if(command_code == 0x51)
 8000ffe:	4b22      	ldr	r3, [pc, #136]	; (8001088 <I2C_ApplicationEventCallback+0xb0>)
 8001000:	781b      	ldrb	r3, [r3, #0]
 8001002:	2b51      	cmp	r3, #81	; 0x51
 8001004:	d10d      	bne.n	8001022 <I2C_ApplicationEventCallback+0x4a>
		{
			I2C_SlaveSenddata(pI2CHandle->pI2Cx, strlen((char *)str_data));
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681c      	ldr	r4, [r3, #0]
 800100a:	f107 0308 	add.w	r3, r7, #8
 800100e:	4618      	mov	r0, r3
 8001010:	f7ff f8ea 	bl	80001e8 <strlen>
 8001014:	4603      	mov	r3, r0
 8001016:	b2db      	uxtb	r3, r3
 8001018:	4619      	mov	r1, r3
 800101a:	4620      	mov	r0, r4
 800101c:	f7ff ffc2 	bl	8000fa4 <I2C_SlaveSenddata>
	}
	else if(AppEvent == I2C_APP_EVT_STOP)
	{

	}
}
 8001020:	e02b      	b.n	800107a <I2C_ApplicationEventCallback+0xa2>
		else if(command_code == 0x52)
 8001022:	4b19      	ldr	r3, [pc, #100]	; (8001088 <I2C_ApplicationEventCallback+0xb0>)
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	2b52      	cmp	r3, #82	; 0x52
 8001028:	d127      	bne.n	800107a <I2C_ApplicationEventCallback+0xa2>
			I2C_SlaveSenddata(pI2CHandle->pI2Cx, str_data[cnt++]);
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681a      	ldr	r2, [r3, #0]
 800102e:	4b17      	ldr	r3, [pc, #92]	; (800108c <I2C_ApplicationEventCallback+0xb4>)
 8001030:	781b      	ldrb	r3, [r3, #0]
 8001032:	1c59      	adds	r1, r3, #1
 8001034:	b2c8      	uxtb	r0, r1
 8001036:	4915      	ldr	r1, [pc, #84]	; (800108c <I2C_ApplicationEventCallback+0xb4>)
 8001038:	7008      	strb	r0, [r1, #0]
 800103a:	f107 0120 	add.w	r1, r7, #32
 800103e:	440b      	add	r3, r1
 8001040:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001044:	4619      	mov	r1, r3
 8001046:	4610      	mov	r0, r2
 8001048:	f7ff ffac 	bl	8000fa4 <I2C_SlaveSenddata>
}
 800104c:	e015      	b.n	800107a <I2C_ApplicationEventCallback+0xa2>
	else if (AppEvent == I2C_SLAVE_REC_DATA)
 800104e:	78fb      	ldrb	r3, [r7, #3]
 8001050:	2b09      	cmp	r3, #9
 8001052:	d109      	bne.n	8001068 <I2C_ApplicationEventCallback+0x90>
		command_code = I2C_SlaveReceivedata(pI2CHandle->pI2Cx);
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4618      	mov	r0, r3
 800105a:	f7ff ffb1 	bl	8000fc0 <I2C_SlaveReceivedata>
 800105e:	4603      	mov	r3, r0
 8001060:	461a      	mov	r2, r3
 8001062:	4b09      	ldr	r3, [pc, #36]	; (8001088 <I2C_ApplicationEventCallback+0xb0>)
 8001064:	701a      	strb	r2, [r3, #0]
}
 8001066:	e008      	b.n	800107a <I2C_ApplicationEventCallback+0xa2>
	else if(AppEvent == I2C_ERROR_AF)
 8001068:	78fb      	ldrb	r3, [r7, #3]
 800106a:	2b05      	cmp	r3, #5
 800106c:	d105      	bne.n	800107a <I2C_ApplicationEventCallback+0xa2>
		command_code = 0xff;
 800106e:	4b06      	ldr	r3, [pc, #24]	; (8001088 <I2C_ApplicationEventCallback+0xb0>)
 8001070:	22ff      	movs	r2, #255	; 0xff
 8001072:	701a      	strb	r2, [r3, #0]
		cnt = 0;
 8001074:	4b05      	ldr	r3, [pc, #20]	; (800108c <I2C_ApplicationEventCallback+0xb4>)
 8001076:	2200      	movs	r2, #0
 8001078:	701a      	strb	r2, [r3, #0]
}
 800107a:	bf00      	nop
 800107c:	3720      	adds	r7, #32
 800107e:	46bd      	mov	sp, r7
 8001080:	bdb0      	pop	{r4, r5, r7, pc}
 8001082:	bf00      	nop
 8001084:	080013cc 	.word	0x080013cc
 8001088:	20000034 	.word	0x20000034
 800108c:	20000035 	.word	0x20000035

08001090 <I2C_StopCondition>:
	pI2Cx->CR1 |= ( 1 << I2C_CR1_START);
}


void I2C_StopCondition(I2C_RegDef_t *pI2Cx)
{
 8001090:	b480      	push	{r7}
 8001092:	b083      	sub	sp, #12
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= ( 1 << I2C_CR1_STOP);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	601a      	str	r2, [r3, #0]
}
 80010a4:	bf00      	nop
 80010a6:	370c      	adds	r7, #12
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bc80      	pop	{r7}
 80010ac:	4770      	bx	lr

080010ae <I2C_ExecuteAddressPhaseWrite>:
	return 0;
}


void I2C_ExecuteAddressPhaseWrite(I2C_RegDef_t *pI2Cx,uint8_t SlaveAddress)
{
 80010ae:	b480      	push	{r7}
 80010b0:	b085      	sub	sp, #20
 80010b2:	af00      	add	r7, sp, #0
 80010b4:	6078      	str	r0, [r7, #4]
 80010b6:	460b      	mov	r3, r1
 80010b8:	70fb      	strb	r3, [r7, #3]
	uint8_t tempreg = 0;
 80010ba:	2300      	movs	r3, #0
 80010bc:	73fb      	strb	r3, [r7, #15]
	tempreg |= ( SlaveAddress << 1);
 80010be:	78fb      	ldrb	r3, [r7, #3]
 80010c0:	005b      	lsls	r3, r3, #1
 80010c2:	b25a      	sxtb	r2, r3
 80010c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010c8:	4313      	orrs	r3, r2
 80010ca:	b25b      	sxtb	r3, r3
 80010cc:	73fb      	strb	r3, [r7, #15]
	tempreg &= ~(1);	// Write operation bit is set in I2C slave address
 80010ce:	7bfb      	ldrb	r3, [r7, #15]
 80010d0:	f023 0301 	bic.w	r3, r3, #1
 80010d4:	73fb      	strb	r3, [r7, #15]
	pI2Cx->DR = tempreg;
 80010d6:	7bfa      	ldrb	r2, [r7, #15]
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	611a      	str	r2, [r3, #16]
}
 80010dc:	bf00      	nop
 80010de:	3714      	adds	r7, #20
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bc80      	pop	{r7}
 80010e4:	4770      	bx	lr

080010e6 <I2C_ExecuteAddressPhaseRead>:

void I2C_ExecuteAddressPhaseRead(I2C_RegDef_t *pI2Cx,uint8_t SlaveAddress)
{
 80010e6:	b480      	push	{r7}
 80010e8:	b085      	sub	sp, #20
 80010ea:	af00      	add	r7, sp, #0
 80010ec:	6078      	str	r0, [r7, #4]
 80010ee:	460b      	mov	r3, r1
 80010f0:	70fb      	strb	r3, [r7, #3]
	uint8_t tempreg = 0;
 80010f2:	2300      	movs	r3, #0
 80010f4:	73fb      	strb	r3, [r7, #15]
	tempreg |= ( SlaveAddress << 1);
 80010f6:	78fb      	ldrb	r3, [r7, #3]
 80010f8:	005b      	lsls	r3, r3, #1
 80010fa:	b25a      	sxtb	r2, r3
 80010fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001100:	4313      	orrs	r3, r2
 8001102:	b25b      	sxtb	r3, r3
 8001104:	73fb      	strb	r3, [r7, #15]
	tempreg |= (1 << 0);// Read bit is set in slave address
 8001106:	7bfb      	ldrb	r3, [r7, #15]
 8001108:	f043 0301 	orr.w	r3, r3, #1
 800110c:	73fb      	strb	r3, [r7, #15]
	pI2Cx->DR = tempreg;
 800110e:	7bfa      	ldrb	r2, [r7, #15]
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	611a      	str	r2, [r3, #16]
}
 8001114:	bf00      	nop
 8001116:	3714      	adds	r7, #20
 8001118:	46bd      	mov	sp, r7
 800111a:	bc80      	pop	{r7}
 800111c:	4770      	bx	lr

0800111e <I2C_ClearAddressPhase>:


void I2C_ClearAddressPhase(I2C_Handle_t *pI2CHandle)
{
 800111e:	b580      	push	{r7, lr}
 8001120:	b084      	sub	sp, #16
 8001122:	af00      	add	r7, sp, #0
 8001124:	6078      	str	r0, [r7, #4]
	uint8_t tempreg = 0;
 8001126:	2300      	movs	r3, #0
 8001128:	73fb      	strb	r3, [r7, #15]
	//I2C is in Master Mode
	if(pI2CHandle->pI2Cx->SR2 & (1 << I2C_SR2_MSL))
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	699b      	ldr	r3, [r3, #24]
 8001130:	f003 0301 	and.w	r3, r3, #1
 8001134:	2b00      	cmp	r3, #0
 8001136:	d01f      	beq.n	8001178 <I2C_ClearAddressPhase+0x5a>
	{
		if(pI2CHandle->TxRxState ==I2C_STATE_BUSY_IN_RX)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	7f1b      	ldrb	r3, [r3, #28]
 800113c:	2b02      	cmp	r3, #2
 800113e:	d112      	bne.n	8001166 <I2C_ClearAddressPhase+0x48>
		{
			if(pI2CHandle->RxSize == 1 )
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	6a1b      	ldr	r3, [r3, #32]
 8001144:	2b01      	cmp	r3, #1
 8001146:	d11f      	bne.n	8001188 <I2C_ClearAddressPhase+0x6a>
			{
				//Disable the Acking so master wont send ACk bit to slave
				I2C_ManageACK(pI2CHandle->pI2Cx, DISABLE);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	2100      	movs	r1, #0
 800114e:	4618      	mov	r0, r3
 8001150:	f000 f81e 	bl	8001190 <I2C_ManageACK>

				tempreg = pI2CHandle->pI2Cx->SR1;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	695b      	ldr	r3, [r3, #20]
 800115a:	73fb      	strb	r3, [r7, #15]
				tempreg = pI2CHandle->pI2Cx->SR2;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	699b      	ldr	r3, [r3, #24]
 8001162:	73fb      	strb	r3, [r7, #15]
	{
		tempreg = pI2CHandle->pI2Cx->SR1;
		tempreg = pI2CHandle->pI2Cx->SR2;
		(void)tempreg;
	}
}
 8001164:	e010      	b.n	8001188 <I2C_ClearAddressPhase+0x6a>
			tempreg = pI2CHandle->pI2Cx->SR1;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	695b      	ldr	r3, [r3, #20]
 800116c:	73fb      	strb	r3, [r7, #15]
			tempreg = pI2CHandle->pI2Cx->SR2;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	699b      	ldr	r3, [r3, #24]
 8001174:	73fb      	strb	r3, [r7, #15]
}
 8001176:	e007      	b.n	8001188 <I2C_ClearAddressPhase+0x6a>
		tempreg = pI2CHandle->pI2Cx->SR1;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	695b      	ldr	r3, [r3, #20]
 800117e:	73fb      	strb	r3, [r7, #15]
		tempreg = pI2CHandle->pI2Cx->SR2;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	699b      	ldr	r3, [r3, #24]
 8001186:	73fb      	strb	r3, [r7, #15]
}
 8001188:	bf00      	nop
 800118a:	3710      	adds	r7, #16
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}

08001190 <I2C_ManageACK>:

void I2C_ManageACK(I2C_RegDef_t *pI2Cx,uint8_t EnorDi)
{
 8001190:	b480      	push	{r7}
 8001192:	b083      	sub	sp, #12
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
 8001198:	460b      	mov	r3, r1
 800119a:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 800119c:	78fb      	ldrb	r3, [r7, #3]
 800119e:	2b01      	cmp	r3, #1
 80011a0:	d106      	bne.n	80011b0 <I2C_ManageACK+0x20>
	{
		pI2Cx->CR1 |= (1 << I2C_CR1_ACK);
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	601a      	str	r2, [r3, #0]
	}
	else
	{
		pI2Cx->CR1 &= ~(1 << I2C_CR1_ACK);
	}
}
 80011ae:	e005      	b.n	80011bc <I2C_ManageACK+0x2c>
		pI2Cx->CR1 &= ~(1 << I2C_CR1_ACK);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	601a      	str	r2, [r3, #0]
}
 80011bc:	bf00      	nop
 80011be:	370c      	adds	r7, #12
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bc80      	pop	{r7}
 80011c4:	4770      	bx	lr

080011c6 <I2C_PeripheralControl>:
	}
}


void I2C_PeripheralControl(I2C_RegDef_t *pI2Cx,uint8_t EnorDi)
{
 80011c6:	b480      	push	{r7}
 80011c8:	b083      	sub	sp, #12
 80011ca:	af00      	add	r7, sp, #0
 80011cc:	6078      	str	r0, [r7, #4]
 80011ce:	460b      	mov	r3, r1
 80011d0:	70fb      	strb	r3, [r7, #3]
	if(EnorDi ==  ENABLE)
 80011d2:	78fb      	ldrb	r3, [r7, #3]
 80011d4:	2b01      	cmp	r3, #1
 80011d6:	d106      	bne.n	80011e6 <I2C_PeripheralControl+0x20>
	{
		pI2Cx->CR1 |= (1 << I2C_CR1_PE);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f043 0201 	orr.w	r2, r3, #1
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		pI2Cx->CR1 &= ~(1 << I2C_CR1_PE);
	}
}
 80011e4:	e005      	b.n	80011f2 <I2C_PeripheralControl+0x2c>
		pI2Cx->CR1 &= ~(1 << I2C_CR1_PE);
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f023 0201 	bic.w	r2, r3, #1
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	601a      	str	r2, [r3, #0]
}
 80011f2:	bf00      	nop
 80011f4:	370c      	adds	r7, #12
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bc80      	pop	{r7}
 80011fa:	4770      	bx	lr

080011fc <I2C_IRQConfig>:

/*
 * SPI IRQ Configuration
 */
void I2C_IRQConfig(uint8_t IRQNumber,uint8_t EnorDi)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b083      	sub	sp, #12
 8001200:	af00      	add	r7, sp, #0
 8001202:	4603      	mov	r3, r0
 8001204:	460a      	mov	r2, r1
 8001206:	71fb      	strb	r3, [r7, #7]
 8001208:	4613      	mov	r3, r2
 800120a:	71bb      	strb	r3, [r7, #6]
	if(EnorDi == ENABLE)
 800120c:	79bb      	ldrb	r3, [r7, #6]
 800120e:	2b01      	cmp	r3, #1
 8001210:	d133      	bne.n	800127a <I2C_IRQConfig+0x7e>
	{
		if(IRQNumber <= 31)
 8001212:	79fb      	ldrb	r3, [r7, #7]
 8001214:	2b1f      	cmp	r3, #31
 8001216:	d80a      	bhi.n	800122e <I2C_IRQConfig+0x32>
		{
			*NVIC_ISER0 |= (1 << IRQNumber);
 8001218:	4b34      	ldr	r3, [pc, #208]	; (80012ec <I2C_IRQConfig+0xf0>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	79fa      	ldrb	r2, [r7, #7]
 800121e:	2101      	movs	r1, #1
 8001220:	fa01 f202 	lsl.w	r2, r1, r2
 8001224:	4611      	mov	r1, r2
 8001226:	4a31      	ldr	r2, [pc, #196]	; (80012ec <I2C_IRQConfig+0xf0>)
 8001228:	430b      	orrs	r3, r1
 800122a:	6013      	str	r3, [r2, #0]
		else if((IRQNumber >= 64) && (IRQNumber < 96))
		{
			*NVIC_ICER2 |= (1 << (IRQNumber % 64));
		}
	}
}
 800122c:	e059      	b.n	80012e2 <I2C_IRQConfig+0xe6>
		else if((IRQNumber > 31) && (IRQNumber < 64))
 800122e:	79fb      	ldrb	r3, [r7, #7]
 8001230:	2b1f      	cmp	r3, #31
 8001232:	d90f      	bls.n	8001254 <I2C_IRQConfig+0x58>
 8001234:	79fb      	ldrb	r3, [r7, #7]
 8001236:	2b3f      	cmp	r3, #63	; 0x3f
 8001238:	d80c      	bhi.n	8001254 <I2C_IRQConfig+0x58>
			*NVIC_ISER1 |= (1 << (IRQNumber % 32));
 800123a:	4b2d      	ldr	r3, [pc, #180]	; (80012f0 <I2C_IRQConfig+0xf4>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	79fa      	ldrb	r2, [r7, #7]
 8001240:	f002 021f 	and.w	r2, r2, #31
 8001244:	2101      	movs	r1, #1
 8001246:	fa01 f202 	lsl.w	r2, r1, r2
 800124a:	4611      	mov	r1, r2
 800124c:	4a28      	ldr	r2, [pc, #160]	; (80012f0 <I2C_IRQConfig+0xf4>)
 800124e:	430b      	orrs	r3, r1
 8001250:	6013      	str	r3, [r2, #0]
 8001252:	e046      	b.n	80012e2 <I2C_IRQConfig+0xe6>
		else if((IRQNumber >= 64) && (IRQNumber < 96))
 8001254:	79fb      	ldrb	r3, [r7, #7]
 8001256:	2b3f      	cmp	r3, #63	; 0x3f
 8001258:	d943      	bls.n	80012e2 <I2C_IRQConfig+0xe6>
 800125a:	79fb      	ldrb	r3, [r7, #7]
 800125c:	2b5f      	cmp	r3, #95	; 0x5f
 800125e:	d840      	bhi.n	80012e2 <I2C_IRQConfig+0xe6>
			*NVIC_ISER2 |= (1 << (IRQNumber % 64));
 8001260:	4b24      	ldr	r3, [pc, #144]	; (80012f4 <I2C_IRQConfig+0xf8>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	79fa      	ldrb	r2, [r7, #7]
 8001266:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800126a:	2101      	movs	r1, #1
 800126c:	fa01 f202 	lsl.w	r2, r1, r2
 8001270:	4611      	mov	r1, r2
 8001272:	4a20      	ldr	r2, [pc, #128]	; (80012f4 <I2C_IRQConfig+0xf8>)
 8001274:	430b      	orrs	r3, r1
 8001276:	6013      	str	r3, [r2, #0]
}
 8001278:	e033      	b.n	80012e2 <I2C_IRQConfig+0xe6>
		if(IRQNumber <= 31)
 800127a:	79fb      	ldrb	r3, [r7, #7]
 800127c:	2b1f      	cmp	r3, #31
 800127e:	d80a      	bhi.n	8001296 <I2C_IRQConfig+0x9a>
			*NVIC_ICER0 |= (1 << IRQNumber);
 8001280:	4b1d      	ldr	r3, [pc, #116]	; (80012f8 <I2C_IRQConfig+0xfc>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	79fa      	ldrb	r2, [r7, #7]
 8001286:	2101      	movs	r1, #1
 8001288:	fa01 f202 	lsl.w	r2, r1, r2
 800128c:	4611      	mov	r1, r2
 800128e:	4a1a      	ldr	r2, [pc, #104]	; (80012f8 <I2C_IRQConfig+0xfc>)
 8001290:	430b      	orrs	r3, r1
 8001292:	6013      	str	r3, [r2, #0]
}
 8001294:	e025      	b.n	80012e2 <I2C_IRQConfig+0xe6>
		else if((IRQNumber > 31) && (IRQNumber < 64))
 8001296:	79fb      	ldrb	r3, [r7, #7]
 8001298:	2b1f      	cmp	r3, #31
 800129a:	d90f      	bls.n	80012bc <I2C_IRQConfig+0xc0>
 800129c:	79fb      	ldrb	r3, [r7, #7]
 800129e:	2b3f      	cmp	r3, #63	; 0x3f
 80012a0:	d80c      	bhi.n	80012bc <I2C_IRQConfig+0xc0>
			*NVIC_ICER1 |= (1 << (IRQNumber % 32));
 80012a2:	4b16      	ldr	r3, [pc, #88]	; (80012fc <I2C_IRQConfig+0x100>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	79fa      	ldrb	r2, [r7, #7]
 80012a8:	f002 021f 	and.w	r2, r2, #31
 80012ac:	2101      	movs	r1, #1
 80012ae:	fa01 f202 	lsl.w	r2, r1, r2
 80012b2:	4611      	mov	r1, r2
 80012b4:	4a11      	ldr	r2, [pc, #68]	; (80012fc <I2C_IRQConfig+0x100>)
 80012b6:	430b      	orrs	r3, r1
 80012b8:	6013      	str	r3, [r2, #0]
 80012ba:	e012      	b.n	80012e2 <I2C_IRQConfig+0xe6>
		else if((IRQNumber >= 64) && (IRQNumber < 96))
 80012bc:	79fb      	ldrb	r3, [r7, #7]
 80012be:	2b3f      	cmp	r3, #63	; 0x3f
 80012c0:	d90f      	bls.n	80012e2 <I2C_IRQConfig+0xe6>
 80012c2:	79fb      	ldrb	r3, [r7, #7]
 80012c4:	2b5f      	cmp	r3, #95	; 0x5f
 80012c6:	d80c      	bhi.n	80012e2 <I2C_IRQConfig+0xe6>
			*NVIC_ICER2 |= (1 << (IRQNumber % 64));
 80012c8:	4b0d      	ldr	r3, [pc, #52]	; (8001300 <I2C_IRQConfig+0x104>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	79fa      	ldrb	r2, [r7, #7]
 80012ce:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80012d2:	2101      	movs	r1, #1
 80012d4:	fa01 f202 	lsl.w	r2, r1, r2
 80012d8:	4611      	mov	r1, r2
 80012da:	4a09      	ldr	r2, [pc, #36]	; (8001300 <I2C_IRQConfig+0x104>)
 80012dc:	430b      	orrs	r3, r1
 80012de:	6013      	str	r3, [r2, #0]
}
 80012e0:	e7ff      	b.n	80012e2 <I2C_IRQConfig+0xe6>
 80012e2:	bf00      	nop
 80012e4:	370c      	adds	r7, #12
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bc80      	pop	{r7}
 80012ea:	4770      	bx	lr
 80012ec:	e000e100 	.word	0xe000e100
 80012f0:	e000e104 	.word	0xe000e104
 80012f4:	e000e108 	.word	0xe000e108
 80012f8:	e000e180 	.word	0xe000e180
 80012fc:	e000e184 	.word	0xe000e184
 8001300:	e000e188 	.word	0xe000e188

08001304 <I2C_SlavePeripheralInterrupt>:

}


void I2C_SlavePeripheralInterrupt(I2C_RegDef_t *pI2C,uint8_t EnorDi)
{
 8001304:	b480      	push	{r7}
 8001306:	b083      	sub	sp, #12
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
 800130c:	460b      	mov	r3, r1
 800130e:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8001310:	78fb      	ldrb	r3, [r7, #3]
 8001312:	2b01      	cmp	r3, #1
 8001314:	d112      	bne.n	800133c <I2C_SlavePeripheralInterrupt+0x38>
	{
		//Enable the interrupt
		pI2C->CR2 |= ( 1 << I2C_CR2_ITBUFEN);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	605a      	str	r2, [r3, #4]
		pI2C->CR2 |= ( 1 << I2C_CR2_ITEVTEN);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	605a      	str	r2, [r3, #4]
		pI2C->CR2 |= ( 1 << I2C_CR2_ITERREN);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	605a      	str	r2, [r3, #4]
		pI2C->CR2 &= ~( 1 << I2C_CR2_ITEVTEN);
		pI2C->CR2 &= ~( 1 << I2C_CR2_ITERREN);

	}

}
 800133a:	e011      	b.n	8001360 <I2C_SlavePeripheralInterrupt+0x5c>
		pI2C->CR2 &= ~( 1 << I2C_CR2_ITBUFEN);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	605a      	str	r2, [r3, #4]
		pI2C->CR2 &= ~( 1 << I2C_CR2_ITEVTEN);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	605a      	str	r2, [r3, #4]
		pI2C->CR2 &= ~( 1 << I2C_CR2_ITERREN);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	605a      	str	r2, [r3, #4]
}
 8001360:	bf00      	nop
 8001362:	370c      	adds	r7, #12
 8001364:	46bd      	mov	sp, r7
 8001366:	bc80      	pop	{r7}
 8001368:	4770      	bx	lr
	...

0800136c <__libc_init_array>:
 800136c:	b570      	push	{r4, r5, r6, lr}
 800136e:	4d0d      	ldr	r5, [pc, #52]	; (80013a4 <__libc_init_array+0x38>)
 8001370:	4c0d      	ldr	r4, [pc, #52]	; (80013a8 <__libc_init_array+0x3c>)
 8001372:	1b64      	subs	r4, r4, r5
 8001374:	10a4      	asrs	r4, r4, #2
 8001376:	2600      	movs	r6, #0
 8001378:	42a6      	cmp	r6, r4
 800137a:	d109      	bne.n	8001390 <__libc_init_array+0x24>
 800137c:	4d0b      	ldr	r5, [pc, #44]	; (80013ac <__libc_init_array+0x40>)
 800137e:	4c0c      	ldr	r4, [pc, #48]	; (80013b0 <__libc_init_array+0x44>)
 8001380:	f000 f818 	bl	80013b4 <_init>
 8001384:	1b64      	subs	r4, r4, r5
 8001386:	10a4      	asrs	r4, r4, #2
 8001388:	2600      	movs	r6, #0
 800138a:	42a6      	cmp	r6, r4
 800138c:	d105      	bne.n	800139a <__libc_init_array+0x2e>
 800138e:	bd70      	pop	{r4, r5, r6, pc}
 8001390:	f855 3b04 	ldr.w	r3, [r5], #4
 8001394:	4798      	blx	r3
 8001396:	3601      	adds	r6, #1
 8001398:	e7ee      	b.n	8001378 <__libc_init_array+0xc>
 800139a:	f855 3b04 	ldr.w	r3, [r5], #4
 800139e:	4798      	blx	r3
 80013a0:	3601      	adds	r6, #1
 80013a2:	e7f2      	b.n	800138a <__libc_init_array+0x1e>
 80013a4:	080013e4 	.word	0x080013e4
 80013a8:	080013e4 	.word	0x080013e4
 80013ac:	080013e4 	.word	0x080013e4
 80013b0:	080013e8 	.word	0x080013e8

080013b4 <_init>:
 80013b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013b6:	bf00      	nop
 80013b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80013ba:	bc08      	pop	{r3}
 80013bc:	469e      	mov	lr, r3
 80013be:	4770      	bx	lr

080013c0 <_fini>:
 80013c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013c2:	bf00      	nop
 80013c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80013c6:	bc08      	pop	{r3}
 80013c8:	469e      	mov	lr, r3
 80013ca:	4770      	bx	lr
