
stm32f4xx_driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000010c0  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08001268  08001268  00011268  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001288  08001288  00011290  2**0
                  CONTENTS
  4 .ARM          00000000  08001288  08001288  00011290  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001288  08001290  00011290  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001288  08001288  00011288  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800128c  0800128c  0001128c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00011290  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00011290  2**0
                  CONTENTS
 10 .bss          0000003c  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000003c  2000003c  00020000  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00011290  2**0
                  CONTENTS, READONLY
 13 .debug_info   00003084  00000000  00000000  000112ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000007ce  00000000  00000000  0001433e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001b0  00000000  00000000  00014b10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000178  00000000  00000000  00014cc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000233e  00000000  00000000  00014e38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001f53  00000000  00000000  00017176  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00009737  00000000  00000000  000190c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00022800  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000698  00000000  00000000  00022854  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08001250 	.word	0x08001250

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000004 	.word	0x20000004
 80001e4:	08001250 	.word	0x08001250

080001e8 <delay>:
void SPI2_Init(void);
void GPIO_ButtonInit(void);
uint8_t SPI_Verifyresponse(uint8_t ackbyte);

void delay(void)
{
 80001e8:	b480      	push	{r7}
 80001ea:	b083      	sub	sp, #12
 80001ec:	af00      	add	r7, sp, #0
	for (uint32_t i = 0;i < 500000 ;i++);
 80001ee:	2300      	movs	r3, #0
 80001f0:	607b      	str	r3, [r7, #4]
 80001f2:	e002      	b.n	80001fa <delay+0x12>
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	3301      	adds	r3, #1
 80001f8:	607b      	str	r3, [r7, #4]
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	4a04      	ldr	r2, [pc, #16]	; (8000210 <delay+0x28>)
 80001fe:	4293      	cmp	r3, r2
 8000200:	d9f8      	bls.n	80001f4 <delay+0xc>
}
 8000202:	bf00      	nop
 8000204:	bf00      	nop
 8000206:	370c      	adds	r7, #12
 8000208:	46bd      	mov	sp, r7
 800020a:	bc80      	pop	{r7}
 800020c:	4770      	bx	lr
 800020e:	bf00      	nop
 8000210:	0007a11f 	.word	0x0007a11f

08000214 <main>:


int main(void)
{
 8000214:	b5b0      	push	{r4, r5, r7, lr}
 8000216:	b09c      	sub	sp, #112	; 0x70
 8000218:	af00      	add	r7, sp, #0

	uint8_t dummy_write = 0xff;
 800021a:	23ff      	movs	r3, #255	; 0xff
 800021c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint8_t dummy_read = 0xff;
 8000220:	23ff      	movs	r3, #255	; 0xff
 8000222:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	uint8_t cmd_code = 0;
 8000226:	2300      	movs	r3, #0
 8000228:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
	uint8_t ackbyte = 0;
 800022c:	2300      	movs	r3, #0
 800022e:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
	uint8_t arg[2] = {0};
 8000232:	2300      	movs	r3, #0
 8000234:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60

	//Initialize and configure the GPIO pin as input for button
	GPIO_ButtonInit();
 8000238:	f000 f9f4 	bl	8000624 <GPIO_ButtonInit>

	//Configure the GPIO pins for SPI functionality
	SPI2_GpioInit();
 800023c:	f000 f994 	bl	8000568 <SPI2_GpioInit>

	//Initialize the SPI peripheral as Master mode
	SPI2_Init();
 8000240:	f000 f9c4 	bl	80005cc <SPI2_Init>

	//@note, to behave NSS as output in master mode SSM = 0 and SSOE = 1(configure NSS as output)
	SPI_SSOEConfig(SPI2, ENABLE);
 8000244:	2101      	movs	r1, #1
 8000246:	48c4      	ldr	r0, [pc, #784]	; (8000558 <main+0x344>)
 8000248:	f000 fe8b 	bl	8000f62 <SPI_SSOEConfig>

	while(1)
	{
		dummy_write = 0xff;
 800024c:	23ff      	movs	r3, #255	; 0xff
 800024e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		dummy_read = 0xff;
 8000252:	23ff      	movs	r3, #255	; 0xff
 8000254:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66

		//Wait until user press the button
		while(!GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_0));
 8000258:	bf00      	nop
 800025a:	2100      	movs	r1, #0
 800025c:	48bf      	ldr	r0, [pc, #764]	; (800055c <main+0x348>)
 800025e:	f000 fc81 	bl	8000b64 <GPIO_ReadFromInputPin>
 8000262:	4603      	mov	r3, r0
 8000264:	2b00      	cmp	r3, #0
 8000266:	d0f8      	beq.n	800025a <main+0x46>

		//Introduced delay to avoid the button de-bouncing
		delay();
 8000268:	f7ff ffbe 	bl	80001e8 <delay>

		//Enable the SPI peripheral, this makes the NSS pin to Low
		SPI_PeripheralControl(SPI2,ENABLE);
 800026c:	2101      	movs	r1, #1
 800026e:	48ba      	ldr	r0, [pc, #744]	; (8000558 <main+0x344>)
 8000270:	f000 fe5c 	bl	8000f2c <SPI_PeripheralControl>

		//1. send the command led and arg
		cmd_code = COMMAND_LED_CTRL;
 8000274:	2350      	movs	r3, #80	; 0x50
 8000276:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
			//Send the Arg
			SPI_SendData(SPI2, arg, 2);
			SPI_ReceiveData(SPI2, &dummy_read, 1);
		}
#else
		while(SPI_SendDataIT(&SPI2Config, &cmd_code, 1) == SPI_STATE_BUSY_IN_TX);
 800027a:	bf00      	nop
 800027c:	f107 0365 	add.w	r3, r7, #101	; 0x65
 8000280:	2201      	movs	r2, #1
 8000282:	4619      	mov	r1, r3
 8000284:	48b6      	ldr	r0, [pc, #728]	; (8000560 <main+0x34c>)
 8000286:	f000 fd4d 	bl	8000d24 <SPI_SendDataIT>
 800028a:	4603      	mov	r3, r0
 800028c:	2b01      	cmp	r3, #1
 800028e:	d0f5      	beq.n	800027c <main+0x68>
		while(SPI_ReceiveDataIT(&SPI2Config, &dummy_read, 1) == SPI_STATE_BUSY_IN_RX);
 8000290:	bf00      	nop
 8000292:	f107 0366 	add.w	r3, r7, #102	; 0x66
 8000296:	2201      	movs	r2, #1
 8000298:	4619      	mov	r1, r3
 800029a:	48b1      	ldr	r0, [pc, #708]	; (8000560 <main+0x34c>)
 800029c:	f000 fd65 	bl	8000d6a <SPI_ReceiveDataIT>
 80002a0:	4603      	mov	r3, r0
 80002a2:	2b02      	cmp	r3, #2
 80002a4:	d0f5      	beq.n	8000292 <main+0x7e>
		//Send command code
		//SPI_SendandReceiveData(SPI2, &cmd_code, &dummy_read, 1);

		//Read the Ackbyte
		//SPI_SendandReceiveData(SPI2, &dummy_write, &ackbyte, 1);
		while(SPI_SendDataIT(&SPI2Config, &dummy_write, 1) == SPI_STATE_BUSY_IN_TX);
 80002a6:	bf00      	nop
 80002a8:	f107 0367 	add.w	r3, r7, #103	; 0x67
 80002ac:	2201      	movs	r2, #1
 80002ae:	4619      	mov	r1, r3
 80002b0:	48ab      	ldr	r0, [pc, #684]	; (8000560 <main+0x34c>)
 80002b2:	f000 fd37 	bl	8000d24 <SPI_SendDataIT>
 80002b6:	4603      	mov	r3, r0
 80002b8:	2b01      	cmp	r3, #1
 80002ba:	d0f5      	beq.n	80002a8 <main+0x94>
		while(SPI_ReceiveDataIT(&SPI2Config, &ackbyte, 1) == SPI_STATE_BUSY_IN_RX);
 80002bc:	bf00      	nop
 80002be:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80002c2:	2201      	movs	r2, #1
 80002c4:	4619      	mov	r1, r3
 80002c6:	48a6      	ldr	r0, [pc, #664]	; (8000560 <main+0x34c>)
 80002c8:	f000 fd4f 	bl	8000d6a <SPI_ReceiveDataIT>
 80002cc:	4603      	mov	r3, r0
 80002ce:	2b02      	cmp	r3, #2
 80002d0:	d0f5      	beq.n	80002be <main+0xaa>

		//check the ackbyte , used to confirm slave can support the command
		if(SPI_Verifyresponse(ackbyte))
 80002d2:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 80002d6:	4618      	mov	r0, r3
 80002d8:	f000 f9ba 	bl	8000650 <SPI_Verifyresponse>
 80002dc:	4603      	mov	r3, r0
 80002de:	2b00      	cmp	r3, #0
 80002e0:	d014      	beq.n	800030c <main+0xf8>
		{
			arg[0] = LED_PIN;
 80002e2:	2309      	movs	r3, #9
 80002e4:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
			arg[1] ^= LED_ON;
 80002e8:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 80002ec:	f083 0301 	eor.w	r3, r3, #1
 80002f0:	b2db      	uxtb	r3, r3
 80002f2:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61

			//Send the Arg
			//SPI_SendandReceiveData(SPI2, arg, &dummy_read, 2);
			while(SPI_SendDataIT(&SPI2Config,arg, 2) == SPI_STATE_BUSY_IN_TX);
 80002f6:	bf00      	nop
 80002f8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80002fc:	2202      	movs	r2, #2
 80002fe:	4619      	mov	r1, r3
 8000300:	4897      	ldr	r0, [pc, #604]	; (8000560 <main+0x34c>)
 8000302:	f000 fd0f 	bl	8000d24 <SPI_SendDataIT>
 8000306:	4603      	mov	r3, r0
 8000308:	2b01      	cmp	r3, #1
 800030a:	d0f5      	beq.n	80002f8 <main+0xe4>
		}
#if 1
		//2. CMD_SENOSR_READ   <analog pin number(1) >
		//Wait until user press the button
		while(!GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_0));
 800030c:	bf00      	nop
 800030e:	2100      	movs	r1, #0
 8000310:	4892      	ldr	r0, [pc, #584]	; (800055c <main+0x348>)
 8000312:	f000 fc27 	bl	8000b64 <GPIO_ReadFromInputPin>
 8000316:	4603      	mov	r3, r0
 8000318:	2b00      	cmp	r3, #0
 800031a:	d0f8      	beq.n	800030e <main+0xfa>

		//Introduced delay to avoid the button de-bouncing
		delay();
 800031c:	f7ff ff64 	bl	80001e8 <delay>

		//1. send the command led and arg
		cmd_code = COMMAND_SENSOR_READ;
 8000320:	2351      	movs	r3, #81	; 0x51
 8000322:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65

		//Send command code
		//SPI_SendandReceiveData(SPI2, &cmd_code, &dummy_read, 1);
		while(SPI_SendDataIT(&SPI2Config, &cmd_code, 1) == SPI_STATE_BUSY_IN_TX);
 8000326:	bf00      	nop
 8000328:	f107 0365 	add.w	r3, r7, #101	; 0x65
 800032c:	2201      	movs	r2, #1
 800032e:	4619      	mov	r1, r3
 8000330:	488b      	ldr	r0, [pc, #556]	; (8000560 <main+0x34c>)
 8000332:	f000 fcf7 	bl	8000d24 <SPI_SendDataIT>
 8000336:	4603      	mov	r3, r0
 8000338:	2b01      	cmp	r3, #1
 800033a:	d0f5      	beq.n	8000328 <main+0x114>
		while(SPI_ReceiveDataIT(&SPI2Config, &dummy_read, 1) == SPI_STATE_BUSY_IN_RX);
 800033c:	bf00      	nop
 800033e:	f107 0366 	add.w	r3, r7, #102	; 0x66
 8000342:	2201      	movs	r2, #1
 8000344:	4619      	mov	r1, r3
 8000346:	4886      	ldr	r0, [pc, #536]	; (8000560 <main+0x34c>)
 8000348:	f000 fd0f 	bl	8000d6a <SPI_ReceiveDataIT>
 800034c:	4603      	mov	r3, r0
 800034e:	2b02      	cmp	r3, #2
 8000350:	d0f5      	beq.n	800033e <main+0x12a>

		//Read the Ackbyte
		//SPI_SendandReceiveData(SPI2, &dummy_write, &ackbyte, 1);
		while(SPI_SendDataIT(&SPI2Config, &dummy_write, 1) == SPI_STATE_BUSY_IN_TX);
 8000352:	bf00      	nop
 8000354:	f107 0367 	add.w	r3, r7, #103	; 0x67
 8000358:	2201      	movs	r2, #1
 800035a:	4619      	mov	r1, r3
 800035c:	4880      	ldr	r0, [pc, #512]	; (8000560 <main+0x34c>)
 800035e:	f000 fce1 	bl	8000d24 <SPI_SendDataIT>
 8000362:	4603      	mov	r3, r0
 8000364:	2b01      	cmp	r3, #1
 8000366:	d0f5      	beq.n	8000354 <main+0x140>
		while(SPI_ReceiveDataIT(&SPI2Config, &ackbyte, 1) == SPI_STATE_BUSY_IN_RX);
 8000368:	bf00      	nop
 800036a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800036e:	2201      	movs	r2, #1
 8000370:	4619      	mov	r1, r3
 8000372:	487b      	ldr	r0, [pc, #492]	; (8000560 <main+0x34c>)
 8000374:	f000 fcf9 	bl	8000d6a <SPI_ReceiveDataIT>
 8000378:	4603      	mov	r3, r0
 800037a:	2b02      	cmp	r3, #2
 800037c:	d0f5      	beq.n	800036a <main+0x156>

		//check the ackbyte , used to confirm slave can support the command
		if(SPI_Verifyresponse(ackbyte))
 800037e:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8000382:	4618      	mov	r0, r3
 8000384:	f000 f964 	bl	8000650 <SPI_Verifyresponse>
 8000388:	4603      	mov	r3, r0
 800038a:	2b00      	cmp	r3, #0
 800038c:	d03c      	beq.n	8000408 <main+0x1f4>
		{
			arg[0] = ANALOG_PIN0;
 800038e:	2300      	movs	r3, #0
 8000390:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60

			//Send the Arg
			//SPI_SendandReceiveData(SPI2, arg, &dummy_read, 1);
			while(SPI_SendDataIT(&SPI2Config, arg, 1) == SPI_STATE_BUSY_IN_TX);
 8000394:	bf00      	nop
 8000396:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800039a:	2201      	movs	r2, #1
 800039c:	4619      	mov	r1, r3
 800039e:	4870      	ldr	r0, [pc, #448]	; (8000560 <main+0x34c>)
 80003a0:	f000 fcc0 	bl	8000d24 <SPI_SendDataIT>
 80003a4:	4603      	mov	r3, r0
 80003a6:	2b01      	cmp	r3, #1
 80003a8:	d0f5      	beq.n	8000396 <main+0x182>
			while(SPI_ReceiveDataIT(&SPI2Config, &dummy_read, 1) == SPI_STATE_BUSY_IN_RX);
 80003aa:	bf00      	nop
 80003ac:	f107 0366 	add.w	r3, r7, #102	; 0x66
 80003b0:	2201      	movs	r2, #1
 80003b2:	4619      	mov	r1, r3
 80003b4:	486a      	ldr	r0, [pc, #424]	; (8000560 <main+0x34c>)
 80003b6:	f000 fcd8 	bl	8000d6a <SPI_ReceiveDataIT>
 80003ba:	4603      	mov	r3, r0
 80003bc:	2b02      	cmp	r3, #2
 80003be:	d0f5      	beq.n	80003ac <main+0x198>

			//this delay used for slave to complete the ADC conversion
			for(uint32_t i = 0;i < 50000/2 ;i++);
 80003c0:	2300      	movs	r3, #0
 80003c2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80003c4:	e002      	b.n	80003cc <main+0x1b8>
 80003c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80003c8:	3301      	adds	r3, #1
 80003ca:	66fb      	str	r3, [r7, #108]	; 0x6c
 80003cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80003ce:	f246 12a7 	movw	r2, #24999	; 0x61a7
 80003d2:	4293      	cmp	r3, r2
 80003d4:	d9f7      	bls.n	80003c6 <main+0x1b2>

			uint8_t adc_value = 0;
 80003d6:	2300      	movs	r3, #0
 80003d8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			//Send command code
			//SPI_SendandReceiveData(SPI2, &adc_value, &dummy_read, 1);
			while(SPI_SendDataIT(&SPI2Config, &adc_value, 1) == SPI_STATE_BUSY_IN_TX);
 80003dc:	bf00      	nop
 80003de:	f107 035f 	add.w	r3, r7, #95	; 0x5f
 80003e2:	2201      	movs	r2, #1
 80003e4:	4619      	mov	r1, r3
 80003e6:	485e      	ldr	r0, [pc, #376]	; (8000560 <main+0x34c>)
 80003e8:	f000 fc9c 	bl	8000d24 <SPI_SendDataIT>
 80003ec:	4603      	mov	r3, r0
 80003ee:	2b01      	cmp	r3, #1
 80003f0:	d0f5      	beq.n	80003de <main+0x1ca>
			while(SPI_ReceiveDataIT(&SPI2Config, &dummy_read, 1) == SPI_STATE_BUSY_IN_RX);
 80003f2:	bf00      	nop
 80003f4:	f107 0366 	add.w	r3, r7, #102	; 0x66
 80003f8:	2201      	movs	r2, #1
 80003fa:	4619      	mov	r1, r3
 80003fc:	4858      	ldr	r0, [pc, #352]	; (8000560 <main+0x34c>)
 80003fe:	f000 fcb4 	bl	8000d6a <SPI_ReceiveDataIT>
 8000402:	4603      	mov	r3, r0
 8000404:	2b02      	cmp	r3, #2
 8000406:	d0f5      	beq.n	80003f4 <main+0x1e0>

		}

		//3. CMD_PRINT 		<len(2)>  <message(len) >
		//Wait until user press the button
		while(!GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_0));
 8000408:	bf00      	nop
 800040a:	2100      	movs	r1, #0
 800040c:	4853      	ldr	r0, [pc, #332]	; (800055c <main+0x348>)
 800040e:	f000 fba9 	bl	8000b64 <GPIO_ReadFromInputPin>
 8000412:	4603      	mov	r3, r0
 8000414:	2b00      	cmp	r3, #0
 8000416:	d0f8      	beq.n	800040a <main+0x1f6>

		//Introduced delay to avoid the button de-bouncing
		delay();
 8000418:	f7ff fee6 	bl	80001e8 <delay>

		char usr_msg[] = "Hello world from STM32 by Anand";
 800041c:	4b51      	ldr	r3, [pc, #324]	; (8000564 <main+0x350>)
 800041e:	1d3c      	adds	r4, r7, #4
 8000420:	461d      	mov	r5, r3
 8000422:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000424:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000426:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800042a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		uint8_t cmd_print[33] = {0};
 800042e:	2300      	movs	r3, #0
 8000430:	627b      	str	r3, [r7, #36]	; 0x24
 8000432:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000436:	221d      	movs	r2, #29
 8000438:	2100      	movs	r1, #0
 800043a:	4618      	mov	r0, r3
 800043c:	f000 fef8 	bl	8001230 <memset>

		cmd_print[0] = COMMAND_PRINT;
 8000440:	2353      	movs	r3, #83	; 0x53
 8000442:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		cmd_print[1] = dummy_write;
 8000446:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800044a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		strcpy((char *)&cmd_print[2],&usr_msg[0]);
 800044e:	1d3a      	adds	r2, r7, #4
 8000450:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000454:	3302      	adds	r3, #2
 8000456:	4611      	mov	r1, r2
 8000458:	4618      	mov	r0, r3
 800045a:	f000 fef1 	bl	8001240 <strcpy>
		SPI_SendDataIT(&SPI2Config, &cmd_print[0], sizeof(cmd_print));
 800045e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000462:	2221      	movs	r2, #33	; 0x21
 8000464:	4619      	mov	r1, r3
 8000466:	483e      	ldr	r0, [pc, #248]	; (8000560 <main+0x34c>)
 8000468:	f000 fc5c 	bl	8000d24 <SPI_SendDataIT>

		}
#endif
		//4. CMD_ID_READ
		//Wait until user press the button
		while(!GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_0));
 800046c:	bf00      	nop
 800046e:	2100      	movs	r1, #0
 8000470:	483a      	ldr	r0, [pc, #232]	; (800055c <main+0x348>)
 8000472:	f000 fb77 	bl	8000b64 <GPIO_ReadFromInputPin>
 8000476:	4603      	mov	r3, r0
 8000478:	2b00      	cmp	r3, #0
 800047a:	d0f8      	beq.n	800046e <main+0x25a>

		//Introduced delay to avoid the button de-bouncing
		delay();
 800047c:	f7ff feb4 	bl	80001e8 <delay>

		//1. send the command led and arg
		cmd_code = COMMAND_ID_READ;
 8000480:	2354      	movs	r3, #84	; 0x54
 8000482:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65

		//Send command code
//		SPI_SendandReceiveData(SPI2, &cmd_code, &dummy_read, 1);
		while(SPI_SendDataIT(&SPI2Config, &cmd_code, 1) == SPI_STATE_BUSY_IN_TX);
 8000486:	bf00      	nop
 8000488:	f107 0365 	add.w	r3, r7, #101	; 0x65
 800048c:	2201      	movs	r2, #1
 800048e:	4619      	mov	r1, r3
 8000490:	4833      	ldr	r0, [pc, #204]	; (8000560 <main+0x34c>)
 8000492:	f000 fc47 	bl	8000d24 <SPI_SendDataIT>
 8000496:	4603      	mov	r3, r0
 8000498:	2b01      	cmp	r3, #1
 800049a:	d0f5      	beq.n	8000488 <main+0x274>
		while(SPI_ReceiveDataIT(&SPI2Config, &dummy_read, 1) == SPI_STATE_BUSY_IN_RX);
 800049c:	bf00      	nop
 800049e:	f107 0366 	add.w	r3, r7, #102	; 0x66
 80004a2:	2201      	movs	r2, #1
 80004a4:	4619      	mov	r1, r3
 80004a6:	482e      	ldr	r0, [pc, #184]	; (8000560 <main+0x34c>)
 80004a8:	f000 fc5f 	bl	8000d6a <SPI_ReceiveDataIT>
 80004ac:	4603      	mov	r3, r0
 80004ae:	2b02      	cmp	r3, #2
 80004b0:	d0f5      	beq.n	800049e <main+0x28a>

		//Read the Ackbyte
		//SPI_SendandReceiveData(SPI2, &dummy_write, &ackbyte, 1);
		while(SPI_SendDataIT(&SPI2Config, &dummy_write, 1) == SPI_STATE_BUSY_IN_TX);
 80004b2:	bf00      	nop
 80004b4:	f107 0367 	add.w	r3, r7, #103	; 0x67
 80004b8:	2201      	movs	r2, #1
 80004ba:	4619      	mov	r1, r3
 80004bc:	4828      	ldr	r0, [pc, #160]	; (8000560 <main+0x34c>)
 80004be:	f000 fc31 	bl	8000d24 <SPI_SendDataIT>
 80004c2:	4603      	mov	r3, r0
 80004c4:	2b01      	cmp	r3, #1
 80004c6:	d0f5      	beq.n	80004b4 <main+0x2a0>
		while(SPI_ReceiveDataIT(&SPI2Config, &ackbyte, 1) == SPI_STATE_BUSY_IN_RX);
 80004c8:	bf00      	nop
 80004ca:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80004ce:	2201      	movs	r2, #1
 80004d0:	4619      	mov	r1, r3
 80004d2:	4823      	ldr	r0, [pc, #140]	; (8000560 <main+0x34c>)
 80004d4:	f000 fc49 	bl	8000d6a <SPI_ReceiveDataIT>
 80004d8:	4603      	mov	r3, r0
 80004da:	2b02      	cmp	r3, #2
 80004dc:	d0f5      	beq.n	80004ca <main+0x2b6>

		//check the ackbyte , used to confirm slave can support the command
		if(SPI_Verifyresponse(ackbyte))
 80004de:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 80004e2:	4618      	mov	r0, r3
 80004e4:	f000 f8b4 	bl	8000650 <SPI_Verifyresponse>
 80004e8:	4603      	mov	r3, r0
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d026      	beq.n	800053c <main+0x328>
		{
			char id[20] = {0};
 80004ee:	2300      	movs	r3, #0
 80004f0:	64bb      	str	r3, [r7, #72]	; 0x48
 80004f2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80004f6:	2200      	movs	r2, #0
 80004f8:	601a      	str	r2, [r3, #0]
 80004fa:	605a      	str	r2, [r3, #4]
 80004fc:	609a      	str	r2, [r3, #8]
 80004fe:	60da      	str	r2, [r3, #12]
			//for loop is introduced due to dummy array increment to may lead to exception
			SPI_ReceiveDataIT(&SPI2Config, (uint8_t *)&id[0], 10);
 8000500:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000504:	220a      	movs	r2, #10
 8000506:	4619      	mov	r1, r3
 8000508:	4815      	ldr	r0, [pc, #84]	; (8000560 <main+0x34c>)
 800050a:	f000 fc2e 	bl	8000d6a <SPI_ReceiveDataIT>
			for(uint32_t i = 0; i < 10 ; i++ )
 800050e:	2300      	movs	r3, #0
 8000510:	66bb      	str	r3, [r7, #104]	; 0x68
 8000512:	e00d      	b.n	8000530 <main+0x31c>
			{
				//SPI_SendandReceiveData(SPI2, &dummy_write, (uint8_t *)&id[i], 1);
				while(SPI_SendDataIT(&SPI2Config, &dummy_write, 1) == SPI_STATE_BUSY_IN_TX);
 8000514:	bf00      	nop
 8000516:	f107 0367 	add.w	r3, r7, #103	; 0x67
 800051a:	2201      	movs	r2, #1
 800051c:	4619      	mov	r1, r3
 800051e:	4810      	ldr	r0, [pc, #64]	; (8000560 <main+0x34c>)
 8000520:	f000 fc00 	bl	8000d24 <SPI_SendDataIT>
 8000524:	4603      	mov	r3, r0
 8000526:	2b01      	cmp	r3, #1
 8000528:	d0f5      	beq.n	8000516 <main+0x302>
			for(uint32_t i = 0; i < 10 ; i++ )
 800052a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800052c:	3301      	adds	r3, #1
 800052e:	66bb      	str	r3, [r7, #104]	; 0x68
 8000530:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000532:	2b09      	cmp	r3, #9
 8000534:	d9ee      	bls.n	8000514 <main+0x300>
				//while(SPI_ReceiveDataIT(&SPI2Config, (uint8_t *)&id[i], 1) == SPI_STATE_BUSY_IN_RX);
			}

			id[10] = '\0';
 8000536:	2300      	movs	r3, #0
 8000538:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
		}
#endif

#endif
		//wait until SPI become free
		while(SPI_GetFlagStatus(SPI2, SPI_BSY_FLAG));
 800053c:	bf00      	nop
 800053e:	2180      	movs	r1, #128	; 0x80
 8000540:	4805      	ldr	r0, [pc, #20]	; (8000558 <main+0x344>)
 8000542:	f000 fce0 	bl	8000f06 <SPI_GetFlagStatus>
 8000546:	4603      	mov	r3, r0
 8000548:	2b00      	cmp	r3, #0
 800054a:	d1f8      	bne.n	800053e <main+0x32a>

		//Disable the SPI peripheral, this makes the NSS pin to High
		SPI_PeripheralControl(SPI2, DISABLE);
 800054c:	2100      	movs	r1, #0
 800054e:	4802      	ldr	r0, [pc, #8]	; (8000558 <main+0x344>)
 8000550:	f000 fcec 	bl	8000f2c <SPI_PeripheralControl>
	{
 8000554:	e67a      	b.n	800024c <main+0x38>
 8000556:	bf00      	nop
 8000558:	40003800 	.word	0x40003800
 800055c:	40020000 	.word	0x40020000
 8000560:	2000001c 	.word	0x2000001c
 8000564:	08001268 	.word	0x08001268

08000568 <SPI2_GpioInit>:
 * PB14 -> SPI2_MISO
 * PB15 -> SPI2_MOSI
 * Alternate functionality 5
 */
void SPI2_GpioInit(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b084      	sub	sp, #16
 800056c:	af00      	add	r7, sp, #0
	GPIO_Handle_t SPIpins = {0};
 800056e:	1d3b      	adds	r3, r7, #4
 8000570:	2200      	movs	r2, #0
 8000572:	601a      	str	r2, [r3, #0]
 8000574:	605a      	str	r2, [r3, #4]
 8000576:	609a      	str	r2, [r3, #8]

	SPIpins.pGPIOx = GPIOB;
 8000578:	4b13      	ldr	r3, [pc, #76]	; (80005c8 <SPI2_GpioInit+0x60>)
 800057a:	607b      	str	r3, [r7, #4]

	SPIpins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 800057c:	2302      	movs	r3, #2
 800057e:	727b      	strb	r3, [r7, #9]
	SPIpins.GPIO_PinConfig.GPIO_PinAltFunMode = 5;
 8000580:	2305      	movs	r3, #5
 8000582:	737b      	strb	r3, [r7, #13]
	SPIpins.GPIO_PinConfig.GPIO_PinOPType = GPIO_PIN_OUT_PUPL;
 8000584:	2300      	movs	r3, #0
 8000586:	733b      	strb	r3, [r7, #12]
	SPIpins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPD_NOPUPD;
 8000588:	2300      	movs	r3, #0
 800058a:	72fb      	strb	r3, [r7, #11]
	SPIpins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_HIGH;
 800058c:	2302      	movs	r3, #2
 800058e:	72bb      	strb	r3, [r7, #10]

	SPIpins.GPIO_PinConfig.GPIO_PinNumber = (  GPIO_PIN_13);
 8000590:	230d      	movs	r3, #13
 8000592:	723b      	strb	r3, [r7, #8]
	//Peripheral clock will be enabled inside the Gpio_init function
	GPIO_Init(&SPIpins);
 8000594:	1d3b      	adds	r3, r7, #4
 8000596:	4618      	mov	r0, r3
 8000598:	f000 f986 	bl	80008a8 <GPIO_Init>

	SPIpins.GPIO_PinConfig.GPIO_PinNumber = (  GPIO_PIN_15);
 800059c:	230f      	movs	r3, #15
 800059e:	723b      	strb	r3, [r7, #8]
	//Peripheral clock will be enabled inside the Gpio_init function
	GPIO_Init(&SPIpins);
 80005a0:	1d3b      	adds	r3, r7, #4
 80005a2:	4618      	mov	r0, r3
 80005a4:	f000 f980 	bl	80008a8 <GPIO_Init>

	SPIpins.GPIO_PinConfig.GPIO_PinNumber = (  GPIO_PIN_12);
 80005a8:	230c      	movs	r3, #12
 80005aa:	723b      	strb	r3, [r7, #8]
	//Peripheral clock will be enabled inside the Gpio_init function
	GPIO_Init(&SPIpins);
 80005ac:	1d3b      	adds	r3, r7, #4
 80005ae:	4618      	mov	r0, r3
 80005b0:	f000 f97a 	bl	80008a8 <GPIO_Init>

	SPIpins.GPIO_PinConfig.GPIO_PinNumber = (  GPIO_PIN_14);
 80005b4:	230e      	movs	r3, #14
 80005b6:	723b      	strb	r3, [r7, #8]
	//Peripheral clock will be enabled inside the Gpio_init function
	GPIO_Init(&SPIpins);
 80005b8:	1d3b      	adds	r3, r7, #4
 80005ba:	4618      	mov	r0, r3
 80005bc:	f000 f974 	bl	80008a8 <GPIO_Init>
}
 80005c0:	bf00      	nop
 80005c2:	3710      	adds	r7, #16
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}
 80005c8:	40020400 	.word	0x40020400

080005cc <SPI2_Init>:


void SPI2_Init(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0

	SPI2Config.pSPIx = SPI2;
 80005d0:	4b12      	ldr	r3, [pc, #72]	; (800061c <SPI2_Init+0x50>)
 80005d2:	4a13      	ldr	r2, [pc, #76]	; (8000620 <SPI2_Init+0x54>)
 80005d4:	601a      	str	r2, [r3, #0]
	SPI2Config.SPI_Config.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;
 80005d6:	4b11      	ldr	r3, [pc, #68]	; (800061c <SPI2_Init+0x50>)
 80005d8:	2201      	movs	r2, #1
 80005da:	711a      	strb	r2, [r3, #4]
	SPI2Config.SPI_Config.SPI_BusConfig = SPI_BUS_CONFIG_FD;
 80005dc:	4b0f      	ldr	r3, [pc, #60]	; (800061c <SPI2_Init+0x50>)
 80005de:	2201      	movs	r2, #1
 80005e0:	715a      	strb	r2, [r3, #5]
	SPI2Config.SPI_Config.SPI_CPOL = SPI_CPOL_LOW;
 80005e2:	4b0e      	ldr	r3, [pc, #56]	; (800061c <SPI2_Init+0x50>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	721a      	strb	r2, [r3, #8]
	SPI2Config.SPI_Config.SPI_CPHA = SPI_CPHA_LOW;
 80005e8:	4b0c      	ldr	r3, [pc, #48]	; (800061c <SPI2_Init+0x50>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	725a      	strb	r2, [r3, #9]
	SPI2Config.SPI_Config.SPI_DFF = SPI_DFF_8BIT;
 80005ee:	4b0b      	ldr	r3, [pc, #44]	; (800061c <SPI2_Init+0x50>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	71da      	strb	r2, [r3, #7]
	SPI2Config.SPI_Config.SPI_ClkSpeed = SPI_CLK_SPEED_DIV8; // Configure SPI clk for 2MHz. since (PCLK = 16MHz)
 80005f4:	4b09      	ldr	r3, [pc, #36]	; (800061c <SPI2_Init+0x50>)
 80005f6:	2202      	movs	r2, #2
 80005f8:	719a      	strb	r2, [r3, #6]
	SPI2Config.SPI_Config.SPI_SSM = SPI_SSM_DI;//Using Hardware slave select management
 80005fa:	4b08      	ldr	r3, [pc, #32]	; (800061c <SPI2_Init+0x50>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	729a      	strb	r2, [r3, #10]

	SPI_Init(&SPI2Config);
 8000600:	4806      	ldr	r0, [pc, #24]	; (800061c <SPI2_Init+0x50>)
 8000602:	f000 fb37 	bl	8000c74 <SPI_Init>

	//Enable the SPI IRQ in NVIC side
	SPI_IRQ_PriorityConfig(IRQ_NO_SPI2,NVIC_IRQ_PRI15);
 8000606:	210f      	movs	r1, #15
 8000608:	2024      	movs	r0, #36	; 0x24
 800060a:	f000 fc55 	bl	8000eb8 <SPI_IRQ_PriorityConfig>
	SPI_IRQConfig(IRQ_NO_SPI2, ENABLE);
 800060e:	2101      	movs	r1, #1
 8000610:	2024      	movs	r0, #36	; 0x24
 8000612:	f000 fbcd 	bl	8000db0 <SPI_IRQConfig>
}
 8000616:	bf00      	nop
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	2000001c 	.word	0x2000001c
 8000620:	40003800 	.word	0x40003800

08000624 <GPIO_ButtonInit>:

void GPIO_ButtonInit(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b084      	sub	sp, #16
 8000628:	af00      	add	r7, sp, #0

	GPIO_Handle_t GpioBtn;

	GpioBtn.pGPIOx = GPIOA;
 800062a:	4b08      	ldr	r3, [pc, #32]	; (800064c <GPIO_ButtonInit+0x28>)
 800062c:	607b      	str	r3, [r7, #4]
	GpioBtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_0;
 800062e:	2300      	movs	r3, #0
 8000630:	723b      	strb	r3, [r7, #8]
	GpioBtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 8000632:	2300      	movs	r3, #0
 8000634:	727b      	strb	r3, [r7, #9]
	GpioBtn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPD_NOPUPD;
 8000636:	2300      	movs	r3, #0
 8000638:	72fb      	strb	r3, [r7, #11]

	//Init the GPIO
	GPIO_Init(&GpioBtn);
 800063a:	1d3b      	adds	r3, r7, #4
 800063c:	4618      	mov	r0, r3
 800063e:	f000 f933 	bl	80008a8 <GPIO_Init>
}
 8000642:	bf00      	nop
 8000644:	3710      	adds	r7, #16
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	40020000 	.word	0x40020000

08000650 <SPI_Verifyresponse>:


uint8_t SPI_Verifyresponse(uint8_t ackbyte)
{
 8000650:	b480      	push	{r7}
 8000652:	b083      	sub	sp, #12
 8000654:	af00      	add	r7, sp, #0
 8000656:	4603      	mov	r3, r0
 8000658:	71fb      	strb	r3, [r7, #7]
	if(ackbyte == ACK)
 800065a:	79fb      	ldrb	r3, [r7, #7]
 800065c:	2bf5      	cmp	r3, #245	; 0xf5
 800065e:	d101      	bne.n	8000664 <SPI_Verifyresponse+0x14>
	{
		return 1;
 8000660:	2301      	movs	r3, #1
 8000662:	e000      	b.n	8000666 <SPI_Verifyresponse+0x16>
	}
	return 0;
 8000664:	2300      	movs	r3, #0
}
 8000666:	4618      	mov	r0, r3
 8000668:	370c      	adds	r7, #12
 800066a:	46bd      	mov	sp, r7
 800066c:	bc80      	pop	{r7}
 800066e:	4770      	bx	lr

08000670 <SPI2_IRQHandler>:

void SPI2_IRQHandler(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	af00      	add	r7, sp, #0
	SPI_IRQHandling(&SPI2Config);
 8000674:	4802      	ldr	r0, [pc, #8]	; (8000680 <SPI2_IRQHandler+0x10>)
 8000676:	f000 fc8f 	bl	8000f98 <SPI_IRQHandling>
}
 800067a:	bf00      	nop
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	2000001c 	.word	0x2000001c

08000684 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000684:	480d      	ldr	r0, [pc, #52]	; (80006bc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000686:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000688:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800068c:	480c      	ldr	r0, [pc, #48]	; (80006c0 <LoopForever+0x6>)
  ldr r1, =_edata
 800068e:	490d      	ldr	r1, [pc, #52]	; (80006c4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000690:	4a0d      	ldr	r2, [pc, #52]	; (80006c8 <LoopForever+0xe>)
  movs r3, #0
 8000692:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000694:	e002      	b.n	800069c <LoopCopyDataInit>

08000696 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000696:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000698:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800069a:	3304      	adds	r3, #4

0800069c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800069c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800069e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006a0:	d3f9      	bcc.n	8000696 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006a2:	4a0a      	ldr	r2, [pc, #40]	; (80006cc <LoopForever+0x12>)
  ldr r4, =_ebss
 80006a4:	4c0a      	ldr	r4, [pc, #40]	; (80006d0 <LoopForever+0x16>)
  movs r3, #0
 80006a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006a8:	e001      	b.n	80006ae <LoopFillZerobss>

080006aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006ac:	3204      	adds	r2, #4

080006ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006b0:	d3fb      	bcc.n	80006aa <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80006b2:	f000 fd99 	bl	80011e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006b6:	f7ff fdad 	bl	8000214 <main>

080006ba <LoopForever>:

LoopForever:
    b LoopForever
 80006ba:	e7fe      	b.n	80006ba <LoopForever>
  ldr   r0, =_estack
 80006bc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80006c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006c4:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80006c8:	08001290 	.word	0x08001290
  ldr r2, =_sbss
 80006cc:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80006d0:	2000003c 	.word	0x2000003c

080006d4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006d4:	e7fe      	b.n	80006d4 <ADC_IRQHandler>
	...

080006d8 <GPIO_PeriClock_Control>:
 *
 * @Note              -  none

 */
void GPIO_PeriClock_Control(GPIOx_RegDef_t *pGPIOx,uint8_t EnorDi)
{
 80006d8:	b480      	push	{r7}
 80006da:	b083      	sub	sp, #12
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
 80006e0:	460b      	mov	r3, r1
 80006e2:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 80006e4:	78fb      	ldrb	r3, [r7, #3]
 80006e6:	2b01      	cmp	r3, #1
 80006e8:	d162      	bne.n	80007b0 <GPIO_PeriClock_Control+0xd8>
	{
		if(pGPIOx == GPIOA)
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	4a64      	ldr	r2, [pc, #400]	; (8000880 <GPIO_PeriClock_Control+0x1a8>)
 80006ee:	4293      	cmp	r3, r2
 80006f0:	d106      	bne.n	8000700 <GPIO_PeriClock_Control+0x28>
		{
			GPIOA_PCLK_EN();
 80006f2:	4b64      	ldr	r3, [pc, #400]	; (8000884 <GPIO_PeriClock_Control+0x1ac>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f6:	4a63      	ldr	r2, [pc, #396]	; (8000884 <GPIO_PeriClock_Control+0x1ac>)
 80006f8:	f043 0301 	orr.w	r3, r3, #1
 80006fc:	6313      	str	r3, [r2, #48]	; 0x30
		else if(pGPIOx == GPIOI)
		{
			GPIOI_PCLK_DI();
		}
	}
}
 80006fe:	e0b9      	b.n	8000874 <GPIO_PeriClock_Control+0x19c>
		else if(pGPIOx == GPIOB)
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	4a61      	ldr	r2, [pc, #388]	; (8000888 <GPIO_PeriClock_Control+0x1b0>)
 8000704:	4293      	cmp	r3, r2
 8000706:	d106      	bne.n	8000716 <GPIO_PeriClock_Control+0x3e>
			GPIOB_PCLK_EN();
 8000708:	4b5e      	ldr	r3, [pc, #376]	; (8000884 <GPIO_PeriClock_Control+0x1ac>)
 800070a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070c:	4a5d      	ldr	r2, [pc, #372]	; (8000884 <GPIO_PeriClock_Control+0x1ac>)
 800070e:	f043 0302 	orr.w	r3, r3, #2
 8000712:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000714:	e0ae      	b.n	8000874 <GPIO_PeriClock_Control+0x19c>
		else if(pGPIOx == GPIOC)
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	4a5c      	ldr	r2, [pc, #368]	; (800088c <GPIO_PeriClock_Control+0x1b4>)
 800071a:	4293      	cmp	r3, r2
 800071c:	d106      	bne.n	800072c <GPIO_PeriClock_Control+0x54>
			GPIOC_PCLK_EN();
 800071e:	4b59      	ldr	r3, [pc, #356]	; (8000884 <GPIO_PeriClock_Control+0x1ac>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000722:	4a58      	ldr	r2, [pc, #352]	; (8000884 <GPIO_PeriClock_Control+0x1ac>)
 8000724:	f043 0304 	orr.w	r3, r3, #4
 8000728:	6313      	str	r3, [r2, #48]	; 0x30
}
 800072a:	e0a3      	b.n	8000874 <GPIO_PeriClock_Control+0x19c>
		else if(pGPIOx == GPIOD)
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	4a58      	ldr	r2, [pc, #352]	; (8000890 <GPIO_PeriClock_Control+0x1b8>)
 8000730:	4293      	cmp	r3, r2
 8000732:	d106      	bne.n	8000742 <GPIO_PeriClock_Control+0x6a>
			GPIOD_PCLK_EN();
 8000734:	4b53      	ldr	r3, [pc, #332]	; (8000884 <GPIO_PeriClock_Control+0x1ac>)
 8000736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000738:	4a52      	ldr	r2, [pc, #328]	; (8000884 <GPIO_PeriClock_Control+0x1ac>)
 800073a:	f043 0308 	orr.w	r3, r3, #8
 800073e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000740:	e098      	b.n	8000874 <GPIO_PeriClock_Control+0x19c>
		else if(pGPIOx == GPIOE)
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	4a53      	ldr	r2, [pc, #332]	; (8000894 <GPIO_PeriClock_Control+0x1bc>)
 8000746:	4293      	cmp	r3, r2
 8000748:	d106      	bne.n	8000758 <GPIO_PeriClock_Control+0x80>
			GPIOE_PCLK_EN();
 800074a:	4b4e      	ldr	r3, [pc, #312]	; (8000884 <GPIO_PeriClock_Control+0x1ac>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	4a4d      	ldr	r2, [pc, #308]	; (8000884 <GPIO_PeriClock_Control+0x1ac>)
 8000750:	f043 0310 	orr.w	r3, r3, #16
 8000754:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000756:	e08d      	b.n	8000874 <GPIO_PeriClock_Control+0x19c>
		else if(pGPIOx == GPIOF)
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	4a4f      	ldr	r2, [pc, #316]	; (8000898 <GPIO_PeriClock_Control+0x1c0>)
 800075c:	4293      	cmp	r3, r2
 800075e:	d106      	bne.n	800076e <GPIO_PeriClock_Control+0x96>
			GPIOF_PCLK_EN();
 8000760:	4b48      	ldr	r3, [pc, #288]	; (8000884 <GPIO_PeriClock_Control+0x1ac>)
 8000762:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000764:	4a47      	ldr	r2, [pc, #284]	; (8000884 <GPIO_PeriClock_Control+0x1ac>)
 8000766:	f043 0320 	orr.w	r3, r3, #32
 800076a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800076c:	e082      	b.n	8000874 <GPIO_PeriClock_Control+0x19c>
		else if(pGPIOx == GPIOG)
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	4a4a      	ldr	r2, [pc, #296]	; (800089c <GPIO_PeriClock_Control+0x1c4>)
 8000772:	4293      	cmp	r3, r2
 8000774:	d106      	bne.n	8000784 <GPIO_PeriClock_Control+0xac>
			GPIOG_PCLK_EN();
 8000776:	4b43      	ldr	r3, [pc, #268]	; (8000884 <GPIO_PeriClock_Control+0x1ac>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	4a42      	ldr	r2, [pc, #264]	; (8000884 <GPIO_PeriClock_Control+0x1ac>)
 800077c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000780:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000782:	e077      	b.n	8000874 <GPIO_PeriClock_Control+0x19c>
		else if(pGPIOx == GPIOH)
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	4a46      	ldr	r2, [pc, #280]	; (80008a0 <GPIO_PeriClock_Control+0x1c8>)
 8000788:	4293      	cmp	r3, r2
 800078a:	d106      	bne.n	800079a <GPIO_PeriClock_Control+0xc2>
			GPIOH_PCLK_EN();
 800078c:	4b3d      	ldr	r3, [pc, #244]	; (8000884 <GPIO_PeriClock_Control+0x1ac>)
 800078e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000790:	4a3c      	ldr	r2, [pc, #240]	; (8000884 <GPIO_PeriClock_Control+0x1ac>)
 8000792:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000796:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000798:	e06c      	b.n	8000874 <GPIO_PeriClock_Control+0x19c>
		else if(pGPIOx == GPIOI)
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	4a41      	ldr	r2, [pc, #260]	; (80008a4 <GPIO_PeriClock_Control+0x1cc>)
 800079e:	4293      	cmp	r3, r2
 80007a0:	d168      	bne.n	8000874 <GPIO_PeriClock_Control+0x19c>
			GPIOI_PCLK_EN();
 80007a2:	4b38      	ldr	r3, [pc, #224]	; (8000884 <GPIO_PeriClock_Control+0x1ac>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	4a37      	ldr	r2, [pc, #220]	; (8000884 <GPIO_PeriClock_Control+0x1ac>)
 80007a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007ac:	6313      	str	r3, [r2, #48]	; 0x30
}
 80007ae:	e061      	b.n	8000874 <GPIO_PeriClock_Control+0x19c>
		if(pGPIOx == GPIOA)
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	4a33      	ldr	r2, [pc, #204]	; (8000880 <GPIO_PeriClock_Control+0x1a8>)
 80007b4:	4293      	cmp	r3, r2
 80007b6:	d106      	bne.n	80007c6 <GPIO_PeriClock_Control+0xee>
			GPIOA_PCLK_DI();
 80007b8:	4b32      	ldr	r3, [pc, #200]	; (8000884 <GPIO_PeriClock_Control+0x1ac>)
 80007ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007bc:	4a31      	ldr	r2, [pc, #196]	; (8000884 <GPIO_PeriClock_Control+0x1ac>)
 80007be:	f023 0301 	bic.w	r3, r3, #1
 80007c2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80007c4:	e056      	b.n	8000874 <GPIO_PeriClock_Control+0x19c>
		else if(pGPIOx == GPIOB)
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	4a2f      	ldr	r2, [pc, #188]	; (8000888 <GPIO_PeriClock_Control+0x1b0>)
 80007ca:	4293      	cmp	r3, r2
 80007cc:	d106      	bne.n	80007dc <GPIO_PeriClock_Control+0x104>
			GPIOB_PCLK_DI();
 80007ce:	4b2d      	ldr	r3, [pc, #180]	; (8000884 <GPIO_PeriClock_Control+0x1ac>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	4a2c      	ldr	r2, [pc, #176]	; (8000884 <GPIO_PeriClock_Control+0x1ac>)
 80007d4:	f023 0302 	bic.w	r3, r3, #2
 80007d8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80007da:	e04b      	b.n	8000874 <GPIO_PeriClock_Control+0x19c>
		else if(pGPIOx == GPIOC)
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	4a2b      	ldr	r2, [pc, #172]	; (800088c <GPIO_PeriClock_Control+0x1b4>)
 80007e0:	4293      	cmp	r3, r2
 80007e2:	d106      	bne.n	80007f2 <GPIO_PeriClock_Control+0x11a>
			GPIOC_PCLK_DI();
 80007e4:	4b27      	ldr	r3, [pc, #156]	; (8000884 <GPIO_PeriClock_Control+0x1ac>)
 80007e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e8:	4a26      	ldr	r2, [pc, #152]	; (8000884 <GPIO_PeriClock_Control+0x1ac>)
 80007ea:	f023 0304 	bic.w	r3, r3, #4
 80007ee:	6313      	str	r3, [r2, #48]	; 0x30
}
 80007f0:	e040      	b.n	8000874 <GPIO_PeriClock_Control+0x19c>
		else if(pGPIOx == GPIOD)
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	4a26      	ldr	r2, [pc, #152]	; (8000890 <GPIO_PeriClock_Control+0x1b8>)
 80007f6:	4293      	cmp	r3, r2
 80007f8:	d106      	bne.n	8000808 <GPIO_PeriClock_Control+0x130>
			GPIOD_PCLK_DI();
 80007fa:	4b22      	ldr	r3, [pc, #136]	; (8000884 <GPIO_PeriClock_Control+0x1ac>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	4a21      	ldr	r2, [pc, #132]	; (8000884 <GPIO_PeriClock_Control+0x1ac>)
 8000800:	f023 0308 	bic.w	r3, r3, #8
 8000804:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000806:	e035      	b.n	8000874 <GPIO_PeriClock_Control+0x19c>
		else if(pGPIOx == GPIOE)
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	4a22      	ldr	r2, [pc, #136]	; (8000894 <GPIO_PeriClock_Control+0x1bc>)
 800080c:	4293      	cmp	r3, r2
 800080e:	d106      	bne.n	800081e <GPIO_PeriClock_Control+0x146>
			GPIOE_PCLK_DI();
 8000810:	4b1c      	ldr	r3, [pc, #112]	; (8000884 <GPIO_PeriClock_Control+0x1ac>)
 8000812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000814:	4a1b      	ldr	r2, [pc, #108]	; (8000884 <GPIO_PeriClock_Control+0x1ac>)
 8000816:	f023 0310 	bic.w	r3, r3, #16
 800081a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800081c:	e02a      	b.n	8000874 <GPIO_PeriClock_Control+0x19c>
		else if(pGPIOx == GPIOF)
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	4a1d      	ldr	r2, [pc, #116]	; (8000898 <GPIO_PeriClock_Control+0x1c0>)
 8000822:	4293      	cmp	r3, r2
 8000824:	d106      	bne.n	8000834 <GPIO_PeriClock_Control+0x15c>
			GPIOF_PCLK_DI();
 8000826:	4b17      	ldr	r3, [pc, #92]	; (8000884 <GPIO_PeriClock_Control+0x1ac>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082a:	4a16      	ldr	r2, [pc, #88]	; (8000884 <GPIO_PeriClock_Control+0x1ac>)
 800082c:	f023 0320 	bic.w	r3, r3, #32
 8000830:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000832:	e01f      	b.n	8000874 <GPIO_PeriClock_Control+0x19c>
		else if(pGPIOx == GPIOG)
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	4a19      	ldr	r2, [pc, #100]	; (800089c <GPIO_PeriClock_Control+0x1c4>)
 8000838:	4293      	cmp	r3, r2
 800083a:	d106      	bne.n	800084a <GPIO_PeriClock_Control+0x172>
			GPIOG_PCLK_DI();
 800083c:	4b11      	ldr	r3, [pc, #68]	; (8000884 <GPIO_PeriClock_Control+0x1ac>)
 800083e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000840:	4a10      	ldr	r2, [pc, #64]	; (8000884 <GPIO_PeriClock_Control+0x1ac>)
 8000842:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000846:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000848:	e014      	b.n	8000874 <GPIO_PeriClock_Control+0x19c>
		else if(pGPIOx == GPIOH)
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	4a14      	ldr	r2, [pc, #80]	; (80008a0 <GPIO_PeriClock_Control+0x1c8>)
 800084e:	4293      	cmp	r3, r2
 8000850:	d106      	bne.n	8000860 <GPIO_PeriClock_Control+0x188>
			GPIOH_PCLK_DI();
 8000852:	4b0c      	ldr	r3, [pc, #48]	; (8000884 <GPIO_PeriClock_Control+0x1ac>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000856:	4a0b      	ldr	r2, [pc, #44]	; (8000884 <GPIO_PeriClock_Control+0x1ac>)
 8000858:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800085c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800085e:	e009      	b.n	8000874 <GPIO_PeriClock_Control+0x19c>
		else if(pGPIOx == GPIOI)
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	4a10      	ldr	r2, [pc, #64]	; (80008a4 <GPIO_PeriClock_Control+0x1cc>)
 8000864:	4293      	cmp	r3, r2
 8000866:	d105      	bne.n	8000874 <GPIO_PeriClock_Control+0x19c>
			GPIOI_PCLK_DI();
 8000868:	4b06      	ldr	r3, [pc, #24]	; (8000884 <GPIO_PeriClock_Control+0x1ac>)
 800086a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086c:	4a05      	ldr	r2, [pc, #20]	; (8000884 <GPIO_PeriClock_Control+0x1ac>)
 800086e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000872:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000874:	bf00      	nop
 8000876:	370c      	adds	r7, #12
 8000878:	46bd      	mov	sp, r7
 800087a:	bc80      	pop	{r7}
 800087c:	4770      	bx	lr
 800087e:	bf00      	nop
 8000880:	40020000 	.word	0x40020000
 8000884:	40023800 	.word	0x40023800
 8000888:	40020400 	.word	0x40020400
 800088c:	40020800 	.word	0x40020800
 8000890:	40020c00 	.word	0x40020c00
 8000894:	40021000 	.word	0x40021000
 8000898:	40021400 	.word	0x40021400
 800089c:	40021800 	.word	0x40021800
 80008a0:	40021c00 	.word	0x40021c00
 80008a4:	40022000 	.word	0x40022000

080008a8 <GPIO_Init>:

/*
 * GPIO init and De-init function
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b086      	sub	sp, #24
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
	uint32_t temp = 0 ;
 80008b0:	2300      	movs	r3, #0
 80008b2:	617b      	str	r3, [r7, #20]

	//Enable the GPIO peripheral clock
	GPIO_PeriClock_Control(pGPIOHandle->pGPIOx, ENABLE);
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	2101      	movs	r1, #1
 80008ba:	4618      	mov	r0, r3
 80008bc:	f7ff ff0c 	bl	80006d8 <GPIO_PeriClock_Control>

	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ALTFN)
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	795b      	ldrb	r3, [r3, #5]
 80008c4:	2b02      	cmp	r3, #2
 80008c6:	d813      	bhi.n	80008f0 <GPIO_Init+0x48>
	{
		//Non-interrupt functionality
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 *pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	795b      	ldrb	r3, [r3, #5]
 80008cc:	461a      	mov	r2, r3
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	791b      	ldrb	r3, [r3, #4]
 80008d2:	005b      	lsls	r3, r3, #1
 80008d4:	fa02 f303 	lsl.w	r3, r2, r3
 80008d8:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER |= temp;
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	6819      	ldr	r1, [r3, #0]
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	697a      	ldr	r2, [r7, #20]
 80008e6:	430a      	orrs	r2, r1
 80008e8:	601a      	str	r2, [r3, #0]
		temp = 0;
 80008ea:	2300      	movs	r3, #0
 80008ec:	617b      	str	r3, [r7, #20]
 80008ee:	e0c1      	b.n	8000a74 <GPIO_Init+0x1cc>
	}
	else
	{
		//Alternate functionality
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	795b      	ldrb	r3, [r3, #5]
 80008f4:	2b05      	cmp	r3, #5
 80008f6:	d117      	bne.n	8000928 <GPIO_Init+0x80>
		{
			//Enable the Falling edge interrupt and clear the rising edge interrupt
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80008f8:	4b8e      	ldr	r3, [pc, #568]	; (8000b34 <GPIO_Init+0x28c>)
 80008fa:	68db      	ldr	r3, [r3, #12]
 80008fc:	687a      	ldr	r2, [r7, #4]
 80008fe:	7912      	ldrb	r2, [r2, #4]
 8000900:	4611      	mov	r1, r2
 8000902:	2201      	movs	r2, #1
 8000904:	408a      	lsls	r2, r1
 8000906:	4611      	mov	r1, r2
 8000908:	4a8a      	ldr	r2, [pc, #552]	; (8000b34 <GPIO_Init+0x28c>)
 800090a:	430b      	orrs	r3, r1
 800090c:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800090e:	4b89      	ldr	r3, [pc, #548]	; (8000b34 <GPIO_Init+0x28c>)
 8000910:	689b      	ldr	r3, [r3, #8]
 8000912:	687a      	ldr	r2, [r7, #4]
 8000914:	7912      	ldrb	r2, [r2, #4]
 8000916:	4611      	mov	r1, r2
 8000918:	2201      	movs	r2, #1
 800091a:	408a      	lsls	r2, r1
 800091c:	43d2      	mvns	r2, r2
 800091e:	4611      	mov	r1, r2
 8000920:	4a84      	ldr	r2, [pc, #528]	; (8000b34 <GPIO_Init+0x28c>)
 8000922:	400b      	ands	r3, r1
 8000924:	6093      	str	r3, [r2, #8]
 8000926:	e035      	b.n	8000994 <GPIO_Init+0xec>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	795b      	ldrb	r3, [r3, #5]
 800092c:	2b04      	cmp	r3, #4
 800092e:	d117      	bne.n	8000960 <GPIO_Init+0xb8>
		{
			//Enable the Rising edge interrupt and clear the falling edge interrupt
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000930:	4b80      	ldr	r3, [pc, #512]	; (8000b34 <GPIO_Init+0x28c>)
 8000932:	68db      	ldr	r3, [r3, #12]
 8000934:	687a      	ldr	r2, [r7, #4]
 8000936:	7912      	ldrb	r2, [r2, #4]
 8000938:	4611      	mov	r1, r2
 800093a:	2201      	movs	r2, #1
 800093c:	408a      	lsls	r2, r1
 800093e:	43d2      	mvns	r2, r2
 8000940:	4611      	mov	r1, r2
 8000942:	4a7c      	ldr	r2, [pc, #496]	; (8000b34 <GPIO_Init+0x28c>)
 8000944:	400b      	ands	r3, r1
 8000946:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000948:	4b7a      	ldr	r3, [pc, #488]	; (8000b34 <GPIO_Init+0x28c>)
 800094a:	689b      	ldr	r3, [r3, #8]
 800094c:	687a      	ldr	r2, [r7, #4]
 800094e:	7912      	ldrb	r2, [r2, #4]
 8000950:	4611      	mov	r1, r2
 8000952:	2201      	movs	r2, #1
 8000954:	408a      	lsls	r2, r1
 8000956:	4611      	mov	r1, r2
 8000958:	4a76      	ldr	r2, [pc, #472]	; (8000b34 <GPIO_Init+0x28c>)
 800095a:	430b      	orrs	r3, r1
 800095c:	6093      	str	r3, [r2, #8]
 800095e:	e019      	b.n	8000994 <GPIO_Init+0xec>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT)
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	795b      	ldrb	r3, [r3, #5]
 8000964:	2b06      	cmp	r3, #6
 8000966:	d115      	bne.n	8000994 <GPIO_Init+0xec>
		{
			//Enable the Rising edge interrupt and falling edge interrupt
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000968:	4b72      	ldr	r3, [pc, #456]	; (8000b34 <GPIO_Init+0x28c>)
 800096a:	68db      	ldr	r3, [r3, #12]
 800096c:	687a      	ldr	r2, [r7, #4]
 800096e:	7912      	ldrb	r2, [r2, #4]
 8000970:	4611      	mov	r1, r2
 8000972:	2201      	movs	r2, #1
 8000974:	408a      	lsls	r2, r1
 8000976:	4611      	mov	r1, r2
 8000978:	4a6e      	ldr	r2, [pc, #440]	; (8000b34 <GPIO_Init+0x28c>)
 800097a:	430b      	orrs	r3, r1
 800097c:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800097e:	4b6d      	ldr	r3, [pc, #436]	; (8000b34 <GPIO_Init+0x28c>)
 8000980:	689b      	ldr	r3, [r3, #8]
 8000982:	687a      	ldr	r2, [r7, #4]
 8000984:	7912      	ldrb	r2, [r2, #4]
 8000986:	4611      	mov	r1, r2
 8000988:	2201      	movs	r2, #1
 800098a:	408a      	lsls	r2, r1
 800098c:	4611      	mov	r1, r2
 800098e:	4a69      	ldr	r2, [pc, #420]	; (8000b34 <GPIO_Init+0x28c>)
 8000990:	430b      	orrs	r3, r1
 8000992:	6093      	str	r3, [r2, #8]
		}

		//Enable the respective port for the pin number to NVIC
		SYSCFG_PCLK_EN();
 8000994:	4b68      	ldr	r3, [pc, #416]	; (8000b38 <GPIO_Init+0x290>)
 8000996:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000998:	4a67      	ldr	r2, [pc, #412]	; (8000b38 <GPIO_Init+0x290>)
 800099a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800099e:	6453      	str	r3, [r2, #68]	; 0x44
		uint8_t index = 0;
 80009a0:	2300      	movs	r3, #0
 80009a2:	74fb      	strb	r3, [r7, #19]
		uint8_t pos	= 0 ;
 80009a4:	2300      	movs	r3, #0
 80009a6:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = PORTCODE_FROM_GPIO_PORTREG(pGPIOHandle->pGPIOx);
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	4a63      	ldr	r2, [pc, #396]	; (8000b3c <GPIO_Init+0x294>)
 80009ae:	4293      	cmp	r3, r2
 80009b0:	d039      	beq.n	8000a26 <GPIO_Init+0x17e>
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	4a62      	ldr	r2, [pc, #392]	; (8000b40 <GPIO_Init+0x298>)
 80009b8:	4293      	cmp	r3, r2
 80009ba:	d032      	beq.n	8000a22 <GPIO_Init+0x17a>
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	4a60      	ldr	r2, [pc, #384]	; (8000b44 <GPIO_Init+0x29c>)
 80009c2:	4293      	cmp	r3, r2
 80009c4:	d02b      	beq.n	8000a1e <GPIO_Init+0x176>
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	4a5f      	ldr	r2, [pc, #380]	; (8000b48 <GPIO_Init+0x2a0>)
 80009cc:	4293      	cmp	r3, r2
 80009ce:	d024      	beq.n	8000a1a <GPIO_Init+0x172>
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	4a5d      	ldr	r2, [pc, #372]	; (8000b4c <GPIO_Init+0x2a4>)
 80009d6:	4293      	cmp	r3, r2
 80009d8:	d01d      	beq.n	8000a16 <GPIO_Init+0x16e>
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	4a5c      	ldr	r2, [pc, #368]	; (8000b50 <GPIO_Init+0x2a8>)
 80009e0:	4293      	cmp	r3, r2
 80009e2:	d016      	beq.n	8000a12 <GPIO_Init+0x16a>
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	4a5a      	ldr	r2, [pc, #360]	; (8000b54 <GPIO_Init+0x2ac>)
 80009ea:	4293      	cmp	r3, r2
 80009ec:	d00f      	beq.n	8000a0e <GPIO_Init+0x166>
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	4a59      	ldr	r2, [pc, #356]	; (8000b58 <GPIO_Init+0x2b0>)
 80009f4:	4293      	cmp	r3, r2
 80009f6:	d008      	beq.n	8000a0a <GPIO_Init+0x162>
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	4a57      	ldr	r2, [pc, #348]	; (8000b5c <GPIO_Init+0x2b4>)
 80009fe:	4293      	cmp	r3, r2
 8000a00:	d101      	bne.n	8000a06 <GPIO_Init+0x15e>
 8000a02:	2308      	movs	r3, #8
 8000a04:	e010      	b.n	8000a28 <GPIO_Init+0x180>
 8000a06:	2300      	movs	r3, #0
 8000a08:	e00e      	b.n	8000a28 <GPIO_Init+0x180>
 8000a0a:	2307      	movs	r3, #7
 8000a0c:	e00c      	b.n	8000a28 <GPIO_Init+0x180>
 8000a0e:	2306      	movs	r3, #6
 8000a10:	e00a      	b.n	8000a28 <GPIO_Init+0x180>
 8000a12:	2305      	movs	r3, #5
 8000a14:	e008      	b.n	8000a28 <GPIO_Init+0x180>
 8000a16:	2304      	movs	r3, #4
 8000a18:	e006      	b.n	8000a28 <GPIO_Init+0x180>
 8000a1a:	2303      	movs	r3, #3
 8000a1c:	e004      	b.n	8000a28 <GPIO_Init+0x180>
 8000a1e:	2302      	movs	r3, #2
 8000a20:	e002      	b.n	8000a28 <GPIO_Init+0x180>
 8000a22:	2301      	movs	r3, #1
 8000a24:	e000      	b.n	8000a28 <GPIO_Init+0x180>
 8000a26:	2300      	movs	r3, #0
 8000a28:	747b      	strb	r3, [r7, #17]
		index = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	791b      	ldrb	r3, [r3, #4]
 8000a2e:	089b      	lsrs	r3, r3, #2
 8000a30:	74fb      	strb	r3, [r7, #19]
		pos = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	791b      	ldrb	r3, [r3, #4]
 8000a36:	f003 0303 	and.w	r3, r3, #3
 8000a3a:	74bb      	strb	r3, [r7, #18]

		SYSCFG->EXTICR[index] |= (portcode << (4 * pos));
 8000a3c:	4a48      	ldr	r2, [pc, #288]	; (8000b60 <GPIO_Init+0x2b8>)
 8000a3e:	7cfb      	ldrb	r3, [r7, #19]
 8000a40:	3302      	adds	r3, #2
 8000a42:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000a46:	7c79      	ldrb	r1, [r7, #17]
 8000a48:	7cbb      	ldrb	r3, [r7, #18]
 8000a4a:	009b      	lsls	r3, r3, #2
 8000a4c:	fa01 f303 	lsl.w	r3, r1, r3
 8000a50:	4618      	mov	r0, r3
 8000a52:	4943      	ldr	r1, [pc, #268]	; (8000b60 <GPIO_Init+0x2b8>)
 8000a54:	7cfb      	ldrb	r3, [r7, #19]
 8000a56:	4302      	orrs	r2, r0
 8000a58:	3302      	adds	r3, #2
 8000a5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


		//Enable the GPIO peripheral interrupt
		EXTI->IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000a5e:	4b35      	ldr	r3, [pc, #212]	; (8000b34 <GPIO_Init+0x28c>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	687a      	ldr	r2, [r7, #4]
 8000a64:	7912      	ldrb	r2, [r2, #4]
 8000a66:	4611      	mov	r1, r2
 8000a68:	2201      	movs	r2, #1
 8000a6a:	408a      	lsls	r2, r1
 8000a6c:	4611      	mov	r1, r2
 8000a6e:	4a31      	ldr	r2, [pc, #196]	; (8000b34 <GPIO_Init+0x28c>)
 8000a70:	430b      	orrs	r3, r1
 8000a72:	6013      	str	r3, [r2, #0]
	}

	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 *pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	799b      	ldrb	r3, [r3, #6]
 8000a78:	461a      	mov	r2, r3
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	791b      	ldrb	r3, [r3, #4]
 8000a7e:	005b      	lsls	r3, r3, #1
 8000a80:	fa02 f303 	lsl.w	r3, r2, r3
 8000a84:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	6899      	ldr	r1, [r3, #8]
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	697a      	ldr	r2, [r7, #20]
 8000a92:	430a      	orrs	r2, r1
 8000a94:	609a      	str	r2, [r3, #8]
	temp = 0;
 8000a96:	2300      	movs	r3, #0
 8000a98:	617b      	str	r3, [r7, #20]

	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	7a1b      	ldrb	r3, [r3, #8]
 8000a9e:	461a      	mov	r2, r3
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	791b      	ldrb	r3, [r3, #4]
 8000aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa8:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	6859      	ldr	r1, [r3, #4]
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	697a      	ldr	r2, [r7, #20]
 8000ab6:	430a      	orrs	r2, r1
 8000ab8:	605a      	str	r2, [r3, #4]
	temp = 0;
 8000aba:	2300      	movs	r3, #0
 8000abc:	617b      	str	r3, [r7, #20]

	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 *pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	79db      	ldrb	r3, [r3, #7]
 8000ac2:	461a      	mov	r2, r3
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	791b      	ldrb	r3, [r3, #4]
 8000ac8:	005b      	lsls	r3, r3, #1
 8000aca:	fa02 f303 	lsl.w	r3, r2, r3
 8000ace:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	68d9      	ldr	r1, [r3, #12]
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	697a      	ldr	r2, [r7, #20]
 8000adc:	430a      	orrs	r2, r1
 8000ade:	60da      	str	r2, [r3, #12]
	temp = 0;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	617b      	str	r3, [r7, #20]

	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	795b      	ldrb	r3, [r3, #5]
 8000ae8:	2b02      	cmp	r3, #2
 8000aea:	d11f      	bne.n	8000b2c <GPIO_Init+0x284>
	{
		uint8_t Reg_index = (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) / 8;
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	791b      	ldrb	r3, [r3, #4]
 8000af0:	08db      	lsrs	r3, r3, #3
 8000af2:	743b      	strb	r3, [r7, #16]
		uint8_t Bit_pos	= (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) % 8;
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	791b      	ldrb	r3, [r3, #4]
 8000af8:	f003 0307 	and.w	r3, r3, #7
 8000afc:	73fb      	strb	r3, [r7, #15]

		temp = pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode;
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	7a5b      	ldrb	r3, [r3, #9]
 8000b02:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->AFR[Reg_index] |= (temp << (4 * Bit_pos) );
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	7c3a      	ldrb	r2, [r7, #16]
 8000b0a:	3208      	adds	r2, #8
 8000b0c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8000b10:	7bfb      	ldrb	r3, [r7, #15]
 8000b12:	009b      	lsls	r3, r3, #2
 8000b14:	697a      	ldr	r2, [r7, #20]
 8000b16:	fa02 f103 	lsl.w	r1, r2, r3
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	7c3a      	ldrb	r2, [r7, #16]
 8000b20:	4301      	orrs	r1, r0
 8000b22:	3208      	adds	r2, #8
 8000b24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		temp = 0;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	617b      	str	r3, [r7, #20]
	}

}
 8000b2c:	bf00      	nop
 8000b2e:	3718      	adds	r7, #24
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	40013c00 	.word	0x40013c00
 8000b38:	40023800 	.word	0x40023800
 8000b3c:	40020000 	.word	0x40020000
 8000b40:	40020400 	.word	0x40020400
 8000b44:	40020800 	.word	0x40020800
 8000b48:	40020c00 	.word	0x40020c00
 8000b4c:	40021000 	.word	0x40021000
 8000b50:	40021400 	.word	0x40021400
 8000b54:	40021800 	.word	0x40021800
 8000b58:	40021c00 	.word	0x40021c00
 8000b5c:	40022000 	.word	0x40022000
 8000b60:	40013800 	.word	0x40013800

08000b64 <GPIO_ReadFromInputPin>:

/*
 * GPIO write and read from Pin and Port
 */
uint8_t GPIO_ReadFromInputPin(GPIOx_RegDef_t *pGPIOx,uint16_t PinNumber)
{
 8000b64:	b480      	push	{r7}
 8000b66:	b085      	sub	sp, #20
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
 8000b6c:	460b      	mov	r3, r1
 8000b6e:	807b      	strh	r3, [r7, #2]
	uint8_t status = 0;
 8000b70:	2300      	movs	r3, #0
 8000b72:	73fb      	strb	r3, [r7, #15]
	status = (((pGPIOx->IDR) >> PinNumber) & 0x1);
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	691a      	ldr	r2, [r3, #16]
 8000b78:	887b      	ldrh	r3, [r7, #2]
 8000b7a:	fa22 f303 	lsr.w	r3, r2, r3
 8000b7e:	b2db      	uxtb	r3, r3
 8000b80:	f003 0301 	and.w	r3, r3, #1
 8000b84:	73fb      	strb	r3, [r7, #15]
	return status;
 8000b86:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b88:	4618      	mov	r0, r3
 8000b8a:	3714      	adds	r7, #20
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bc80      	pop	{r7}
 8000b90:	4770      	bx	lr
	...

08000b94 <SPI_PeriClock_Control>:

/*
 * Peripheral clock enable or disable API
 */
void SPI_PeriClock_Control(SPI_RegDef_t *pSPIx,uint8_t EnorDi)
{
 8000b94:	b480      	push	{r7}
 8000b96:	b083      	sub	sp, #12
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
 8000b9c:	460b      	mov	r3, r1
 8000b9e:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000ba0:	78fb      	ldrb	r3, [r7, #3]
 8000ba2:	2b01      	cmp	r3, #1
 8000ba4:	d12b      	bne.n	8000bfe <SPI_PeriClock_Control+0x6a>
	{
		if(pSPIx == SPI1)
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	4a2d      	ldr	r2, [pc, #180]	; (8000c60 <SPI_PeriClock_Control+0xcc>)
 8000baa:	4293      	cmp	r3, r2
 8000bac:	d106      	bne.n	8000bbc <SPI_PeriClock_Control+0x28>
		{
			SPI1_PCLK_EN();
 8000bae:	4b2d      	ldr	r3, [pc, #180]	; (8000c64 <SPI_PeriClock_Control+0xd0>)
 8000bb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bb2:	4a2c      	ldr	r2, [pc, #176]	; (8000c64 <SPI_PeriClock_Control+0xd0>)
 8000bb4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000bb8:	6453      	str	r3, [r2, #68]	; 0x44
		else if(pSPIx == SPI4)
		{
			SPI4_PCLK_DI();
		}
	}
}
 8000bba:	e04b      	b.n	8000c54 <SPI_PeriClock_Control+0xc0>
		else if(pSPIx == SPI2)
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	4a2a      	ldr	r2, [pc, #168]	; (8000c68 <SPI_PeriClock_Control+0xd4>)
 8000bc0:	4293      	cmp	r3, r2
 8000bc2:	d106      	bne.n	8000bd2 <SPI_PeriClock_Control+0x3e>
			SPI2_PCLK_EN();
 8000bc4:	4b27      	ldr	r3, [pc, #156]	; (8000c64 <SPI_PeriClock_Control+0xd0>)
 8000bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bc8:	4a26      	ldr	r2, [pc, #152]	; (8000c64 <SPI_PeriClock_Control+0xd0>)
 8000bca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bce:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000bd0:	e040      	b.n	8000c54 <SPI_PeriClock_Control+0xc0>
		else if(pSPIx == SPI3)
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	4a25      	ldr	r2, [pc, #148]	; (8000c6c <SPI_PeriClock_Control+0xd8>)
 8000bd6:	4293      	cmp	r3, r2
 8000bd8:	d106      	bne.n	8000be8 <SPI_PeriClock_Control+0x54>
			SPI3_PCLK_EN();
 8000bda:	4b22      	ldr	r3, [pc, #136]	; (8000c64 <SPI_PeriClock_Control+0xd0>)
 8000bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bde:	4a21      	ldr	r2, [pc, #132]	; (8000c64 <SPI_PeriClock_Control+0xd0>)
 8000be0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000be4:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000be6:	e035      	b.n	8000c54 <SPI_PeriClock_Control+0xc0>
		else if(pSPIx == SPI4)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	4a21      	ldr	r2, [pc, #132]	; (8000c70 <SPI_PeriClock_Control+0xdc>)
 8000bec:	4293      	cmp	r3, r2
 8000bee:	d131      	bne.n	8000c54 <SPI_PeriClock_Control+0xc0>
			SPI4_PCLK_EN();
 8000bf0:	4b1c      	ldr	r3, [pc, #112]	; (8000c64 <SPI_PeriClock_Control+0xd0>)
 8000bf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bf4:	4a1b      	ldr	r2, [pc, #108]	; (8000c64 <SPI_PeriClock_Control+0xd0>)
 8000bf6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000bfa:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000bfc:	e02a      	b.n	8000c54 <SPI_PeriClock_Control+0xc0>
		if(pSPIx == SPI1)
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	4a17      	ldr	r2, [pc, #92]	; (8000c60 <SPI_PeriClock_Control+0xcc>)
 8000c02:	4293      	cmp	r3, r2
 8000c04:	d106      	bne.n	8000c14 <SPI_PeriClock_Control+0x80>
			SPI1_PCLK_DI();
 8000c06:	4b17      	ldr	r3, [pc, #92]	; (8000c64 <SPI_PeriClock_Control+0xd0>)
 8000c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c0a:	4a16      	ldr	r2, [pc, #88]	; (8000c64 <SPI_PeriClock_Control+0xd0>)
 8000c0c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000c10:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000c12:	e01f      	b.n	8000c54 <SPI_PeriClock_Control+0xc0>
		else if(pSPIx == SPI2)
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	4a14      	ldr	r2, [pc, #80]	; (8000c68 <SPI_PeriClock_Control+0xd4>)
 8000c18:	4293      	cmp	r3, r2
 8000c1a:	d106      	bne.n	8000c2a <SPI_PeriClock_Control+0x96>
			SPI2_PCLK_DI();
 8000c1c:	4b11      	ldr	r3, [pc, #68]	; (8000c64 <SPI_PeriClock_Control+0xd0>)
 8000c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c20:	4a10      	ldr	r2, [pc, #64]	; (8000c64 <SPI_PeriClock_Control+0xd0>)
 8000c22:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000c26:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000c28:	e014      	b.n	8000c54 <SPI_PeriClock_Control+0xc0>
		else if(pSPIx == SPI3)
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	4a0f      	ldr	r2, [pc, #60]	; (8000c6c <SPI_PeriClock_Control+0xd8>)
 8000c2e:	4293      	cmp	r3, r2
 8000c30:	d106      	bne.n	8000c40 <SPI_PeriClock_Control+0xac>
			SPI3_PCLK_DI();
 8000c32:	4b0c      	ldr	r3, [pc, #48]	; (8000c64 <SPI_PeriClock_Control+0xd0>)
 8000c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c36:	4a0b      	ldr	r2, [pc, #44]	; (8000c64 <SPI_PeriClock_Control+0xd0>)
 8000c38:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000c3c:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000c3e:	e009      	b.n	8000c54 <SPI_PeriClock_Control+0xc0>
		else if(pSPIx == SPI4)
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	4a0b      	ldr	r2, [pc, #44]	; (8000c70 <SPI_PeriClock_Control+0xdc>)
 8000c44:	4293      	cmp	r3, r2
 8000c46:	d105      	bne.n	8000c54 <SPI_PeriClock_Control+0xc0>
			SPI4_PCLK_DI();
 8000c48:	4b06      	ldr	r3, [pc, #24]	; (8000c64 <SPI_PeriClock_Control+0xd0>)
 8000c4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c4c:	4a05      	ldr	r2, [pc, #20]	; (8000c64 <SPI_PeriClock_Control+0xd0>)
 8000c4e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000c52:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000c54:	bf00      	nop
 8000c56:	370c      	adds	r7, #12
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bc80      	pop	{r7}
 8000c5c:	4770      	bx	lr
 8000c5e:	bf00      	nop
 8000c60:	40013000 	.word	0x40013000
 8000c64:	40023800 	.word	0x40023800
 8000c68:	40003800 	.word	0x40003800
 8000c6c:	40003c00 	.word	0x40003c00
 8000c70:	40013400 	.word	0x40013400

08000c74 <SPI_Init>:

/*
 * SPIx init and De-init function
 */
void SPI_Init(SPI_Handle_t *pSPIHandle)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b084      	sub	sp, #16
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
	uint32_t temreg = 0;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	60fb      	str	r3, [r7, #12]

	//Enable the SPI peripheral clock
	SPI_PeriClock_Control(pSPIHandle->pSPIx, ENABLE);
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	2101      	movs	r1, #1
 8000c86:	4618      	mov	r0, r3
 8000c88:	f7ff ff84 	bl	8000b94 <SPI_PeriClock_Control>

	//Configure SPI as Mater
	temreg = (pSPIHandle->SPI_Config.SPI_DeviceMode << SPI_CR1_MSTR);
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	791b      	ldrb	r3, [r3, #4]
 8000c90:	009b      	lsls	r3, r3, #2
 8000c92:	60fb      	str	r3, [r7, #12]

	if(pSPIHandle->SPI_Config.SPI_BusConfig == SPI_BUS_CONFIG_FD)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	795b      	ldrb	r3, [r3, #5]
 8000c98:	2b01      	cmp	r3, #1
 8000c9a:	d104      	bne.n	8000ca6 <SPI_Init+0x32>
	{
		//Clear the BIDI mode to configure SPI as full-Duplex communication
		temreg &= ~(1 << SPI_CR1_BIDI_MODE);
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000ca2:	60fb      	str	r3, [r7, #12]
 8000ca4:	e014      	b.n	8000cd0 <SPI_Init+0x5c>
	}
	else if(pSPIHandle->SPI_Config.SPI_BusConfig == SPI_BUS_CONFIG_HD)
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	795b      	ldrb	r3, [r3, #5]
 8000caa:	2b02      	cmp	r3, #2
 8000cac:	d104      	bne.n	8000cb8 <SPI_Init+0x44>
	{
		//Set the BIDI mode to configure the SPI as half-duplex communication
		temreg |= (1 << SPI_CR1_BIDI_MODE);
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000cb4:	60fb      	str	r3, [r7, #12]
 8000cb6:	e00b      	b.n	8000cd0 <SPI_Init+0x5c>
	}
	else if(pSPIHandle->SPI_Config.SPI_BusConfig == SPI_BUS_CONFIG_SIMPLEX_RXONLY)
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	795b      	ldrb	r3, [r3, #5]
 8000cbc:	2b03      	cmp	r3, #3
 8000cbe:	d107      	bne.n	8000cd0 <SPI_Init+0x5c>
	{
		//Clear the BIDI mode to configure SPI as full-Duplex communication
		temreg &= ~(1 << SPI_CR1_BIDI_MODE);
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000cc6:	60fb      	str	r3, [r7, #12]

		//Set the RXONLY bit to configure SPI as simplex receive only mode
		temreg |= (1 << SPI_CR1_RX_ONLY);
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cce:	60fb      	str	r3, [r7, #12]
	}

	//Configure SPI data frame format
	temreg |= (pSPIHandle->SPI_Config.SPI_DFF << SPI_CR1_DFF);
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	79db      	ldrb	r3, [r3, #7]
 8000cd4:	02db      	lsls	r3, r3, #11
 8000cd6:	461a      	mov	r2, r3
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	4313      	orrs	r3, r2
 8000cdc:	60fb      	str	r3, [r7, #12]

	//Configure SPI CPOL
	temreg |= (pSPIHandle->SPI_Config.SPI_CPOL << SPI_CR1_CPOL);
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	7a1b      	ldrb	r3, [r3, #8]
 8000ce2:	005b      	lsls	r3, r3, #1
 8000ce4:	461a      	mov	r2, r3
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	4313      	orrs	r3, r2
 8000cea:	60fb      	str	r3, [r7, #12]

	//Configure SPI CPHA
	temreg |= (pSPIHandle->SPI_Config.SPI_CPHA << SPI_CR1_CPHA);
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	7a5b      	ldrb	r3, [r3, #9]
 8000cf0:	461a      	mov	r2, r3
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	4313      	orrs	r3, r2
 8000cf6:	60fb      	str	r3, [r7, #12]

	//Configure SPI clock speed
	temreg |= (pSPIHandle->SPI_Config.SPI_ClkSpeed << SPI_CR1_BR);
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	799b      	ldrb	r3, [r3, #6]
 8000cfc:	00db      	lsls	r3, r3, #3
 8000cfe:	461a      	mov	r2, r3
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	4313      	orrs	r3, r2
 8000d04:	60fb      	str	r3, [r7, #12]

	//Configure SPI software slave management
	temreg |= (pSPIHandle->SPI_Config.SPI_SSM << SPI_CR1_SSM);
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	7a9b      	ldrb	r3, [r3, #10]
 8000d0a:	025b      	lsls	r3, r3, #9
 8000d0c:	461a      	mov	r2, r3
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	4313      	orrs	r3, r2
 8000d12:	60fb      	str	r3, [r7, #12]

	pSPIHandle->pSPIx->CR1 = temreg;
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	68fa      	ldr	r2, [r7, #12]
 8000d1a:	601a      	str	r2, [r3, #0]

}
 8000d1c:	bf00      	nop
 8000d1e:	3710      	adds	r7, #16
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}

08000d24 <SPI_SendDataIT>:

/*
 * SPI send and receive data with interrupt
 */
SPI_State_e SPI_SendDataIT(SPI_Handle_t *pSPIHandle,uint8_t *pTxBuffer,uint32_t Len)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b087      	sub	sp, #28
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	60f8      	str	r0, [r7, #12]
 8000d2c:	60b9      	str	r1, [r7, #8]
 8000d2e:	607a      	str	r2, [r7, #4]
	SPI_State_e state;

	//1. Check whether SPI state is IDLE or not , if idle follow the below steps , else exist
	state = pSPIHandle->TxState;
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	7d1b      	ldrb	r3, [r3, #20]
 8000d34:	75fb      	strb	r3, [r7, #23]
	if(state != SPI_STATE_BUSY_IN_TX)
 8000d36:	7dfb      	ldrb	r3, [r7, #23]
 8000d38:	2b01      	cmp	r3, #1
 8000d3a:	d010      	beq.n	8000d5e <SPI_SendDataIT+0x3a>
	{
		//2. Copy the Transmit buffer address and length byte information
		pSPIHandle->pTxBuffer = pTxBuffer;
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	68ba      	ldr	r2, [r7, #8]
 8000d40:	60da      	str	r2, [r3, #12]
		pSPIHandle->TxLen = Len;
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	687a      	ldr	r2, [r7, #4]
 8000d46:	619a      	str	r2, [r3, #24]

		//3. Change the SPI state as busy in Tx
		pSPIHandle->TxState = SPI_STATE_BUSY_IN_TX;
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	2201      	movs	r2, #1
 8000d4c:	751a      	strb	r2, [r3, #20]

		//4. Enable the SPI TXE interrupt bit to trigger the SPI_ISR
		pSPIHandle->pSPIx->CR2 |= (1 << SPI_CR2_TXEIE);
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	685a      	ldr	r2, [r3, #4]
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000d5c:	605a      	str	r2, [r3, #4]
	}
	return state;
 8000d5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8000d60:	4618      	mov	r0, r3
 8000d62:	371c      	adds	r7, #28
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bc80      	pop	{r7}
 8000d68:	4770      	bx	lr

08000d6a <SPI_ReceiveDataIT>:


SPI_State_e SPI_ReceiveDataIT(SPI_Handle_t *pSPIHandle,uint8_t *pRxBuffer,uint32_t Len)
{
 8000d6a:	b480      	push	{r7}
 8000d6c:	b087      	sub	sp, #28
 8000d6e:	af00      	add	r7, sp, #0
 8000d70:	60f8      	str	r0, [r7, #12]
 8000d72:	60b9      	str	r1, [r7, #8]
 8000d74:	607a      	str	r2, [r7, #4]
	SPI_State_e state;

	//1. Check whether SPI state is IDLE or not , if idle follow the below steps , else exist
	state = pSPIHandle->RxState;
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	7d5b      	ldrb	r3, [r3, #21]
 8000d7a:	75fb      	strb	r3, [r7, #23]

	if(state != SPI_STATE_BUSY_IN_RX)
 8000d7c:	7dfb      	ldrb	r3, [r7, #23]
 8000d7e:	2b02      	cmp	r3, #2
 8000d80:	d010      	beq.n	8000da4 <SPI_ReceiveDataIT+0x3a>
	{
		//2. Copy the Transmit buffer address and length byte information
		pSPIHandle->pRxBuffer = pRxBuffer;
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	68ba      	ldr	r2, [r7, #8]
 8000d86:	611a      	str	r2, [r3, #16]
		pSPIHandle->RxLen = Len;
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	687a      	ldr	r2, [r7, #4]
 8000d8c:	61da      	str	r2, [r3, #28]

		//3. Change the SPI state as busy in Tx
		pSPIHandle->RxState = SPI_STATE_BUSY_IN_RX;
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	2202      	movs	r2, #2
 8000d92:	755a      	strb	r2, [r3, #21]

		//4. Enable the SPI TXE interrupt bit to trigger the SPI_ISR
		pSPIHandle->pSPIx->CR2 |= (1 << SPI_CR2_RXNEIE);
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	685a      	ldr	r2, [r3, #4]
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000da2:	605a      	str	r2, [r3, #4]
	}
	return state;
 8000da4:	7dfb      	ldrb	r3, [r7, #23]
}
 8000da6:	4618      	mov	r0, r3
 8000da8:	371c      	adds	r7, #28
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bc80      	pop	{r7}
 8000dae:	4770      	bx	lr

08000db0 <SPI_IRQConfig>:

/*
 * SPI IRQ Configuration
 */
void SPI_IRQConfig(uint8_t IRQNumber,uint8_t EnorDi)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b083      	sub	sp, #12
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	4603      	mov	r3, r0
 8000db8:	460a      	mov	r2, r1
 8000dba:	71fb      	strb	r3, [r7, #7]
 8000dbc:	4613      	mov	r3, r2
 8000dbe:	71bb      	strb	r3, [r7, #6]
	if(EnorDi == ENABLE)
 8000dc0:	79bb      	ldrb	r3, [r7, #6]
 8000dc2:	2b01      	cmp	r3, #1
 8000dc4:	d133      	bne.n	8000e2e <SPI_IRQConfig+0x7e>
	{
		if(IRQNumber <= 31)
 8000dc6:	79fb      	ldrb	r3, [r7, #7]
 8000dc8:	2b1f      	cmp	r3, #31
 8000dca:	d80a      	bhi.n	8000de2 <SPI_IRQConfig+0x32>
		{
			*NVIC_ISER0 |= (1 << IRQNumber);
 8000dcc:	4b34      	ldr	r3, [pc, #208]	; (8000ea0 <SPI_IRQConfig+0xf0>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	79fa      	ldrb	r2, [r7, #7]
 8000dd2:	2101      	movs	r1, #1
 8000dd4:	fa01 f202 	lsl.w	r2, r1, r2
 8000dd8:	4611      	mov	r1, r2
 8000dda:	4a31      	ldr	r2, [pc, #196]	; (8000ea0 <SPI_IRQConfig+0xf0>)
 8000ddc:	430b      	orrs	r3, r1
 8000dde:	6013      	str	r3, [r2, #0]
		else if((IRQNumber >= 64) && (IRQNumber < 96))
		{
			*NVIC_ICER2 |= (1 << (IRQNumber % 64));
		}
	}
}
 8000de0:	e059      	b.n	8000e96 <SPI_IRQConfig+0xe6>
		else if((IRQNumber > 31) && (IRQNumber < 64))
 8000de2:	79fb      	ldrb	r3, [r7, #7]
 8000de4:	2b1f      	cmp	r3, #31
 8000de6:	d90f      	bls.n	8000e08 <SPI_IRQConfig+0x58>
 8000de8:	79fb      	ldrb	r3, [r7, #7]
 8000dea:	2b3f      	cmp	r3, #63	; 0x3f
 8000dec:	d80c      	bhi.n	8000e08 <SPI_IRQConfig+0x58>
			*NVIC_ISER1 |= (1 << (IRQNumber % 32));
 8000dee:	4b2d      	ldr	r3, [pc, #180]	; (8000ea4 <SPI_IRQConfig+0xf4>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	79fa      	ldrb	r2, [r7, #7]
 8000df4:	f002 021f 	and.w	r2, r2, #31
 8000df8:	2101      	movs	r1, #1
 8000dfa:	fa01 f202 	lsl.w	r2, r1, r2
 8000dfe:	4611      	mov	r1, r2
 8000e00:	4a28      	ldr	r2, [pc, #160]	; (8000ea4 <SPI_IRQConfig+0xf4>)
 8000e02:	430b      	orrs	r3, r1
 8000e04:	6013      	str	r3, [r2, #0]
 8000e06:	e046      	b.n	8000e96 <SPI_IRQConfig+0xe6>
		else if((IRQNumber >= 64) && (IRQNumber < 96))
 8000e08:	79fb      	ldrb	r3, [r7, #7]
 8000e0a:	2b3f      	cmp	r3, #63	; 0x3f
 8000e0c:	d943      	bls.n	8000e96 <SPI_IRQConfig+0xe6>
 8000e0e:	79fb      	ldrb	r3, [r7, #7]
 8000e10:	2b5f      	cmp	r3, #95	; 0x5f
 8000e12:	d840      	bhi.n	8000e96 <SPI_IRQConfig+0xe6>
			*NVIC_ISER2 |= (1 << (IRQNumber % 64));
 8000e14:	4b24      	ldr	r3, [pc, #144]	; (8000ea8 <SPI_IRQConfig+0xf8>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	79fa      	ldrb	r2, [r7, #7]
 8000e1a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000e1e:	2101      	movs	r1, #1
 8000e20:	fa01 f202 	lsl.w	r2, r1, r2
 8000e24:	4611      	mov	r1, r2
 8000e26:	4a20      	ldr	r2, [pc, #128]	; (8000ea8 <SPI_IRQConfig+0xf8>)
 8000e28:	430b      	orrs	r3, r1
 8000e2a:	6013      	str	r3, [r2, #0]
}
 8000e2c:	e033      	b.n	8000e96 <SPI_IRQConfig+0xe6>
		if(IRQNumber <= 31)
 8000e2e:	79fb      	ldrb	r3, [r7, #7]
 8000e30:	2b1f      	cmp	r3, #31
 8000e32:	d80a      	bhi.n	8000e4a <SPI_IRQConfig+0x9a>
			*NVIC_ICER0 |= (1 << IRQNumber);
 8000e34:	4b1d      	ldr	r3, [pc, #116]	; (8000eac <SPI_IRQConfig+0xfc>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	79fa      	ldrb	r2, [r7, #7]
 8000e3a:	2101      	movs	r1, #1
 8000e3c:	fa01 f202 	lsl.w	r2, r1, r2
 8000e40:	4611      	mov	r1, r2
 8000e42:	4a1a      	ldr	r2, [pc, #104]	; (8000eac <SPI_IRQConfig+0xfc>)
 8000e44:	430b      	orrs	r3, r1
 8000e46:	6013      	str	r3, [r2, #0]
}
 8000e48:	e025      	b.n	8000e96 <SPI_IRQConfig+0xe6>
		else if((IRQNumber > 31) && (IRQNumber < 64))
 8000e4a:	79fb      	ldrb	r3, [r7, #7]
 8000e4c:	2b1f      	cmp	r3, #31
 8000e4e:	d90f      	bls.n	8000e70 <SPI_IRQConfig+0xc0>
 8000e50:	79fb      	ldrb	r3, [r7, #7]
 8000e52:	2b3f      	cmp	r3, #63	; 0x3f
 8000e54:	d80c      	bhi.n	8000e70 <SPI_IRQConfig+0xc0>
			*NVIC_ICER1 |= (1 << (IRQNumber % 32));
 8000e56:	4b16      	ldr	r3, [pc, #88]	; (8000eb0 <SPI_IRQConfig+0x100>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	79fa      	ldrb	r2, [r7, #7]
 8000e5c:	f002 021f 	and.w	r2, r2, #31
 8000e60:	2101      	movs	r1, #1
 8000e62:	fa01 f202 	lsl.w	r2, r1, r2
 8000e66:	4611      	mov	r1, r2
 8000e68:	4a11      	ldr	r2, [pc, #68]	; (8000eb0 <SPI_IRQConfig+0x100>)
 8000e6a:	430b      	orrs	r3, r1
 8000e6c:	6013      	str	r3, [r2, #0]
 8000e6e:	e012      	b.n	8000e96 <SPI_IRQConfig+0xe6>
		else if((IRQNumber >= 64) && (IRQNumber < 96))
 8000e70:	79fb      	ldrb	r3, [r7, #7]
 8000e72:	2b3f      	cmp	r3, #63	; 0x3f
 8000e74:	d90f      	bls.n	8000e96 <SPI_IRQConfig+0xe6>
 8000e76:	79fb      	ldrb	r3, [r7, #7]
 8000e78:	2b5f      	cmp	r3, #95	; 0x5f
 8000e7a:	d80c      	bhi.n	8000e96 <SPI_IRQConfig+0xe6>
			*NVIC_ICER2 |= (1 << (IRQNumber % 64));
 8000e7c:	4b0d      	ldr	r3, [pc, #52]	; (8000eb4 <SPI_IRQConfig+0x104>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	79fa      	ldrb	r2, [r7, #7]
 8000e82:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000e86:	2101      	movs	r1, #1
 8000e88:	fa01 f202 	lsl.w	r2, r1, r2
 8000e8c:	4611      	mov	r1, r2
 8000e8e:	4a09      	ldr	r2, [pc, #36]	; (8000eb4 <SPI_IRQConfig+0x104>)
 8000e90:	430b      	orrs	r3, r1
 8000e92:	6013      	str	r3, [r2, #0]
}
 8000e94:	e7ff      	b.n	8000e96 <SPI_IRQConfig+0xe6>
 8000e96:	bf00      	nop
 8000e98:	370c      	adds	r7, #12
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bc80      	pop	{r7}
 8000e9e:	4770      	bx	lr
 8000ea0:	e000e100 	.word	0xe000e100
 8000ea4:	e000e104 	.word	0xe000e104
 8000ea8:	e000e108 	.word	0xe000e108
 8000eac:	e000e180 	.word	0xe000e180
 8000eb0:	e000e184 	.word	0xe000e184
 8000eb4:	e000e188 	.word	0xe000e188

08000eb8 <SPI_IRQ_PriorityConfig>:


void SPI_IRQ_PriorityConfig(uint8_t IRQNumber,uint32_t IRQ_Priority)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b085      	sub	sp, #20
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	6039      	str	r1, [r7, #0]
 8000ec2:	71fb      	strb	r3, [r7, #7]
	uint8_t index = 0;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	73fb      	strb	r3, [r7, #15]
	uint8_t Pos	= 0;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	73bb      	strb	r3, [r7, #14]
	uint8_t Bit_width = 8;
 8000ecc:	2308      	movs	r3, #8
 8000ece:	737b      	strb	r3, [r7, #13]

	index = IRQNumber / 4;
 8000ed0:	79fb      	ldrb	r3, [r7, #7]
 8000ed2:	089b      	lsrs	r3, r3, #2
 8000ed4:	73fb      	strb	r3, [r7, #15]
	Pos = IRQNumber % 4;
 8000ed6:	79fb      	ldrb	r3, [r7, #7]
 8000ed8:	f003 0303 	and.w	r3, r3, #3
 8000edc:	73bb      	strb	r3, [r7, #14]

	*(NVIC_IPRN + index) = ((IRQ_Priority << 4) << (Bit_width * Pos));
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	0119      	lsls	r1, r3, #4
 8000ee2:	7b7b      	ldrb	r3, [r7, #13]
 8000ee4:	7bba      	ldrb	r2, [r7, #14]
 8000ee6:	fb02 f203 	mul.w	r2, r2, r3
 8000eea:	7bfb      	ldrb	r3, [r7, #15]
 8000eec:	009b      	lsls	r3, r3, #2
 8000eee:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000ef2:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8000ef6:	fa01 f202 	lsl.w	r2, r1, r2
 8000efa:	601a      	str	r2, [r3, #0]

}
 8000efc:	bf00      	nop
 8000efe:	3714      	adds	r7, #20
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bc80      	pop	{r7}
 8000f04:	4770      	bx	lr

08000f06 <SPI_GetFlagStatus>:

/*
 * SPI Get Status API's
 */
uint8_t SPI_GetFlagStatus(SPI_RegDef_t *pSPIx,uint32_t flagread)
{
 8000f06:	b480      	push	{r7}
 8000f08:	b083      	sub	sp, #12
 8000f0a:	af00      	add	r7, sp, #0
 8000f0c:	6078      	str	r0, [r7, #4]
 8000f0e:	6039      	str	r1, [r7, #0]
	if(pSPIx->SR & flagread)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	689a      	ldr	r2, [r3, #8]
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	4013      	ands	r3, r2
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d001      	beq.n	8000f20 <SPI_GetFlagStatus+0x1a>
	{
		return FLAG_SET;
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	e000      	b.n	8000f22 <SPI_GetFlagStatus+0x1c>
	}
	return FLAG_RESET;
 8000f20:	2300      	movs	r3, #0
}
 8000f22:	4618      	mov	r0, r3
 8000f24:	370c      	adds	r7, #12
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bc80      	pop	{r7}
 8000f2a:	4770      	bx	lr

08000f2c <SPI_PeripheralControl>:


void SPI_PeripheralControl(SPI_RegDef_t *pSPIx,uint8_t EnorDi)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b083      	sub	sp, #12
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
 8000f34:	460b      	mov	r3, r1
 8000f36:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000f38:	78fb      	ldrb	r3, [r7, #3]
 8000f3a:	2b01      	cmp	r3, #1
 8000f3c:	d106      	bne.n	8000f4c <SPI_PeripheralControl+0x20>
	{
		pSPIx->CR1 |= (1 << SPI_CR1_SPE);
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	601a      	str	r2, [r3, #0]
	}
	else
	{
		pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
	}
}
 8000f4a:	e005      	b.n	8000f58 <SPI_PeripheralControl+0x2c>
		pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	601a      	str	r2, [r3, #0]
}
 8000f58:	bf00      	nop
 8000f5a:	370c      	adds	r7, #12
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bc80      	pop	{r7}
 8000f60:	4770      	bx	lr

08000f62 <SPI_SSOEConfig>:
	}
}


void SPI_SSOEConfig(SPI_RegDef_t *pSPIx,uint8_t EnorDi)
{
 8000f62:	b480      	push	{r7}
 8000f64:	b083      	sub	sp, #12
 8000f66:	af00      	add	r7, sp, #0
 8000f68:	6078      	str	r0, [r7, #4]
 8000f6a:	460b      	mov	r3, r1
 8000f6c:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000f6e:	78fb      	ldrb	r3, [r7, #3]
 8000f70:	2b01      	cmp	r3, #1
 8000f72:	d106      	bne.n	8000f82 <SPI_SSOEConfig+0x20>
	{
		pSPIx->CR2 |= (1 << SPI_CR2_SSOE);
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	f043 0204 	orr.w	r2, r3, #4
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	605a      	str	r2, [r3, #4]
	}
	else
	{
		pSPIx->CR2 &= ~(1 << SPI_CR2_SSOE);
	}
}
 8000f80:	e005      	b.n	8000f8e <SPI_SSOEConfig+0x2c>
		pSPIx->CR2 &= ~(1 << SPI_CR2_SSOE);
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	685b      	ldr	r3, [r3, #4]
 8000f86:	f023 0204 	bic.w	r2, r3, #4
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	605a      	str	r2, [r3, #4]
}
 8000f8e:	bf00      	nop
 8000f90:	370c      	adds	r7, #12
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bc80      	pop	{r7}
 8000f96:	4770      	bx	lr

08000f98 <SPI_IRQHandling>:
	temp = pSPIx->SR;
	(void)temp;
}

void SPI_IRQHandling(SPI_Handle_t *pSPIHandle)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b084      	sub	sp, #16
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
	uint8_t temp1 , temp2;

	//Check for TXE and TXEIE it is set
	temp1 = (pSPIHandle->pSPIx->SR & (1 << SPI_SR_TXE));
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	689b      	ldr	r3, [r3, #8]
 8000fa6:	b2db      	uxtb	r3, r3
 8000fa8:	f003 0302 	and.w	r3, r3, #2
 8000fac:	73fb      	strb	r3, [r7, #15]
	temp2 = (pSPIHandle->pSPIx->CR2 & (1 << SPI_CR2_TXEIE));
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	b2db      	uxtb	r3, r3
 8000fb6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000fba:	73bb      	strb	r3, [r7, #14]

	if( temp1 && temp2 )
 8000fbc:	7bfb      	ldrb	r3, [r7, #15]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d005      	beq.n	8000fce <SPI_IRQHandling+0x36>
 8000fc2:	7bbb      	ldrb	r3, [r7, #14]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d002      	beq.n	8000fce <SPI_IRQHandling+0x36>
	{
		spi_txe_interrupt_handle(pSPIHandle);
 8000fc8:	6878      	ldr	r0, [r7, #4]
 8000fca:	f000 f832 	bl	8001032 <spi_txe_interrupt_handle>
	}

	//Check for TXE and TXEIE it is set
	temp1 = (pSPIHandle->pSPIx->SR & (1 << SPI_SR_RXNE));
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	689b      	ldr	r3, [r3, #8]
 8000fd4:	b2db      	uxtb	r3, r3
 8000fd6:	f003 0301 	and.w	r3, r3, #1
 8000fda:	73fb      	strb	r3, [r7, #15]
	temp2 = (pSPIHandle->pSPIx->CR2 & (1 << SPI_CR2_RXNEIE));
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	685b      	ldr	r3, [r3, #4]
 8000fe2:	b2db      	uxtb	r3, r3
 8000fe4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fe8:	73bb      	strb	r3, [r7, #14]

	if( temp1 && temp2 )
 8000fea:	7bfb      	ldrb	r3, [r7, #15]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d005      	beq.n	8000ffc <SPI_IRQHandling+0x64>
 8000ff0:	7bbb      	ldrb	r3, [r7, #14]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d002      	beq.n	8000ffc <SPI_IRQHandling+0x64>
	{
		spi_rxne_interrupt_handle(pSPIHandle);
 8000ff6:	6878      	ldr	r0, [r7, #4]
 8000ff8:	f000 f85b 	bl	80010b2 <spi_rxne_interrupt_handle>
	}

	//Check for TXE and TXEIE it is set
	temp1 = (pSPIHandle->pSPIx->SR & (1 << SPI_SR_OVR));
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	689b      	ldr	r3, [r3, #8]
 8001002:	b2db      	uxtb	r3, r3
 8001004:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001008:	73fb      	strb	r3, [r7, #15]
	temp2 = (pSPIHandle->pSPIx->CR2 & (1 << SPI_CR2_ERRIE));
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	b2db      	uxtb	r3, r3
 8001012:	f003 0320 	and.w	r3, r3, #32
 8001016:	73bb      	strb	r3, [r7, #14]

	if( temp1 && temp2 )
 8001018:	7bfb      	ldrb	r3, [r7, #15]
 800101a:	2b00      	cmp	r3, #0
 800101c:	d005      	beq.n	800102a <SPI_IRQHandling+0x92>
 800101e:	7bbb      	ldrb	r3, [r7, #14]
 8001020:	2b00      	cmp	r3, #0
 8001022:	d002      	beq.n	800102a <SPI_IRQHandling+0x92>
	{
		spi_ovr_interrupt_handle(pSPIHandle);
 8001024:	6878      	ldr	r0, [r7, #4]
 8001026:	f000 f886 	bl	8001136 <spi_ovr_interrupt_handle>
	}

}
 800102a:	bf00      	nop
 800102c:	3710      	adds	r7, #16
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}

08001032 <spi_txe_interrupt_handle>:


void spi_txe_interrupt_handle(SPI_Handle_t *pSPIHandle)
{
 8001032:	b580      	push	{r7, lr}
 8001034:	b082      	sub	sp, #8
 8001036:	af00      	add	r7, sp, #0
 8001038:	6078      	str	r0, [r7, #4]

	//Check DFF for 8bit or 16bit data format
	if(pSPIHandle->pSPIx->CR1 & (1 << SPI_CR1_DFF))
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001044:	2b00      	cmp	r3, #0
 8001046:	d015      	beq.n	8001074 <spi_txe_interrupt_handle+0x42>
	{
		//write 16bit data into SPI Data register
		pSPIHandle->pSPIx->DR = *((uint16_t *)pSPIHandle->pTxBuffer);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	68db      	ldr	r3, [r3, #12]
 800104c:	881a      	ldrh	r2, [r3, #0]
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	60da      	str	r2, [r3, #12]
		pSPIHandle->TxLen--;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	699b      	ldr	r3, [r3, #24]
 8001058:	1e5a      	subs	r2, r3, #1
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	619a      	str	r2, [r3, #24]
		pSPIHandle->TxLen--;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	699b      	ldr	r3, [r3, #24]
 8001062:	1e5a      	subs	r2, r3, #1
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	619a      	str	r2, [r3, #24]
		(uint16_t *)pSPIHandle->pTxBuffer++;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	68db      	ldr	r3, [r3, #12]
 800106c:	1c5a      	adds	r2, r3, #1
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	60da      	str	r2, [r3, #12]
 8001072:	e00f      	b.n	8001094 <spi_txe_interrupt_handle+0x62>
	}
	else
	{
		//write 8bit data into SPI Data register
		pSPIHandle->pSPIx->DR = *pSPIHandle->pTxBuffer;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	68db      	ldr	r3, [r3, #12]
 8001078:	781a      	ldrb	r2, [r3, #0]
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	60da      	str	r2, [r3, #12]
		pSPIHandle->TxLen--;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	699b      	ldr	r3, [r3, #24]
 8001084:	1e5a      	subs	r2, r3, #1
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	619a      	str	r2, [r3, #24]
		pSPIHandle->pTxBuffer++;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	68db      	ldr	r3, [r3, #12]
 800108e:	1c5a      	adds	r2, r3, #1
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	60da      	str	r2, [r3, #12]
	}

	//check for close the SPI transmission
	if( !pSPIHandle->TxLen )
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	699b      	ldr	r3, [r3, #24]
 8001098:	2b00      	cmp	r3, #0
 800109a:	d106      	bne.n	80010aa <spi_txe_interrupt_handle+0x78>
	{
		SPI_CloseTransmission(pSPIHandle);
 800109c:	6878      	ldr	r0, [r7, #4]
 800109e:	f000 f86f 	bl	8001180 <SPI_CloseTransmission>
		SPI_ApplicationEventCallback(pSPIHandle,SPI_APP_EVT_TX_CMPLT);
 80010a2:	2100      	movs	r1, #0
 80010a4:	6878      	ldr	r0, [r7, #4]
 80010a6:	f000 f860 	bl	800116a <SPI_ApplicationEventCallback>
	}
}
 80010aa:	bf00      	nop
 80010ac:	3708      	adds	r7, #8
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}

080010b2 <spi_rxne_interrupt_handle>:


void spi_rxne_interrupt_handle(SPI_Handle_t *pSPIHandle)
{
 80010b2:	b580      	push	{r7, lr}
 80010b4:	b082      	sub	sp, #8
 80010b6:	af00      	add	r7, sp, #0
 80010b8:	6078      	str	r0, [r7, #4]

	//Check DFF for 8bit or 16bit data format
	if(pSPIHandle->pSPIx->CR1 & (1 << SPI_CR1_DFF))
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d016      	beq.n	80010f6 <spi_rxne_interrupt_handle+0x44>
	{
		//write 16bit data into SPI Data register
		*((uint16_t *)pSPIHandle->pRxBuffer) =  pSPIHandle->pSPIx->DR;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	68da      	ldr	r2, [r3, #12]
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	691b      	ldr	r3, [r3, #16]
 80010d2:	b292      	uxth	r2, r2
 80010d4:	801a      	strh	r2, [r3, #0]
		pSPIHandle->RxLen--;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	69db      	ldr	r3, [r3, #28]
 80010da:	1e5a      	subs	r2, r3, #1
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	61da      	str	r2, [r3, #28]
		pSPIHandle->RxLen--;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	69db      	ldr	r3, [r3, #28]
 80010e4:	1e5a      	subs	r2, r3, #1
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	61da      	str	r2, [r3, #28]
		(uint16_t *)pSPIHandle->pRxBuffer++;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	691b      	ldr	r3, [r3, #16]
 80010ee:	1c5a      	adds	r2, r3, #1
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	611a      	str	r2, [r3, #16]
 80010f4:	e010      	b.n	8001118 <spi_rxne_interrupt_handle+0x66>
	}
	else
	{
		//write 8bit data into SPI Data register
		*pSPIHandle->pRxBuffer =  pSPIHandle->pSPIx->DR;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	68da      	ldr	r2, [r3, #12]
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	691b      	ldr	r3, [r3, #16]
 8001100:	b2d2      	uxtb	r2, r2
 8001102:	701a      	strb	r2, [r3, #0]
		pSPIHandle->RxLen--;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	69db      	ldr	r3, [r3, #28]
 8001108:	1e5a      	subs	r2, r3, #1
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	61da      	str	r2, [r3, #28]
		pSPIHandle->pRxBuffer++;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	691b      	ldr	r3, [r3, #16]
 8001112:	1c5a      	adds	r2, r3, #1
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	611a      	str	r2, [r3, #16]
	}

	//check for close the SPI Recepition
	if( !pSPIHandle->RxLen )
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	69db      	ldr	r3, [r3, #28]
 800111c:	2b00      	cmp	r3, #0
 800111e:	d106      	bne.n	800112e <spi_rxne_interrupt_handle+0x7c>
	{
		SPI_CloseRecepition(pSPIHandle);
 8001120:	6878      	ldr	r0, [r7, #4]
 8001122:	f000 f847 	bl	80011b4 <SPI_CloseRecepition>
		SPI_ApplicationEventCallback(pSPIHandle,SPI_APP_EVT_RX_CMPLT);
 8001126:	2101      	movs	r1, #1
 8001128:	6878      	ldr	r0, [r7, #4]
 800112a:	f000 f81e 	bl	800116a <SPI_ApplicationEventCallback>
	}
}
 800112e:	bf00      	nop
 8001130:	3708      	adds	r7, #8
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}

08001136 <spi_ovr_interrupt_handle>:


void spi_ovr_interrupt_handle(SPI_Handle_t *pSPIHandle)
{
 8001136:	b580      	push	{r7, lr}
 8001138:	b084      	sub	sp, #16
 800113a:	af00      	add	r7, sp, #0
 800113c:	6078      	str	r0, [r7, #4]
	uint8_t temp = 0;
 800113e:	2300      	movs	r3, #0
 8001140:	73fb      	strb	r3, [r7, #15]
	if(pSPIHandle->TxState != SPI_STATE_BUSY_IN_TX)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	7d1b      	ldrb	r3, [r3, #20]
 8001146:	2b01      	cmp	r3, #1
 8001148:	d007      	beq.n	800115a <spi_ovr_interrupt_handle+0x24>
	{
		temp = pSPIHandle->pSPIx->DR;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	68db      	ldr	r3, [r3, #12]
 8001150:	73fb      	strb	r3, [r7, #15]
		temp = pSPIHandle->pSPIx->SR;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	689b      	ldr	r3, [r3, #8]
 8001158:	73fb      	strb	r3, [r7, #15]
		(void)temp;
	}
	SPI_ApplicationEventCallback(pSPIHandle,SPI_APP_EVT_ERR_CMPLT);
 800115a:	2102      	movs	r1, #2
 800115c:	6878      	ldr	r0, [r7, #4]
 800115e:	f000 f804 	bl	800116a <SPI_ApplicationEventCallback>
}
 8001162:	bf00      	nop
 8001164:	3710      	adds	r7, #16
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}

0800116a <SPI_ApplicationEventCallback>:



__weak void SPI_ApplicationEventCallback(SPI_Handle_t *pSPIHandle,SPI_Event_e AppEV)
{
 800116a:	b480      	push	{r7}
 800116c:	b083      	sub	sp, #12
 800116e:	af00      	add	r7, sp, #0
 8001170:	6078      	str	r0, [r7, #4]
 8001172:	460b      	mov	r3, r1
 8001174:	70fb      	strb	r3, [r7, #3]

}
 8001176:	bf00      	nop
 8001178:	370c      	adds	r7, #12
 800117a:	46bd      	mov	sp, r7
 800117c:	bc80      	pop	{r7}
 800117e:	4770      	bx	lr

08001180 <SPI_CloseTransmission>:


void SPI_CloseTransmission(SPI_Handle_t *pSPIHandle)
{
 8001180:	b480      	push	{r7}
 8001182:	b083      	sub	sp, #12
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
	//Disable the TXXIE bit
	pSPIHandle->pSPIx->CR2 &= ~(1 << SPI_CR2_TXEIE);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	685a      	ldr	r2, [r3, #4]
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001196:	605a      	str	r2, [r3, #4]
	pSPIHandle->pTxBuffer = NULL;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	2200      	movs	r2, #0
 800119c:	60da      	str	r2, [r3, #12]
	pSPIHandle->TxLen = 0;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	2200      	movs	r2, #0
 80011a2:	619a      	str	r2, [r3, #24]
	pSPIHandle->TxState = SPI_STATE_IDLE;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	2200      	movs	r2, #0
 80011a8:	751a      	strb	r2, [r3, #20]
}
 80011aa:	bf00      	nop
 80011ac:	370c      	adds	r7, #12
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bc80      	pop	{r7}
 80011b2:	4770      	bx	lr

080011b4 <SPI_CloseRecepition>:

void SPI_CloseRecepition(SPI_Handle_t *pSPIHandle)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b083      	sub	sp, #12
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
	//Disable the TXXIE bit
	pSPIHandle->pSPIx->CR2 &= ~(1 << SPI_CR2_RXNEIE);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	685a      	ldr	r2, [r3, #4]
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80011ca:	605a      	str	r2, [r3, #4]
	pSPIHandle->pRxBuffer = NULL;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	2200      	movs	r2, #0
 80011d0:	611a      	str	r2, [r3, #16]
	pSPIHandle->RxLen = 0;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	2200      	movs	r2, #0
 80011d6:	61da      	str	r2, [r3, #28]
	pSPIHandle->RxState = SPI_STATE_IDLE;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	2200      	movs	r2, #0
 80011dc:	755a      	strb	r2, [r3, #21]
}
 80011de:	bf00      	nop
 80011e0:	370c      	adds	r7, #12
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bc80      	pop	{r7}
 80011e6:	4770      	bx	lr

080011e8 <__libc_init_array>:
 80011e8:	b570      	push	{r4, r5, r6, lr}
 80011ea:	4d0d      	ldr	r5, [pc, #52]	; (8001220 <__libc_init_array+0x38>)
 80011ec:	4c0d      	ldr	r4, [pc, #52]	; (8001224 <__libc_init_array+0x3c>)
 80011ee:	1b64      	subs	r4, r4, r5
 80011f0:	10a4      	asrs	r4, r4, #2
 80011f2:	2600      	movs	r6, #0
 80011f4:	42a6      	cmp	r6, r4
 80011f6:	d109      	bne.n	800120c <__libc_init_array+0x24>
 80011f8:	4d0b      	ldr	r5, [pc, #44]	; (8001228 <__libc_init_array+0x40>)
 80011fa:	4c0c      	ldr	r4, [pc, #48]	; (800122c <__libc_init_array+0x44>)
 80011fc:	f000 f828 	bl	8001250 <_init>
 8001200:	1b64      	subs	r4, r4, r5
 8001202:	10a4      	asrs	r4, r4, #2
 8001204:	2600      	movs	r6, #0
 8001206:	42a6      	cmp	r6, r4
 8001208:	d105      	bne.n	8001216 <__libc_init_array+0x2e>
 800120a:	bd70      	pop	{r4, r5, r6, pc}
 800120c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001210:	4798      	blx	r3
 8001212:	3601      	adds	r6, #1
 8001214:	e7ee      	b.n	80011f4 <__libc_init_array+0xc>
 8001216:	f855 3b04 	ldr.w	r3, [r5], #4
 800121a:	4798      	blx	r3
 800121c:	3601      	adds	r6, #1
 800121e:	e7f2      	b.n	8001206 <__libc_init_array+0x1e>
 8001220:	08001288 	.word	0x08001288
 8001224:	08001288 	.word	0x08001288
 8001228:	08001288 	.word	0x08001288
 800122c:	0800128c 	.word	0x0800128c

08001230 <memset>:
 8001230:	4402      	add	r2, r0
 8001232:	4603      	mov	r3, r0
 8001234:	4293      	cmp	r3, r2
 8001236:	d100      	bne.n	800123a <memset+0xa>
 8001238:	4770      	bx	lr
 800123a:	f803 1b01 	strb.w	r1, [r3], #1
 800123e:	e7f9      	b.n	8001234 <memset+0x4>

08001240 <strcpy>:
 8001240:	4603      	mov	r3, r0
 8001242:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001246:	f803 2b01 	strb.w	r2, [r3], #1
 800124a:	2a00      	cmp	r2, #0
 800124c:	d1f9      	bne.n	8001242 <strcpy+0x2>
 800124e:	4770      	bx	lr

08001250 <_init>:
 8001250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001252:	bf00      	nop
 8001254:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001256:	bc08      	pop	{r3}
 8001258:	469e      	mov	lr, r3
 800125a:	4770      	bx	lr

0800125c <_fini>:
 800125c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800125e:	bf00      	nop
 8001260:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001262:	bc08      	pop	{r3}
 8001264:	469e      	mov	lr, r3
 8001266:	4770      	bx	lr
